{"id":"9d89e71f752f8f49cc5eff0ff1dbb80a","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@ensdomains/buffer/contracts/Buffer.sol":{"content":"// SPDX-License-Identifier: BSD-2-Clause\npragma solidity ^0.8.4;\n\n/**\n* @dev A library for working with mutable byte buffers in Solidity.\n*\n* Byte buffers are mutable and expandable, and provide a variety of primitives\n* for appending to them. At any time you can fetch a bytes object containing the\n* current contents of the buffer. The bytes object should not be stored between\n* operations, as it may change due to resizing of the buffer.\n*/\nlibrary Buffer {\n    /**\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n    *      a capacity. The capacity may be longer than the current value, in\n    *      which case it can be extended without the need to allocate more memory.\n    */\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    /**\n    * @dev Initializes a buffer with an initial capacity.\n    * @param buf The buffer to initialize.\n    * @param capacity The number of bytes of space to allocate the buffer.\n    * @return The buffer, for chaining.\n    */\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\n        if (capacity % 32 != 0) {\n            capacity += 32 - (capacity % 32);\n        }\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            let fpm := add(32, add(ptr, capacity))\n            if lt(fpm, ptr) {\n                revert(0, 0)\n            }\n            mstore(0x40, fpm)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Initializes a new buffer from an existing bytes object.\n    *      Changes to the buffer may mutate the original value.\n    * @param b The bytes object to initialize the buffer with.\n    * @return A new buffer.\n    */\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\n        buffer memory buf;\n        buf.buf = b;\n        buf.capacity = b.length;\n        return buf;\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    /**\n    * @dev Sets buffer length to 0.\n    * @param buf The buffer to truncate.\n    * @return The original buffer, for chaining..\n    */\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\n        assembly {\n            let bufptr := mload(buf)\n            mstore(bufptr, 0)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to copy.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\n        require(len <= data.length);\n\n        uint off = buf.buf.length;\n        uint newCapacity = off + len;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        uint dest;\n        uint src;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + offset + sizeof(buffer length)\n            dest := add(add(bufptr, 32), off)\n            // Update buffer length if we're extending it\n            if gt(newCapacity, buflen) {\n                mstore(bufptr, newCapacity)\n            }\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        unchecked {\n            uint mask = (256 ** (32 - len)) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask))\n                let destpart := and(mload(dest), mask)\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n        return append(buf, data, data.length);\n    }\n\n    /**\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n    *      capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint offPlusOne = off + 1;\n        if (off >= buf.capacity) {\n            resize(buf, offPlusOne * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + off\n            let dest := add(add(bufptr, off), 32)\n            mstore8(dest, data)\n            // Update buffer length if we extended it\n            if gt(offPlusOne, mload(bufptr)) {\n                mstore(bufptr, offPlusOne)\n            }\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\n    *      exceed the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to write (left-aligned).\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint newCapacity = len + off;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        unchecked {\n            uint mask = (256 ** len) - 1;\n            // Right-align data\n            data = data >> (8 * (32 - len));\n            assembly {\n                // Memory address of the buffer data\n                let bufptr := mload(buf)\n                // Address = buffer address + sizeof(buffer length) + newCapacity\n                let dest := add(bufptr, newCapacity)\n                mstore(dest, or(and(mload(dest), not(mask)), data))\n                // Update buffer length if we extended it\n                if gt(newCapacity, mload(bufptr)) {\n                    mstore(bufptr, newCapacity)\n                }\n            }\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chhaining.\n    */\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n        return append(buf, bytes32(data), 20);\n    }\n\n    /**\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n        return append(buf, data, 32);\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     *      exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @param len The number of bytes to write (right-aligned).\n     * @return The original buffer.\n     */\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint newCapacity = len + off;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        uint mask = (256 ** len) - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + newCapacity\n            let dest := add(bufptr, newCapacity)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length if we extended it\n            if gt(newCapacity, mload(bufptr)) {\n                mstore(bufptr, newCapacity)\n            }\n        }\n        return buf;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport {Initializable} from \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/dnssec-oracle/RRUtils.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../utils/BytesUtils.sol\";\nimport \"@ensdomains/buffer/contracts/Buffer.sol\";\n\n/**\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\n */\nlibrary RRUtils {\n    using BytesUtils for *;\n    using Buffer for *;\n\n    /**\n     * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\n     * @param self The byte array to read a name from.\n     * @param offset The offset to start reading at.\n     * @return The length of the DNS name at 'offset', in bytes.\n     */\n    function nameLength(\n        bytes memory self,\n        uint256 offset\n    ) internal pure returns (uint256) {\n        uint256 idx = offset;\n        while (true) {\n            assert(idx < self.length);\n            uint256 labelLen = self.readUint8(idx);\n            idx += labelLen + 1;\n            if (labelLen == 0) {\n                break;\n            }\n        }\n        return idx - offset;\n    }\n\n    /**\n     * @dev Returns a DNS format name at the specified offset of self.\n     * @param self The byte array to read a name from.\n     * @param offset The offset to start reading at.\n     * @return ret The name.\n     */\n    function readName(\n        bytes memory self,\n        uint256 offset\n    ) internal pure returns (bytes memory ret) {\n        uint256 len = nameLength(self, offset);\n        return self.substring(offset, len);\n    }\n\n    /**\n     * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\n     * @param self The byte array to read a name from.\n     * @param offset The offset to start reading at.\n     * @return The number of labels in the DNS name at 'offset', in bytes.\n     */\n    function labelCount(\n        bytes memory self,\n        uint256 offset\n    ) internal pure returns (uint256) {\n        uint256 count = 0;\n        while (true) {\n            assert(offset < self.length);\n            uint256 labelLen = self.readUint8(offset);\n            offset += labelLen + 1;\n            if (labelLen == 0) {\n                break;\n            }\n            count += 1;\n        }\n        return count;\n    }\n\n    uint256 constant RRSIG_TYPE = 0;\n    uint256 constant RRSIG_ALGORITHM = 2;\n    uint256 constant RRSIG_LABELS = 3;\n    uint256 constant RRSIG_TTL = 4;\n    uint256 constant RRSIG_EXPIRATION = 8;\n    uint256 constant RRSIG_INCEPTION = 12;\n    uint256 constant RRSIG_KEY_TAG = 16;\n    uint256 constant RRSIG_SIGNER_NAME = 18;\n\n    struct SignedSet {\n        uint16 typeCovered;\n        uint8 algorithm;\n        uint8 labels;\n        uint32 ttl;\n        uint32 expiration;\n        uint32 inception;\n        uint16 keytag;\n        bytes signerName;\n        bytes data;\n        bytes name;\n    }\n\n    function readSignedSet(\n        bytes memory data\n    ) internal pure returns (SignedSet memory self) {\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\n        self.labels = data.readUint8(RRSIG_LABELS);\n        self.ttl = data.readUint32(RRSIG_TTL);\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\n        self.inception = data.readUint32(RRSIG_INCEPTION);\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\n        self.data = data.substring(\n            RRSIG_SIGNER_NAME + self.signerName.length,\n            data.length - RRSIG_SIGNER_NAME - self.signerName.length\n        );\n    }\n\n    function rrs(\n        SignedSet memory rrset\n    ) internal pure returns (RRIterator memory) {\n        return iterateRRs(rrset.data, 0);\n    }\n\n    /**\n     * @dev An iterator over resource records.\n     */\n    struct RRIterator {\n        bytes data;\n        uint256 offset;\n        uint16 dnstype;\n        uint16 class;\n        uint32 ttl;\n        uint256 rdataOffset;\n        uint256 nextOffset;\n    }\n\n    /**\n     * @dev Begins iterating over resource records.\n     * @param self The byte string to read from.\n     * @param offset The offset to start reading at.\n     * @return ret An iterator object.\n     */\n    function iterateRRs(\n        bytes memory self,\n        uint256 offset\n    ) internal pure returns (RRIterator memory ret) {\n        ret.data = self;\n        ret.nextOffset = offset;\n        next(ret);\n    }\n\n    /**\n     * @dev Returns true iff there are more RRs to iterate.\n     * @param iter The iterator to check.\n     * @return True iff the iterator has finished.\n     */\n    function done(RRIterator memory iter) internal pure returns (bool) {\n        return iter.offset >= iter.data.length;\n    }\n\n    /**\n     * @dev Moves the iterator to the next resource record.\n     * @param iter The iterator to advance.\n     */\n    function next(RRIterator memory iter) internal pure {\n        iter.offset = iter.nextOffset;\n        if (iter.offset >= iter.data.length) {\n            return;\n        }\n\n        // Skip the name\n        uint256 off = iter.offset + nameLength(iter.data, iter.offset);\n\n        // Read type, class, and ttl\n        iter.dnstype = iter.data.readUint16(off);\n        off += 2;\n        iter.class = iter.data.readUint16(off);\n        off += 2;\n        iter.ttl = iter.data.readUint32(off);\n        off += 4;\n\n        // Read the rdata\n        uint256 rdataLength = iter.data.readUint16(off);\n        off += 2;\n        iter.rdataOffset = off;\n        iter.nextOffset = off + rdataLength;\n    }\n\n    /**\n     * @dev Returns the name of the current record.\n     * @param iter The iterator.\n     * @return A new bytes object containing the owner name from the RR.\n     */\n    function name(RRIterator memory iter) internal pure returns (bytes memory) {\n        return\n            iter.data.substring(\n                iter.offset,\n                nameLength(iter.data, iter.offset)\n            );\n    }\n\n    /**\n     * @dev Returns the rdata portion of the current record.\n     * @param iter The iterator.\n     * @return A new bytes object containing the RR's RDATA.\n     */\n    function rdata(\n        RRIterator memory iter\n    ) internal pure returns (bytes memory) {\n        return\n            iter.data.substring(\n                iter.rdataOffset,\n                iter.nextOffset - iter.rdataOffset\n            );\n    }\n\n    uint256 constant DNSKEY_FLAGS = 0;\n    uint256 constant DNSKEY_PROTOCOL = 2;\n    uint256 constant DNSKEY_ALGORITHM = 3;\n    uint256 constant DNSKEY_PUBKEY = 4;\n\n    struct DNSKEY {\n        uint16 flags;\n        uint8 protocol;\n        uint8 algorithm;\n        bytes publicKey;\n    }\n\n    function readDNSKEY(\n        bytes memory data,\n        uint256 offset,\n        uint256 length\n    ) internal pure returns (DNSKEY memory self) {\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\n        self.publicKey = data.substring(\n            offset + DNSKEY_PUBKEY,\n            length - DNSKEY_PUBKEY\n        );\n    }\n\n    uint256 constant DS_KEY_TAG = 0;\n    uint256 constant DS_ALGORITHM = 2;\n    uint256 constant DS_DIGEST_TYPE = 3;\n    uint256 constant DS_DIGEST = 4;\n\n    struct DS {\n        uint16 keytag;\n        uint8 algorithm;\n        uint8 digestType;\n        bytes digest;\n    }\n\n    function readDS(\n        bytes memory data,\n        uint256 offset,\n        uint256 length\n    ) internal pure returns (DS memory self) {\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\n    }\n\n    function isSubdomainOf(\n        bytes memory self,\n        bytes memory other\n    ) internal pure returns (bool) {\n        uint256 off = 0;\n        uint256 counts = labelCount(self, 0);\n        uint256 othercounts = labelCount(other, 0);\n\n        while (counts > othercounts) {\n            off = progress(self, off);\n            counts--;\n        }\n\n        return self.equals(off, other, 0);\n    }\n\n    function compareNames(\n        bytes memory self,\n        bytes memory other\n    ) internal pure returns (int256) {\n        if (self.equals(other)) {\n            return 0;\n        }\n\n        uint256 off;\n        uint256 otheroff;\n        uint256 prevoff;\n        uint256 otherprevoff;\n        uint256 counts = labelCount(self, 0);\n        uint256 othercounts = labelCount(other, 0);\n\n        // Keep removing labels from the front of the name until both names are equal length\n        while (counts > othercounts) {\n            prevoff = off;\n            off = progress(self, off);\n            counts--;\n        }\n\n        while (othercounts > counts) {\n            otherprevoff = otheroff;\n            otheroff = progress(other, otheroff);\n            othercounts--;\n        }\n\n        // Compare the last nonequal labels to each other\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\n            prevoff = off;\n            off = progress(self, off);\n            otherprevoff = otheroff;\n            otheroff = progress(other, otheroff);\n            counts -= 1;\n        }\n\n        if (off == 0) {\n            return -1;\n        }\n        if (otheroff == 0) {\n            return 1;\n        }\n\n        return\n            self.compare(\n                prevoff + 1,\n                self.readUint8(prevoff),\n                other,\n                otherprevoff + 1,\n                other.readUint8(otherprevoff)\n            );\n    }\n\n    /**\n     * @dev Compares two serial numbers using RFC1982 serial number math.\n     */\n    function serialNumberGte(\n        uint32 i1,\n        uint32 i2\n    ) internal pure returns (bool) {\n        unchecked {\n            return int32(i1) - int32(i2) >= 0;\n        }\n    }\n\n    function progress(\n        bytes memory body,\n        uint256 off\n    ) internal pure returns (uint256) {\n        return off + 1 + body.readUint8(off);\n    }\n\n    /**\n     * @dev Computes the keytag for a chunk of data.\n     * @param data The data to compute a keytag for.\n     * @return The computed key tag.\n     */\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\n        /* This function probably deserves some explanation.\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\n         *\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\n         *         uint ac;\n         *         for (uint i = 0; i < data.length; i++) {\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\n         *         }\n         *         return uint16(ac + (ac >> 16));\n         *     }\n         *\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\n         * large words work in our favour.\n         *\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\n         * effectively summing 16 different numbers with each EVM ADD opcode.\n         *\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\n         * and the remaining sums can be done just on ac1.\n         */\n        unchecked {\n            require(data.length <= 8192, \"Long keys not permitted\");\n            uint256 ac1;\n            uint256 ac2;\n            for (uint256 i = 0; i < data.length + 31; i += 32) {\n                uint256 word;\n                assembly {\n                    word := mload(add(add(data, 32), i))\n                }\n                if (i + 32 > data.length) {\n                    uint256 unused = 256 - (data.length - i) * 8;\n                    word = (word >> unused) << unused;\n                }\n                ac1 +=\n                    (word &\n                        0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >>\n                    8;\n                ac2 += (word &\n                    0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\n            }\n            ac1 =\n                (ac1 &\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\n                ((ac1 &\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\n                    16);\n            ac2 =\n                (ac2 &\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\n                ((ac2 &\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\n                    16);\n            ac1 = (ac1 << 8) + ac2;\n            ac1 =\n                (ac1 &\n                    0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) +\n                ((ac1 &\n                    0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >>\n                    32);\n            ac1 =\n                (ac1 &\n                    0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) +\n                ((ac1 &\n                    0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >>\n                    64);\n            ac1 =\n                (ac1 &\n                    0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) +\n                (ac1 >> 128);\n            ac1 += (ac1 >> 16) & 0xFFFF;\n            return uint16(ac1);\n        }\n    }\n}\n"},"contracts/ethregistrar/IBaseRegistrar.sol":{"content":"import \"../registry/ENS.sol\";\nimport \"./IBaseRegistrar.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IBaseRegistrar is IERC721 {\n    event ControllerAdded(address indexed controller);\n    event ControllerRemoved(address indexed controller);\n    event NameMigrated(\n        uint256 indexed id,\n        address indexed owner,\n        uint256 expires\n    );\n    event NameRegistered(\n        uint256 indexed id,\n        address indexed owner,\n        uint256 expires\n    );\n    event NameRenewed(uint256 indexed id, uint256 expires);\n\n    // Authorises a controller, who can register and renew domains.\n    function addController(address controller) external;\n\n    // Revoke controller permission for an address.\n    function removeController(address controller) external;\n\n    // Set the resolver for the TLD this registrar manages.\n    function setResolver(address resolver) external;\n\n    // Returns the expiration timestamp of the specified label hash.\n    function nameExpires(uint256 id) external view returns (uint256);\n\n    // Returns true if the specified name is available for registration.\n    function available(uint256 id) external view returns (bool);\n\n    /**\n     * @dev Register a name.\n     */\n    function register(\n        uint256 id,\n        address owner,\n        uint256 duration\n    ) external returns (uint256);\n\n    function renew(uint256 id, uint256 duration) external returns (uint256);\n\n    /**\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\n     */\n    function reclaim(uint256 id, address owner) external;\n}\n"},"contracts/registry/ENS.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ENS {\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    function setRecord(\n        bytes32 node,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeRecord(\n        bytes32 node,\n        bytes32 label,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeOwner(\n        bytes32 node,\n        bytes32 label,\n        address owner\n    ) external returns (bytes32);\n\n    function setResolver(bytes32 node, address resolver) external;\n\n    function setOwner(bytes32 node, address owner) external;\n\n    function setTTL(bytes32 node, uint64 ttl) external;\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function owner(bytes32 node) external view returns (address);\n\n    function resolver(bytes32 node) external view returns (address);\n\n    function ttl(bytes32 node) external view returns (uint64);\n\n    function recordExists(bytes32 node) external view returns (bool);\n\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) external view returns (bool);\n}\n"},"contracts/resolvers/IMulticallable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IMulticallable {\n    function multicall(\n        bytes[] calldata data\n    ) external returns (bytes[] memory results);\n\n    function multicallWithNodeCheck(\n        bytes32,\n        bytes[] calldata data\n    ) external returns (bytes[] memory results);\n}\n"},"contracts/resolvers/Multicallable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IMulticallable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nabstract contract Multicallable is IMulticallable, ERC165 {\n    function _multicall(\n        bytes32 nodehash,\n        bytes[] calldata data\n    ) internal returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            if (nodehash != bytes32(0)) {\n                bytes32 txNamehash = bytes32(data[i][4:36]);\n                require(\n                    txNamehash == nodehash,\n                    \"multicall: All records must have a matching namehash\"\n                );\n            }\n            (bool success, bytes memory result) = address(this).delegatecall(\n                data[i]\n            );\n            require(success);\n            results[i] = result;\n        }\n        return results;\n    }\n\n    // This function provides an extra security check when called\n    // from priviledged contracts (such as EthRegistrarController)\n    // that can set records on behalf of the node owners\n    function multicallWithNodeCheck(\n        bytes32 nodehash,\n        bytes[] calldata data\n    ) external returns (bytes[] memory results) {\n        return _multicall(nodehash, data);\n    }\n\n    function multicall(\n        bytes[] calldata data\n    ) public override returns (bytes[] memory results) {\n        return _multicall(bytes32(0), data);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view virtual override returns (bool) {\n        return\n            interfaceID == type(IMulticallable).interfaceId ||\n            super.supportsInterface(interfaceID);\n    }\n}\n"},"contracts/resolvers/profiles/ABIResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"./IABIResolver.sol\";\nimport \"../ResolverBase.sol\";\n\nabstract contract ABIResolver is IABIResolver, ResolverBase {\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_abis;\n\n    /**\n     * Sets the ABI associated with an ENS node.\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\n     * the empty string.\n     * @param node The node to update.\n     * @param contentType The content type of the ABI\n     * @param data The ABI data.\n     */\n    function setABI(\n        bytes32 node,\n        uint256 contentType,\n        bytes calldata data\n    ) external virtual authorised(node) {\n        // Content types must be powers of 2\n        require(((contentType - 1) & contentType) == 0);\n\n        versionable_abis[recordVersions[node]][node][contentType] = data;\n        emit ABIChanged(node, contentType);\n    }\n\n    /**\n     * Returns the ABI associated with an ENS node.\n     * Defined in EIP205.\n     * @param node The ENS node to query\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n     * @return contentType The content type of the return value\n     * @return data The ABI data\n     */\n    function ABI(\n        bytes32 node,\n        uint256 contentTypes\n    ) external view virtual override returns (uint256, bytes memory) {\n        mapping(uint256 => bytes) storage abiset = versionable_abis[\n            recordVersions[node]\n        ][node];\n\n        for (\n            uint256 contentType = 1;\n            contentType <= contentTypes;\n            contentType <<= 1\n        ) {\n            if (\n                (contentType & contentTypes) != 0 &&\n                abiset[contentType].length > 0\n            ) {\n                return (contentType, abiset[contentType]);\n            }\n        }\n\n        return (0, bytes(\"\"));\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view virtual override returns (bool) {\n        return\n            interfaceID == type(IABIResolver).interfaceId ||\n            super.supportsInterface(interfaceID);\n    }\n}\n"},"contracts/resolvers/profiles/AddrResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"../ResolverBase.sol\";\nimport \"./IAddrResolver.sol\";\nimport \"./IAddressResolver.sol\";\n\nabstract contract AddrResolver is\n    IAddrResolver,\n    IAddressResolver,\n    ResolverBase\n{\n    uint256 private constant COIN_TYPE_ETH = 60;\n\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_addresses;\n\n    /**\n     * Sets the address associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param a The address to set.\n     */\n    function setAddr(\n        bytes32 node,\n        address a\n    ) external virtual authorised(node) {\n        setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\n    }\n\n    /**\n     * Returns the address associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated address.\n     */\n    function addr(\n        bytes32 node\n    ) public view virtual override returns (address payable) {\n        bytes memory a = addr(node, COIN_TYPE_ETH);\n        if (a.length == 0) {\n            return payable(0);\n        }\n        return bytesToAddress(a);\n    }\n\n    function setAddr(\n        bytes32 node,\n        uint256 coinType,\n        bytes memory a\n    ) public virtual authorised(node) {\n        emit AddressChanged(node, coinType, a);\n        if (coinType == COIN_TYPE_ETH) {\n            emit AddrChanged(node, bytesToAddress(a));\n        }\n        versionable_addresses[recordVersions[node]][node][coinType] = a;\n    }\n\n    function addr(\n        bytes32 node,\n        uint256 coinType\n    ) public view virtual override returns (bytes memory) {\n        return versionable_addresses[recordVersions[node]][node][coinType];\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view virtual override returns (bool) {\n        return\n            interfaceID == type(IAddrResolver).interfaceId ||\n            interfaceID == type(IAddressResolver).interfaceId ||\n            super.supportsInterface(interfaceID);\n    }\n\n    function bytesToAddress(\n        bytes memory b\n    ) internal pure returns (address payable a) {\n        require(b.length == 20);\n        assembly {\n            a := div(mload(add(b, 32)), exp(256, 12))\n        }\n    }\n\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\n        b = new bytes(20);\n        assembly {\n            mstore(add(b, 32), mul(a, exp(256, 12)))\n        }\n    }\n}\n"},"contracts/resolvers/profiles/ContentHashResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"../ResolverBase.sol\";\nimport \"./IContentHashResolver.sol\";\n\nabstract contract ContentHashResolver is IContentHashResolver, ResolverBase {\n    mapping(uint64 => mapping(bytes32 => bytes)) versionable_hashes;\n\n    /**\n     * Sets the contenthash associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param hash The contenthash to set\n     */\n    function setContenthash(\n        bytes32 node,\n        bytes calldata hash\n    ) external virtual authorised(node) {\n        versionable_hashes[recordVersions[node]][node] = hash;\n        emit ContenthashChanged(node, hash);\n    }\n\n    /**\n     * Returns the contenthash associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated contenthash.\n     */\n    function contenthash(\n        bytes32 node\n    ) external view virtual override returns (bytes memory) {\n        return versionable_hashes[recordVersions[node]][node];\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view virtual override returns (bool) {\n        return\n            interfaceID == type(IContentHashResolver).interfaceId ||\n            super.supportsInterface(interfaceID);\n    }\n}\n"},"contracts/resolvers/profiles/DNSResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"../ResolverBase.sol\";\nimport \"../../dnssec-oracle/RRUtils.sol\";\nimport \"./IDNSRecordResolver.sol\";\nimport \"./IDNSZoneResolver.sol\";\n\nabstract contract DNSResolver is\n    IDNSRecordResolver,\n    IDNSZoneResolver,\n    ResolverBase\n{\n    using RRUtils for *;\n    using BytesUtils for bytes;\n\n    // Zone hashes for the domains.\n    // A zone hash is an EIP-1577 content hash in binary format that should point to a\n    // resource containing a single zonefile.\n    // node => contenthash\n    mapping(uint64 => mapping(bytes32 => bytes)) private versionable_zonehashes;\n\n    // The records themselves.  Stored as binary RRSETs\n    // node => version => name => resource => data\n    mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))\n        private versionable_records;\n\n    // Count of number of entries for a given name.  Required for DNS resolvers\n    // when resolving wildcards.\n    // node => version => name => number of records\n    mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))\n        private versionable_nameEntriesCount;\n\n    /**\n     * Set one or more DNS records.  Records are supplied in wire-format.\n     * Records with the same node/name/resource must be supplied one after the\n     * other to ensure the data is updated correctly. For example, if the data\n     * was supplied:\n     *     a.example.com IN A 1.2.3.4\n     *     a.example.com IN A 5.6.7.8\n     *     www.example.com IN CNAME a.example.com.\n     * then this would store the two A records for a.example.com correctly as a\n     * single RRSET, however if the data was supplied:\n     *     a.example.com IN A 1.2.3.4\n     *     www.example.com IN CNAME a.example.com.\n     *     a.example.com IN A 5.6.7.8\n     * then this would store the first A record, the CNAME, then the second A\n     * record which would overwrite the first.\n     *\n     * @param node the namehash of the node for which to set the records\n     * @param data the DNS wire format records to set\n     */\n    function setDNSRecords(\n        bytes32 node,\n        bytes calldata data\n    ) external virtual authorised(node) {\n        uint16 resource = 0;\n        uint256 offset = 0;\n        bytes memory name;\n        bytes memory value;\n        bytes32 nameHash;\n        uint64 version = recordVersions[node];\n        // Iterate over the data to add the resource records\n        for (\n            RRUtils.RRIterator memory iter = data.iterateRRs(0);\n            !iter.done();\n            iter.next()\n        ) {\n            if (resource == 0) {\n                resource = iter.dnstype;\n                name = iter.name();\n                nameHash = keccak256(abi.encodePacked(name));\n                value = bytes(iter.rdata());\n            } else {\n                bytes memory newName = iter.name();\n                if (resource != iter.dnstype || !name.equals(newName)) {\n                    setDNSRRSet(\n                        node,\n                        name,\n                        resource,\n                        data,\n                        offset,\n                        iter.offset - offset,\n                        value.length == 0,\n                        version\n                    );\n                    resource = iter.dnstype;\n                    offset = iter.offset;\n                    name = newName;\n                    nameHash = keccak256(name);\n                    value = bytes(iter.rdata());\n                }\n            }\n        }\n        if (name.length > 0) {\n            setDNSRRSet(\n                node,\n                name,\n                resource,\n                data,\n                offset,\n                data.length - offset,\n                value.length == 0,\n                version\n            );\n        }\n    }\n\n    /**\n     * Obtain a DNS record.\n     * @param node the namehash of the node for which to fetch the record\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n     * @return the DNS record in wire format if present, otherwise empty\n     */\n    function dnsRecord(\n        bytes32 node,\n        bytes32 name,\n        uint16 resource\n    ) public view virtual override returns (bytes memory) {\n        return versionable_records[recordVersions[node]][node][name][resource];\n    }\n\n    /**\n     * Check if a given node has records.\n     * @param node the namehash of the node for which to check the records\n     * @param name the namehash of the node for which to check the records\n     */\n    function hasDNSRecords(\n        bytes32 node,\n        bytes32 name\n    ) public view virtual returns (bool) {\n        return (versionable_nameEntriesCount[recordVersions[node]][node][\n            name\n        ] != 0);\n    }\n\n    /**\n     * setZonehash sets the hash for the zone.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param hash The zonehash to set\n     */\n    function setZonehash(\n        bytes32 node,\n        bytes calldata hash\n    ) external virtual authorised(node) {\n        uint64 currentRecordVersion = recordVersions[node];\n        bytes memory oldhash = versionable_zonehashes[currentRecordVersion][\n            node\n        ];\n        versionable_zonehashes[currentRecordVersion][node] = hash;\n        emit DNSZonehashChanged(node, oldhash, hash);\n    }\n\n    /**\n     * zonehash obtains the hash for the zone.\n     * @param node The ENS node to query.\n     * @return The associated contenthash.\n     */\n    function zonehash(\n        bytes32 node\n    ) external view virtual override returns (bytes memory) {\n        return versionable_zonehashes[recordVersions[node]][node];\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view virtual override returns (bool) {\n        return\n            interfaceID == type(IDNSRecordResolver).interfaceId ||\n            interfaceID == type(IDNSZoneResolver).interfaceId ||\n            super.supportsInterface(interfaceID);\n    }\n\n    function setDNSRRSet(\n        bytes32 node,\n        bytes memory name,\n        uint16 resource,\n        bytes memory data,\n        uint256 offset,\n        uint256 size,\n        bool deleteRecord,\n        uint64 version\n    ) private {\n        bytes32 nameHash = keccak256(name);\n        bytes memory rrData = data.substring(offset, size);\n        if (deleteRecord) {\n            if (\n                versionable_records[version][node][nameHash][resource].length !=\n                0\n            ) {\n                versionable_nameEntriesCount[version][node][nameHash]--;\n            }\n            delete (versionable_records[version][node][nameHash][resource]);\n            emit DNSRecordDeleted(node, name, resource);\n        } else {\n            if (\n                versionable_records[version][node][nameHash][resource].length ==\n                0\n            ) {\n                versionable_nameEntriesCount[version][node][nameHash]++;\n            }\n            versionable_records[version][node][nameHash][resource] = rrData;\n            emit DNSRecordChanged(node, name, resource, rrData);\n        }\n    }\n}\n"},"contracts/resolvers/profiles/IABIResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IABIResolver {\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n\n    /**\n     * Returns the ABI associated with an ENS node.\n     * Defined in EIP205.\n     * @param node The ENS node to query\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n     * @return contentType The content type of the return value\n     * @return data The ABI data\n     */\n    function ABI(\n        bytes32 node,\n        uint256 contentTypes\n    ) external view returns (uint256, bytes memory);\n}\n"},"contracts/resolvers/profiles/IAddressResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * Interface for the new (multicoin) addr function.\n */\ninterface IAddressResolver {\n    event AddressChanged(\n        bytes32 indexed node,\n        uint256 coinType,\n        bytes newAddress\n    );\n\n    function addr(\n        bytes32 node,\n        uint256 coinType\n    ) external view returns (bytes memory);\n}\n"},"contracts/resolvers/profiles/IAddrResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * Interface for the legacy (ETH-only) addr function.\n */\ninterface IAddrResolver {\n    event AddrChanged(bytes32 indexed node, address a);\n\n    /**\n     * Returns the address associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated address.\n     */\n    function addr(bytes32 node) external view returns (address payable);\n}\n"},"contracts/resolvers/profiles/IContentHashResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IContentHashResolver {\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\n\n    /**\n     * Returns the contenthash associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated contenthash.\n     */\n    function contenthash(bytes32 node) external view returns (bytes memory);\n}\n"},"contracts/resolvers/profiles/IDNSRecordResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDNSRecordResolver {\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\n    event DNSRecordChanged(\n        bytes32 indexed node,\n        bytes name,\n        uint16 resource,\n        bytes record\n    );\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\n\n    /**\n     * Obtain a DNS record.\n     * @param node the namehash of the node for which to fetch the record\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n     * @return the DNS record in wire format if present, otherwise empty\n     */\n    function dnsRecord(\n        bytes32 node,\n        bytes32 name,\n        uint16 resource\n    ) external view returns (bytes memory);\n}\n"},"contracts/resolvers/profiles/IDNSZoneResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDNSZoneResolver {\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\n    event DNSZonehashChanged(\n        bytes32 indexed node,\n        bytes lastzonehash,\n        bytes zonehash\n    );\n\n    /**\n     * zonehash obtains the hash for the zone.\n     * @param node The ENS node to query.\n     * @return The associated contenthash.\n     */\n    function zonehash(bytes32 node) external view returns (bytes memory);\n}\n"},"contracts/resolvers/profiles/IInterfaceResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IInterfaceResolver {\n    event InterfaceChanged(\n        bytes32 indexed node,\n        bytes4 indexed interfaceID,\n        address implementer\n    );\n\n    /**\n     * Returns the address of a contract that implements the specified interface for this name.\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\n     * will be returned.\n     * @param node The ENS node to query.\n     * @param interfaceID The EIP 165 interface ID to check for.\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\n     */\n    function interfaceImplementer(\n        bytes32 node,\n        bytes4 interfaceID\n    ) external view returns (address);\n}\n"},"contracts/resolvers/profiles/INameResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface INameResolver {\n    event NameChanged(bytes32 indexed node, string name);\n\n    /**\n     * Returns the name associated with an ENS node, for reverse records.\n     * Defined in EIP181.\n     * @param node The ENS node to query.\n     * @return The associated name.\n     */\n    function name(bytes32 node) external view returns (string memory);\n}\n"},"contracts/resolvers/profiles/InterfaceResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"../ResolverBase.sol\";\nimport \"./AddrResolver.sol\";\nimport \"./IInterfaceResolver.sol\";\n\nabstract contract InterfaceResolver is IInterfaceResolver, AddrResolver {\n    mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address))) versionable_interfaces;\n\n    /**\n     * Sets an interface associated with a name.\n     * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\n     * @param node The node to update.\n     * @param interfaceID The EIP 165 interface ID.\n     * @param implementer The address of a contract that implements this interface for this node.\n     */\n    function setInterface(\n        bytes32 node,\n        bytes4 interfaceID,\n        address implementer\n    ) external virtual authorised(node) {\n        versionable_interfaces[recordVersions[node]][node][\n            interfaceID\n        ] = implementer;\n        emit InterfaceChanged(node, interfaceID, implementer);\n    }\n\n    /**\n     * Returns the address of a contract that implements the specified interface for this name.\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\n     * will be returned.\n     * @param node The ENS node to query.\n     * @param interfaceID The EIP 165 interface ID to check for.\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\n     */\n    function interfaceImplementer(\n        bytes32 node,\n        bytes4 interfaceID\n    ) external view virtual override returns (address) {\n        address implementer = versionable_interfaces[recordVersions[node]][\n            node\n        ][interfaceID];\n        if (implementer != address(0)) {\n            return implementer;\n        }\n\n        address a = addr(node);\n        if (a == address(0)) {\n            return address(0);\n        }\n\n        (bool success, bytes memory returnData) = a.staticcall(\n            abi.encodeWithSignature(\n                \"supportsInterface(bytes4)\",\n                type(IERC165).interfaceId\n            )\n        );\n        if (!success || returnData.length < 32 || returnData[31] == 0) {\n            // EIP 165 not supported by target\n            return address(0);\n        }\n\n        (success, returnData) = a.staticcall(\n            abi.encodeWithSignature(\"supportsInterface(bytes4)\", interfaceID)\n        );\n        if (!success || returnData.length < 32 || returnData[31] == 0) {\n            // Specified interface not supported by target\n            return address(0);\n        }\n\n        return a;\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view virtual override returns (bool) {\n        return\n            interfaceID == type(IInterfaceResolver).interfaceId ||\n            super.supportsInterface(interfaceID);\n    }\n}\n"},"contracts/resolvers/profiles/IPubkeyResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IPubkeyResolver {\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n\n    /**\n     * Returns the SECP256k1 public key associated with an ENS node.\n     * Defined in EIP 619.\n     * @param node The ENS node to query\n     * @return x The X coordinate of the curve point for the public key.\n     * @return y The Y coordinate of the curve point for the public key.\n     */\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\n}\n"},"contracts/resolvers/profiles/ITextResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ITextResolver {\n    event TextChanged(\n        bytes32 indexed node,\n        string indexed indexedKey,\n        string key,\n        string value\n    );\n\n    /**\n     * Returns the text data associated with an ENS node and key.\n     * @param node The ENS node to query.\n     * @param key The text data key to query.\n     * @return The associated text data.\n     */\n    function text(\n        bytes32 node,\n        string calldata key\n    ) external view returns (string memory);\n}\n"},"contracts/resolvers/profiles/IVersionableResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IVersionableResolver {\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\n\n    function recordVersions(bytes32 node) external view returns (uint64);\n}\n"},"contracts/resolvers/profiles/NameResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"../ResolverBase.sol\";\nimport \"./INameResolver.sol\";\n\nabstract contract NameResolver is INameResolver, ResolverBase {\n    mapping(uint64 => mapping(bytes32 => string)) versionable_names;\n\n    /**\n     * Sets the name associated with an ENS node, for reverse records.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     */\n    function setName(\n        bytes32 node,\n        string calldata newName\n    ) external virtual authorised(node) {\n        versionable_names[recordVersions[node]][node] = newName;\n        emit NameChanged(node, newName);\n    }\n\n    /**\n     * Returns the name associated with an ENS node, for reverse records.\n     * Defined in EIP181.\n     * @param node The ENS node to query.\n     * @return The associated name.\n     */\n    function name(\n        bytes32 node\n    ) external view virtual override returns (string memory) {\n        return versionable_names[recordVersions[node]][node];\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view virtual override returns (bool) {\n        return\n            interfaceID == type(INameResolver).interfaceId ||\n            super.supportsInterface(interfaceID);\n    }\n}\n"},"contracts/resolvers/profiles/PubkeyResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"../ResolverBase.sol\";\nimport \"./IPubkeyResolver.sol\";\n\nabstract contract PubkeyResolver is IPubkeyResolver, ResolverBase {\n    struct PublicKey {\n        bytes32 x;\n        bytes32 y;\n    }\n\n    mapping(uint64 => mapping(bytes32 => PublicKey)) versionable_pubkeys;\n\n    /**\n     * Sets the SECP256k1 public key associated with an ENS node.\n     * @param node The ENS node to query\n     * @param x the X coordinate of the curve point for the public key.\n     * @param y the Y coordinate of the curve point for the public key.\n     */\n    function setPubkey(\n        bytes32 node,\n        bytes32 x,\n        bytes32 y\n    ) external virtual authorised(node) {\n        versionable_pubkeys[recordVersions[node]][node] = PublicKey(x, y);\n        emit PubkeyChanged(node, x, y);\n    }\n\n    /**\n     * Returns the SECP256k1 public key associated with an ENS node.\n     * Defined in EIP 619.\n     * @param node The ENS node to query\n     * @return x The X coordinate of the curve point for the public key.\n     * @return y The Y coordinate of the curve point for the public key.\n     */\n    function pubkey(\n        bytes32 node\n    ) external view virtual override returns (bytes32 x, bytes32 y) {\n        uint64 currentRecordVersion = recordVersions[node];\n        return (\n            versionable_pubkeys[currentRecordVersion][node].x,\n            versionable_pubkeys[currentRecordVersion][node].y\n        );\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view virtual override returns (bool) {\n        return\n            interfaceID == type(IPubkeyResolver).interfaceId ||\n            super.supportsInterface(interfaceID);\n    }\n}\n"},"contracts/resolvers/profiles/TextResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"../ResolverBase.sol\";\nimport \"./ITextResolver.sol\";\n\nabstract contract TextResolver is ITextResolver, ResolverBase {\n    mapping(uint64 => mapping(bytes32 => mapping(string => string))) versionable_texts;\n\n    /**\n     * Sets the text data associated with an ENS node and key.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param key The key to set.\n     * @param value The text data value to set.\n     */\n    function setText(\n        bytes32 node,\n        string calldata key,\n        string calldata value\n    ) external virtual authorised(node) {\n        versionable_texts[recordVersions[node]][node][key] = value;\n        emit TextChanged(node, key, key, value);\n    }\n\n    /**\n     * Returns the text data associated with an ENS node and key.\n     * @param node The ENS node to query.\n     * @param key The text data key to query.\n     * @return The associated text data.\n     */\n    function text(\n        bytes32 node,\n        string calldata key\n    ) external view virtual override returns (string memory) {\n        return versionable_texts[recordVersions[node]][node][key];\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view virtual override returns (bool) {\n        return\n            interfaceID == type(ITextResolver).interfaceId ||\n            super.supportsInterface(interfaceID);\n    }\n}\n"},"contracts/resolvers/PublicResolver.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 <0.9.0;\n\nimport \"../registry/ENS.sol\";\nimport \"./profiles/ABIResolver.sol\";\nimport \"./profiles/AddrResolver.sol\";\nimport \"./profiles/ContentHashResolver.sol\";\nimport \"./profiles/DNSResolver.sol\";\nimport \"./profiles/InterfaceResolver.sol\";\nimport \"./profiles/NameResolver.sol\";\nimport \"./profiles/PubkeyResolver.sol\";\nimport \"./profiles/TextResolver.sol\";\nimport \"./Multicallable.sol\";\nimport {INameWrapper} from \"../wrapper/INameWrapper.sol\";\nimport {IReverseRegistrar} from \"../reverseRegistrar/IReverseRegistrar.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\n/**\n * A simple resolver anyone can use; only allows the owner of a node to set its\n * address.\n */\ncontract PublicResolver is\n    UUPSUpgradeable,\n    OwnableUpgradeable,\n    Multicallable,\n    ABIResolver,\n    AddrResolver,\n    ContentHashResolver,\n    DNSResolver,\n    InterfaceResolver,\n    NameResolver,\n    PubkeyResolver,\n    TextResolver\n{\n    bytes32 constant ADDR_REVERSE_NODE =\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n\n    ENS public ens;\n    INameWrapper public nameWrapper;\n    address public trustedETHController;\n    address public trustedReverseRegistrar;\n\n    /**\n     * A mapping of operators. An address that is authorised for an address\n     * may make any changes to the name that the owner could, but may not update\n     * the set of authorisations.\n     * (owner, operator) => approved\n     */\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * A mapping of delegates. A delegate that is authorised by an owner\n     * for a name may make changes to the name's resolver, but may not update\n     * the set of token approvals.\n     * (owner, name, delegate) => approved\n     */\n    mapping(address => mapping(bytes32 => mapping(address => bool)))\n        private _tokenApprovals;\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    // Logged when a delegate is approved or  an approval is revoked.\n    event Approved(\n        address owner,\n        bytes32 indexed node,\n        address indexed delegate,\n        bool indexed approved\n    );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        ENS _ens,\n        INameWrapper wrapperAddress,\n        address _trustedETHController,\n        address _trustedReverseRegistrar\n    ) public initializer {\n        __Ownable_init();\n        ens = _ens;\n        nameWrapper = wrapperAddress;\n        trustedETHController = _trustedETHController;\n        trustedReverseRegistrar = _trustedReverseRegistrar;\n\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\n            ens.owner(ADDR_REVERSE_NODE)\n        );\n        reverseRegistrar.claim(msg.sender);\n    }\n\n    ///@dev required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) external {\n        require(\n            msg.sender != operator,\n            \"ERC1155: setting approval status for self\"\n        );\n\n        _operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(\n        address account,\n        address operator\n    ) public view returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev Approve a delegate to be able to updated records on a node.\n     */\n    function approve(bytes32 node, address delegate, bool approved) external {\n        require(msg.sender != delegate, \"Setting delegate status for self\");\n\n        _tokenApprovals[msg.sender][node][delegate] = approved;\n        emit Approved(msg.sender, node, delegate, approved);\n    }\n\n    /**\n     * @dev Check to see if the delegate has been approved by the owner for the node.\n     */\n    function isApprovedFor(\n        address owner,\n        bytes32 node,\n        address delegate\n    ) public view returns (bool) {\n        return _tokenApprovals[owner][node][delegate];\n    }\n\n    function isAuthorised(bytes32 node) internal view override returns (bool) {\n        if (\n            msg.sender == trustedETHController ||\n            msg.sender == trustedReverseRegistrar\n        ) {\n            return true;\n        }\n        address owner = ens.owner(node);\n        if (owner == address(nameWrapper)) {\n            owner = nameWrapper.ownerOf(uint256(node));\n        }\n        return\n            owner == msg.sender ||\n            isApprovedForAll(owner, msg.sender) ||\n            isApprovedFor(owner, node, msg.sender);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    )\n        public\n        view\n        override(\n            Multicallable,\n            ABIResolver,\n            AddrResolver,\n            ContentHashResolver,\n            DNSResolver,\n            InterfaceResolver,\n            NameResolver,\n            PubkeyResolver,\n            TextResolver\n        )\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceID);\n    }\n}\n"},"contracts/resolvers/ResolverBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./profiles/IVersionableResolver.sol\";\n\nabstract contract ResolverBase is ERC165, IVersionableResolver {\n    mapping(bytes32 => uint64) public recordVersions;\n\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\n\n    modifier authorised(bytes32 node) {\n        require(isAuthorised(node));\n        _;\n    }\n\n    /**\n     * Increments the record version associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     */\n    function clearRecords(bytes32 node) public virtual authorised(node) {\n        recordVersions[node]++;\n        emit VersionChanged(node, recordVersions[node]);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public view virtual override returns (bool) {\n        return\n            interfaceID == type(IVersionableResolver).interfaceId ||\n            super.supportsInterface(interfaceID);\n    }\n}\n"},"contracts/reverseRegistrar/IReverseRegistrar.sol":{"content":"pragma solidity >=0.8.4;\n\ninterface IReverseRegistrar {\n    function setDefaultResolver(address resolver) external;\n\n    function claim(address owner) external returns (bytes32);\n\n    function claimForAddr(\n        address addr,\n        address owner,\n        address resolver\n    ) external returns (bytes32);\n\n    function claimWithResolver(\n        address owner,\n        address resolver\n    ) external returns (bytes32);\n\n    function setName(string memory name) external returns (bytes32);\n\n    function setNameForAddr(\n        address addr,\n        address owner,\n        address resolver,\n        string memory name\n    ) external returns (bytes32);\n\n    function node(address addr) external pure returns (bytes32);\n}\n"},"contracts/utils/BytesUtils.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary BytesUtils {\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\n\n    /*\n     * @dev Returns the keccak-256 hash of a byte range.\n     * @param self The byte string to hash.\n     * @param offset The position to start hashing at.\n     * @param len The number of bytes to hash.\n     * @return The hash of the byte range.\n     */\n    function keccak(\n        bytes memory self,\n        uint256 offset,\n        uint256 len\n    ) internal pure returns (bytes32 ret) {\n        require(offset + len <= self.length);\n        assembly {\n            ret := keccak256(add(add(self, 32), offset), len)\n        }\n    }\n\n    /**\n     * @dev Returns the ENS namehash of a DNS-encoded name.\n     * @param self The DNS-encoded name to hash.\n     * @param offset The offset at which to start hashing.\n     * @return The namehash of the name.\n     */\n    function namehash(\n        bytes memory self,\n        uint256 offset\n    ) internal pure returns (bytes32) {\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\n        if (labelhash == bytes32(0)) {\n            require(offset == self.length - 1, \"namehash: Junk at end of name\");\n            return bytes32(0);\n        }\n        return\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\n    }\n\n    /**\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\n     * @param self The byte string to read a label from.\n     * @param idx The index to read a label at.\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\n     * @return newIdx The index of the start of the next label.\n     */\n    function readLabel(\n        bytes memory self,\n        uint256 idx\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\n        require(idx < self.length, \"readLabel: Index out of bounds\");\n        uint256 len = uint256(uint8(self[idx]));\n        if (len > 0) {\n            labelhash = keccak(self, idx + 1, len);\n        } else {\n            labelhash = bytes32(0);\n        }\n        newIdx = idx + len + 1;\n    }\n\n    /*\n     * @dev Returns a positive number if `other` comes lexicographically after\n     *      `self`, a negative number if it comes before, or zero if the\n     *      contents of the two bytes are equal.\n     * @param self The first bytes to compare.\n     * @param other The second bytes to compare.\n     * @return The result of the comparison.\n     */\n    function compare(\n        bytes memory self,\n        bytes memory other\n    ) internal pure returns (int256) {\n        return compare(self, 0, self.length, other, 0, other.length);\n    }\n\n    /*\n     * @dev Returns a positive number if `other` comes lexicographically after\n     *      `self`, a negative number if it comes before, or zero if the\n     *      contents of the two bytes are equal. Comparison is done per-rune,\n     *      on unicode codepoints.\n     * @param self The first bytes to compare.\n     * @param offset The offset of self.\n     * @param len    The length of self.\n     * @param other The second bytes to compare.\n     * @param otheroffset The offset of the other string.\n     * @param otherlen    The length of the other string.\n     * @return The result of the comparison.\n     */\n    function compare(\n        bytes memory self,\n        uint256 offset,\n        uint256 len,\n        bytes memory other,\n        uint256 otheroffset,\n        uint256 otherlen\n    ) internal pure returns (int256) {\n        if (offset + len > self.length) {\n            revert OffsetOutOfBoundsError(offset + len, self.length);\n        }\n        if (otheroffset + otherlen > other.length) {\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\n        }\n\n        uint256 shortest = len;\n        if (otherlen < len) shortest = otherlen;\n\n        uint256 selfptr;\n        uint256 otherptr;\n\n        assembly {\n            selfptr := add(self, add(offset, 32))\n            otherptr := add(other, add(otheroffset, 32))\n        }\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\n            uint256 a;\n            uint256 b;\n            assembly {\n                a := mload(selfptr)\n                b := mload(otherptr)\n            }\n            if (a != b) {\n                // Mask out irrelevant bytes and check again\n                uint256 mask;\n                if (shortest - idx >= 32) {\n                    mask = type(uint256).max;\n                } else {\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\n                }\n                int256 diff = int256(a & mask) - int256(b & mask);\n                if (diff != 0) return diff;\n            }\n            selfptr += 32;\n            otherptr += 32;\n        }\n\n        return int256(len) - int256(otherlen);\n    }\n\n    /*\n     * @dev Returns true if the two byte ranges are equal.\n     * @param self The first byte range to compare.\n     * @param offset The offset into the first byte range.\n     * @param other The second byte range to compare.\n     * @param otherOffset The offset into the second byte range.\n     * @param len The number of bytes to compare\n     * @return True if the byte ranges are equal, false otherwise.\n     */\n    function equals(\n        bytes memory self,\n        uint256 offset,\n        bytes memory other,\n        uint256 otherOffset,\n        uint256 len\n    ) internal pure returns (bool) {\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\n    }\n\n    /*\n     * @dev Returns true if the two byte ranges are equal with offsets.\n     * @param self The first byte range to compare.\n     * @param offset The offset into the first byte range.\n     * @param other The second byte range to compare.\n     * @param otherOffset The offset into the second byte range.\n     * @return True if the byte ranges are equal, false otherwise.\n     */\n    function equals(\n        bytes memory self,\n        uint256 offset,\n        bytes memory other,\n        uint256 otherOffset\n    ) internal pure returns (bool) {\n        return\n            keccak(self, offset, self.length - offset) ==\n            keccak(other, otherOffset, other.length - otherOffset);\n    }\n\n    /*\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\n     *      they are equal.\n     * @param self The first byte range to compare.\n     * @param offset The offset into the first byte range.\n     * @param other The second byte range to compare.\n     * @return True if the byte ranges are equal, false otherwise.\n     */\n    function equals(\n        bytes memory self,\n        uint256 offset,\n        bytes memory other\n    ) internal pure returns (bool) {\n        return\n            self.length == offset + other.length &&\n            equals(self, offset, other, 0, other.length);\n    }\n\n    /*\n     * @dev Returns true if the two byte ranges are equal.\n     * @param self The first byte range to compare.\n     * @param other The second byte range to compare.\n     * @return True if the byte ranges are equal, false otherwise.\n     */\n    function equals(\n        bytes memory self,\n        bytes memory other\n    ) internal pure returns (bool) {\n        return\n            self.length == other.length &&\n            equals(self, 0, other, 0, self.length);\n    }\n\n    /*\n     * @dev Returns the 8-bit number at the specified index of self.\n     * @param self The byte string.\n     * @param idx The index into the bytes\n     * @return The specified 8 bits of the string, interpreted as an integer.\n     */\n    function readUint8(\n        bytes memory self,\n        uint256 idx\n    ) internal pure returns (uint8 ret) {\n        return uint8(self[idx]);\n    }\n\n    /*\n     * @dev Returns the 16-bit number at the specified index of self.\n     * @param self The byte string.\n     * @param idx The index into the bytes\n     * @return The specified 16 bits of the string, interpreted as an integer.\n     */\n    function readUint16(\n        bytes memory self,\n        uint256 idx\n    ) internal pure returns (uint16 ret) {\n        require(idx + 2 <= self.length);\n        assembly {\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\n        }\n    }\n\n    /*\n     * @dev Returns the 32-bit number at the specified index of self.\n     * @param self The byte string.\n     * @param idx The index into the bytes\n     * @return The specified 32 bits of the string, interpreted as an integer.\n     */\n    function readUint32(\n        bytes memory self,\n        uint256 idx\n    ) internal pure returns (uint32 ret) {\n        require(idx + 4 <= self.length);\n        assembly {\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\n        }\n    }\n\n    /*\n     * @dev Returns the 32 byte value at the specified index of self.\n     * @param self The byte string.\n     * @param idx The index into the bytes\n     * @return The specified 32 bytes of the string.\n     */\n    function readBytes32(\n        bytes memory self,\n        uint256 idx\n    ) internal pure returns (bytes32 ret) {\n        require(idx + 32 <= self.length);\n        assembly {\n            ret := mload(add(add(self, 32), idx))\n        }\n    }\n\n    /*\n     * @dev Returns the 32 byte value at the specified index of self.\n     * @param self The byte string.\n     * @param idx The index into the bytes\n     * @return The specified 32 bytes of the string.\n     */\n    function readBytes20(\n        bytes memory self,\n        uint256 idx\n    ) internal pure returns (bytes20 ret) {\n        require(idx + 20 <= self.length);\n        assembly {\n            ret := and(\n                mload(add(add(self, 32), idx)),\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\n            )\n        }\n    }\n\n    /*\n     * @dev Returns the n byte value at the specified index of self.\n     * @param self The byte string.\n     * @param idx The index into the bytes.\n     * @param len The number of bytes.\n     * @return The specified 32 bytes of the string.\n     */\n    function readBytesN(\n        bytes memory self,\n        uint256 idx,\n        uint256 len\n    ) internal pure returns (bytes32 ret) {\n        require(len <= 32);\n        require(idx + len <= self.length);\n        assembly {\n            let mask := not(sub(exp(256, sub(32, len)), 1))\n            ret := and(mload(add(add(self, 32), idx)), mask)\n        }\n    }\n\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        unchecked {\n            uint256 mask = (256 ** (32 - len)) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask))\n                let destpart := and(mload(dest), mask)\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n\n    /*\n     * @dev Copies a substring into a new byte string.\n     * @param self The byte string to copy from.\n     * @param offset The offset to start copying at.\n     * @param len The number of bytes to copy.\n     */\n    function substring(\n        bytes memory self,\n        uint256 offset,\n        uint256 len\n    ) internal pure returns (bytes memory) {\n        require(offset + len <= self.length);\n\n        bytes memory ret = new bytes(len);\n        uint256 dest;\n        uint256 src;\n\n        assembly {\n            dest := add(ret, 32)\n            src := add(add(self, 32), offset)\n        }\n        memcpy(dest, src, len);\n\n        return ret;\n    }\n\n    // Maps characters from 0x30 to 0x7A to their base32 values.\n    // 0xFF represents invalid characters in that range.\n    bytes constant base32HexTable =\n        hex\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\";\n\n    /**\n     * @dev Decodes unpadded base32 data of up to one word in length.\n     * @param self The data to decode.\n     * @param off Offset into the string to start at.\n     * @param len Number of characters to decode.\n     * @return The decoded data, left aligned.\n     */\n    function base32HexDecodeWord(\n        bytes memory self,\n        uint256 off,\n        uint256 len\n    ) internal pure returns (bytes32) {\n        require(len <= 52);\n\n        uint256 ret = 0;\n        uint8 decoded;\n        for (uint256 i = 0; i < len; i++) {\n            bytes1 char = self[off + i];\n            require(char >= 0x30 && char <= 0x7A);\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\n            require(decoded <= 0x20);\n            if (i == len - 1) {\n                break;\n            }\n            ret = (ret << 5) | decoded;\n        }\n\n        uint256 bitlen = len * 5;\n        if (len % 8 == 0) {\n            // Multiple of 8 characters, no padding\n            ret = (ret << 5) | decoded;\n        } else if (len % 8 == 2) {\n            // Two extra characters - 1 byte\n            ret = (ret << 3) | (decoded >> 2);\n            bitlen -= 2;\n        } else if (len % 8 == 4) {\n            // Four extra characters - 2 bytes\n            ret = (ret << 1) | (decoded >> 4);\n            bitlen -= 4;\n        } else if (len % 8 == 5) {\n            // Five extra characters - 3 bytes\n            ret = (ret << 4) | (decoded >> 1);\n            bitlen -= 1;\n        } else if (len % 8 == 7) {\n            // Seven extra characters - 4 bytes\n            ret = (ret << 2) | (decoded >> 3);\n            bitlen -= 3;\n        } else {\n            revert();\n        }\n\n        return bytes32(ret << (256 - bitlen));\n    }\n\n    /**\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\n     * @param self The string to search\n     * @param off The offset to start searching at\n     * @param len The number of bytes to search\n     * @param needle The byte to search for\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\n     */\n    function find(\n        bytes memory self,\n        uint256 off,\n        uint256 len,\n        bytes1 needle\n    ) internal pure returns (uint256) {\n        for (uint256 idx = off; idx < off + len; idx++) {\n            if (self[idx] == needle) {\n                return idx;\n            }\n        }\n        return type(uint256).max;\n    }\n}\n"},"contracts/wrapper/IMetadataService.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ~0.8.17;\n\ninterface IMetadataService {\n    function uri(uint256) external view returns (string memory);\n}\n"},"contracts/wrapper/INameWrapper.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ~0.8.17;\n\nimport \"../registry/ENS.sol\";\nimport \"../ethregistrar/IBaseRegistrar.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"./IMetadataService.sol\";\nimport \"./INameWrapperUpgrade.sol\";\n\nuint32 constant CANNOT_UNWRAP = 1;\nuint32 constant CANNOT_BURN_FUSES = 2;\nuint32 constant CANNOT_TRANSFER = 4;\nuint32 constant CANNOT_SET_RESOLVER = 8;\nuint32 constant CANNOT_SET_TTL = 16;\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\nuint32 constant CANNOT_APPROVE = 64;\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\nuint32 constant IS_DOT_ETH = 1 << 17;\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\nuint32 constant CAN_DO_EVERYTHING = 0;\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\n// all fuses apart from IS_DOT_ETH\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\n\ninterface INameWrapper is IERC1155 {\n    event NameWrapped(\n        bytes32 indexed node,\n        bytes name,\n        address owner,\n        uint32 fuses,\n        uint64 expiry\n    );\n\n    event NameUnwrapped(bytes32 indexed node, address owner);\n\n    event FusesSet(bytes32 indexed node, uint32 fuses);\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\n\n    function ens() external view returns (ENS);\n\n    function registrar() external view returns (IBaseRegistrar);\n\n    function metadataService() external view returns (IMetadataService);\n\n    function names(bytes32) external view returns (bytes memory);\n\n    function name() external view returns (string memory);\n\n    function upgradeContract() external view returns (INameWrapperUpgrade);\n\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n\n    function wrap(\n        bytes calldata name,\n        address wrappedOwner,\n        address resolver\n    ) external;\n\n    function wrapETH2LD(\n        string calldata label,\n        address wrappedOwner,\n        uint16 ownerControlledFuses,\n        address resolver\n    ) external returns (uint64 expires);\n\n    function registerAndWrapETH2LD(\n        string calldata label,\n        address wrappedOwner,\n        uint256 duration,\n        address resolver,\n        uint16 ownerControlledFuses\n    ) external returns (uint256 registrarExpiry);\n\n    function renew(\n        uint256 labelHash,\n        uint256 duration\n    ) external returns (uint256 expires);\n\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\n\n    function unwrapETH2LD(\n        bytes32 label,\n        address newRegistrant,\n        address newController\n    ) external;\n\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\n\n    function setFuses(\n        bytes32 node,\n        uint16 ownerControlledFuses\n    ) external returns (uint32 newFuses);\n\n    function setChildFuses(\n        bytes32 parentNode,\n        bytes32 labelhash,\n        uint32 fuses,\n        uint64 expiry\n    ) external;\n\n    function setSubnodeRecord(\n        bytes32 node,\n        string calldata label,\n        address owner,\n        address resolver,\n        uint64 ttl,\n        uint32 fuses,\n        uint64 expiry\n    ) external returns (bytes32);\n\n    function setRecord(\n        bytes32 node,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeOwner(\n        bytes32 node,\n        string calldata label,\n        address newOwner,\n        uint32 fuses,\n        uint64 expiry\n    ) external returns (bytes32);\n\n    function extendExpiry(\n        bytes32 node,\n        bytes32 labelhash,\n        uint64 expiry\n    ) external returns (uint64);\n\n    function canModifyName(\n        bytes32 node,\n        address addr\n    ) external view returns (bool);\n\n    function setResolver(bytes32 node, address resolver) external;\n\n    function setTTL(bytes32 node, uint64 ttl) external;\n\n    function ownerOf(uint256 id) external view returns (address owner);\n\n    function approve(address to, uint256 tokenId) external;\n\n    function getApproved(uint256 tokenId) external view returns (address);\n\n    function getData(\n        uint256 id\n    ) external view returns (address, uint32, uint64);\n\n    function setMetadataService(IMetadataService _metadataService) external;\n\n    function uri(uint256 tokenId) external view returns (string memory);\n\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\n\n    function allFusesBurned(\n        bytes32 node,\n        uint32 fuseMask\n    ) external view returns (bool);\n\n    function isWrapped(bytes32) external view returns (bool);\n\n    function isWrapped(bytes32, bytes32) external view returns (bool);\n}\n"},"contracts/wrapper/INameWrapperUpgrade.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ~0.8.17;\n\ninterface INameWrapperUpgrade {\n    function wrapFromUpgrade(\n        bytes calldata name,\n        address wrappedOwner,\n        uint32 fuses,\n        uint64 expiry,\n        address approved,\n        bytes calldata extraData\n    ) external;\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/ethregistrar/IBaseRegistrar.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/ethregistrar/IBaseRegistrar.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/reverseRegistrar/IReverseRegistrar.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/reverseRegistrar/IReverseRegistrar.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.17;\"\n--> contracts/ethregistrar/IBaseRegistrar.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.17;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/ethregistrar/IBaseRegistrar.sol","start":-1},"type":"Warning"}],"sources":{"@ensdomains/buffer/contracts/Buffer.sol":{"ast":{"absolutePath":"@ensdomains/buffer/contracts/Buffer.sol","exportedSymbols":{"Buffer":[420]},"id":421,"license":"BSD-2-Clause","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"41:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Buffer","contractDependencies":[],"contractKind":"library","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"66:378:0","text":" @dev A library for working with mutable byte buffers in Solidity.\n Byte buffers are mutable and expandable, and provide a variety of primitives\n for appending to them. At any time you can fetch a bytes object containing the\n current contents of the buffer. The bytes object should not be stored between\n operations, as it may change due to resizing of the buffer."},"fullyImplemented":true,"id":420,"linearizedBaseContracts":[420],"name":"Buffer","nameLocation":"453:6:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Buffer.buffer","id":7,"members":[{"constant":false,"id":4,"mutability":"mutable","name":"buf","nameLocation":"750:3:0","nodeType":"VariableDeclaration","scope":7,"src":"744:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3,"name":"bytes","nodeType":"ElementaryTypeName","src":"744:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"capacity","nameLocation":"768:8:0","nodeType":"VariableDeclaration","scope":7,"src":"763:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5,"name":"uint","nodeType":"ElementaryTypeName","src":"763:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"buffer","nameLocation":"727:6:0","nodeType":"StructDefinition","scope":420,"src":"720:63:0","visibility":"public"},{"body":{"id":44,"nodeType":"Block","src":"1105:470:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":21,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":19,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1119:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":20,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1119:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":22,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1136:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1119:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":34,"nodeType":"IfStatement","src":"1115:81:0","trueBody":{"id":33,"nodeType":"Block","src":"1139:57:0","statements":[{"expression":{"id":31,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":24,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1153:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":25,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1165:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":26,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1171:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":27,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1171:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":29,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1170:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1165:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1153:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":32,"nodeType":"ExpressionStatement","src":"1153:32:0"}]}},{"expression":{"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":35,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1251:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":37,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1255:8:0","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":6,"src":"1251:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":38,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1266:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1251:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":40,"nodeType":"ExpressionStatement","src":"1251:23:0"},{"AST":{"nodeType":"YulBlock","src":"1293:256:0","statements":[{"nodeType":"YulVariableDeclaration","src":"1307:22:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1324:4:0","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1318:5:0"},"nodeType":"YulFunctionCall","src":"1318:11:0"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"1311:3:0","type":""}]},{"expression":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"1349:3:0"},{"name":"ptr","nodeType":"YulIdentifier","src":"1354:3:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1342:6:0"},"nodeType":"YulFunctionCall","src":"1342:16:0"},"nodeType":"YulExpressionStatement","src":"1342:16:0"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1378:3:0"},{"kind":"number","nodeType":"YulLiteral","src":"1383:1:0","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1371:6:0"},"nodeType":"YulFunctionCall","src":"1371:14:0"},"nodeType":"YulExpressionStatement","src":"1371:14:0"},{"nodeType":"YulVariableDeclaration","src":"1398:38:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1413:2:0","type":"","value":"32"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1421:3:0"},{"name":"capacity","nodeType":"YulIdentifier","src":"1426:8:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1417:3:0"},"nodeType":"YulFunctionCall","src":"1417:18:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1409:3:0"},"nodeType":"YulFunctionCall","src":"1409:27:0"},"variables":[{"name":"fpm","nodeType":"YulTypedName","src":"1402:3:0","type":""}]},{"body":{"nodeType":"YulBlock","src":"1465:44:0","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1490:1:0","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1493:1:0","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1483:6:0"},"nodeType":"YulFunctionCall","src":"1483:12:0"},"nodeType":"YulExpressionStatement","src":"1483:12:0"}]},"condition":{"arguments":[{"name":"fpm","nodeType":"YulIdentifier","src":"1455:3:0"},{"name":"ptr","nodeType":"YulIdentifier","src":"1460:3:0"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1452:2:0"},"nodeType":"YulFunctionCall","src":"1452:12:0"},"nodeType":"YulIf","src":"1449:60:0"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1529:4:0","type":"","value":"0x40"},{"name":"fpm","nodeType":"YulIdentifier","src":"1535:3:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1522:6:0"},"nodeType":"YulFunctionCall","src":"1522:17:0"},"nodeType":"YulExpressionStatement","src":"1522:17:0"}]},"evmVersion":"london","externalReferences":[{"declaration":11,"isOffset":false,"isSlot":false,"src":"1349:3:0","valueSize":1},{"declaration":13,"isOffset":false,"isSlot":false,"src":"1426:8:0","valueSize":1}],"id":41,"nodeType":"InlineAssembly","src":"1284:265:0"},{"expression":{"id":42,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1565:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":18,"id":43,"nodeType":"Return","src":"1558:10:0"}]},"documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"789:226:0","text":" @dev Initializes a buffer with an initial capacity.\n @param buf The buffer to initialize.\n @param capacity The number of bytes of space to allocate the buffer.\n @return The buffer, for chaining."},"id":45,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"1029:4:0","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"buf","nameLocation":"1048:3:0","nodeType":"VariableDeclaration","scope":45,"src":"1034:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":10,"nodeType":"UserDefinedTypeName","pathNode":{"id":9,"name":"buffer","nameLocations":["1034:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"1034:6:0"},"referencedDeclaration":7,"src":"1034:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":13,"mutability":"mutable","name":"capacity","nameLocation":"1058:8:0","nodeType":"VariableDeclaration","scope":45,"src":"1053:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12,"name":"uint","nodeType":"ElementaryTypeName","src":"1053:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1033:34:0"},"returnParameters":{"id":18,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":45,"src":"1090:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":16,"nodeType":"UserDefinedTypeName","pathNode":{"id":15,"name":"buffer","nameLocations":["1090:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"1090:6:0"},"referencedDeclaration":7,"src":"1090:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"1089:15:0"},"scope":420,"src":"1020:555:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":73,"nodeType":"Block","src":"1890:108:0","statements":[{"assignments":[56],"declarations":[{"constant":false,"id":56,"mutability":"mutable","name":"buf","nameLocation":"1914:3:0","nodeType":"VariableDeclaration","scope":73,"src":"1900:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":55,"nodeType":"UserDefinedTypeName","pathNode":{"id":54,"name":"buffer","nameLocations":["1900:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"1900:6:0"},"referencedDeclaration":7,"src":"1900:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"id":57,"nodeType":"VariableDeclarationStatement","src":"1900:17:0"},{"expression":{"id":62,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":58,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"1927:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":60,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1931:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":4,"src":"1927:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":61,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"1937:1:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1927:11:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":63,"nodeType":"ExpressionStatement","src":"1927:11:0"},{"expression":{"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":64,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"1948:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":66,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1952:8:0","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":6,"src":"1948:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":67,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"1963:1:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":68,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1965:6:0","memberName":"length","nodeType":"MemberAccess","src":"1963:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1948:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":70,"nodeType":"ExpressionStatement","src":"1948:23:0"},{"expression":{"id":71,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"1988:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":53,"id":72,"nodeType":"Return","src":"1981:10:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1581:232:0","text":" @dev Initializes a new buffer from an existing bytes object.\n      Changes to the buffer may mutate the original value.\n @param b The bytes object to initialize the buffer with.\n @return A new buffer."},"id":74,"implemented":true,"kind":"function","modifiers":[],"name":"fromBytes","nameLocation":"1827:9:0","nodeType":"FunctionDefinition","parameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48,"mutability":"mutable","name":"b","nameLocation":"1850:1:0","nodeType":"VariableDeclaration","scope":74,"src":"1837:14:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":47,"name":"bytes","nodeType":"ElementaryTypeName","src":"1837:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1836:16:0"},"returnParameters":{"id":53,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":74,"src":"1875:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":51,"nodeType":"UserDefinedTypeName","pathNode":{"id":50,"name":"buffer","nameLocations":["1875:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"1875:6:0"},"referencedDeclaration":7,"src":"1875:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"1874:15:0"},"scope":420,"src":"1818:180:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2067:104:0","statements":[{"assignments":[83],"declarations":[{"constant":false,"id":83,"mutability":"mutable","name":"oldbuf","nameLocation":"2090:6:0","nodeType":"VariableDeclaration","scope":97,"src":"2077:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":82,"name":"bytes","nodeType":"ElementaryTypeName","src":"2077:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":86,"initialValue":{"expression":{"id":84,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2099:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":85,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2103:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":4,"src":"2099:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2077:29:0"},{"expression":{"arguments":[{"id":88,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2121:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":89,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"2126:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":87,"name":"init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"2116:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$7_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$7_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256) pure returns (struct Buffer.buffer memory)"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2116:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":91,"nodeType":"ExpressionStatement","src":"2116:19:0"},{"expression":{"arguments":[{"id":93,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2152:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":94,"name":"oldbuf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"2157:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":92,"name":"append","nodeType":"Identifier","overloadedDeclarations":[200,220,326],"referencedDeclaration":220,"src":"2145:6:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$7_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$7_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes memory) pure returns (struct Buffer.buffer memory)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2145:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":96,"nodeType":"ExpressionStatement","src":"2145:19:0"}]},"id":98,"implemented":true,"kind":"function","modifiers":[],"name":"resize","nameLocation":"2013:6:0","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"buf","nameLocation":"2034:3:0","nodeType":"VariableDeclaration","scope":98,"src":"2020:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":76,"nodeType":"UserDefinedTypeName","pathNode":{"id":75,"name":"buffer","nameLocations":["2020:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"2020:6:0"},"referencedDeclaration":7,"src":"2020:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"capacity","nameLocation":"2044:8:0","nodeType":"VariableDeclaration","scope":98,"src":"2039:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":78,"name":"uint","nodeType":"ElementaryTypeName","src":"2039:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2019:34:0"},"returnParameters":{"id":81,"nodeType":"ParameterList","parameters":[],"src":"2067:0:0"},"scope":420,"src":"2004:167:0","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":111,"nodeType":"Block","src":"2394:123:0","statements":[{"AST":{"nodeType":"YulBlock","src":"2413:78:0","statements":[{"nodeType":"YulVariableDeclaration","src":"2427:24:0","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"2447:3:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2441:5:0"},"nodeType":"YulFunctionCall","src":"2441:10:0"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"2431:6:0","type":""}]},{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"2471:6:0"},{"kind":"number","nodeType":"YulLiteral","src":"2479:1:0","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2464:6:0"},"nodeType":"YulFunctionCall","src":"2464:17:0"},"nodeType":"YulExpressionStatement","src":"2464:17:0"}]},"evmVersion":"london","externalReferences":[{"declaration":102,"isOffset":false,"isSlot":false,"src":"2447:3:0","valueSize":1}],"id":108,"nodeType":"InlineAssembly","src":"2404:87:0"},{"expression":{"id":109,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"2507:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":107,"id":110,"nodeType":"Return","src":"2500:10:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2177:137:0","text":" @dev Sets buffer length to 0.\n @param buf The buffer to truncate.\n @return The original buffer, for chaining.."},"id":112,"implemented":true,"kind":"function","modifiers":[],"name":"truncate","nameLocation":"2328:8:0","nodeType":"FunctionDefinition","parameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"buf","nameLocation":"2351:3:0","nodeType":"VariableDeclaration","scope":112,"src":"2337:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":101,"nodeType":"UserDefinedTypeName","pathNode":{"id":100,"name":"buffer","nameLocations":["2337:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"2337:6:0"},"referencedDeclaration":7,"src":"2337:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"2336:19:0"},"returnParameters":{"id":107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":112,"src":"2379:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":105,"nodeType":"UserDefinedTypeName","pathNode":{"id":104,"name":"buffer","nameLocations":["2379:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"2379:6:0"},"referencedDeclaration":7,"src":"2379:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"2378:15:0"},"scope":420,"src":"2319:198:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":199,"nodeType":"Block","src":"2945:1326:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":127,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"2963:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":128,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"2970:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2975:6:0","memberName":"length","nodeType":"MemberAccess","src":"2970:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2963:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":126,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2955:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2955:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":132,"nodeType":"ExpressionStatement","src":"2955:27:0"},{"assignments":[134],"declarations":[{"constant":false,"id":134,"mutability":"mutable","name":"off","nameLocation":"2998:3:0","nodeType":"VariableDeclaration","scope":199,"src":"2993:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":133,"name":"uint","nodeType":"ElementaryTypeName","src":"2993:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":138,"initialValue":{"expression":{"expression":{"id":135,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"3004:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":136,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3008:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":4,"src":"3004:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3012:6:0","memberName":"length","nodeType":"MemberAccess","src":"3004:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2993:25:0"},{"assignments":[140],"declarations":[{"constant":false,"id":140,"mutability":"mutable","name":"newCapacity","nameLocation":"3033:11:0","nodeType":"VariableDeclaration","scope":199,"src":"3028:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":139,"name":"uint","nodeType":"ElementaryTypeName","src":"3028:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":144,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":141,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"3047:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":142,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"3053:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3047:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3028:28:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":145,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"3070:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":146,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"3084:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3088:8:0","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":6,"src":"3084:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3070:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":157,"nodeType":"IfStatement","src":"3066:85:0","trueBody":{"id":156,"nodeType":"Block","src":"3098:53:0","statements":[{"expression":{"arguments":[{"id":150,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"3119:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":151,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"3124:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3138:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3124:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":149,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"3112:6:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$7_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3112:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":155,"nodeType":"ExpressionStatement","src":"3112:28:0"}]}},{"assignments":[159],"declarations":[{"constant":false,"id":159,"mutability":"mutable","name":"dest","nameLocation":"3166:4:0","nodeType":"VariableDeclaration","scope":199,"src":"3161:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":158,"name":"uint","nodeType":"ElementaryTypeName","src":"3161:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":160,"nodeType":"VariableDeclarationStatement","src":"3161:9:0"},{"assignments":[162],"declarations":[{"constant":false,"id":162,"mutability":"mutable","name":"src","nameLocation":"3185:3:0","nodeType":"VariableDeclaration","scope":199,"src":"3180:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":161,"name":"uint","nodeType":"ElementaryTypeName","src":"3180:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":163,"nodeType":"VariableDeclarationStatement","src":"3180:8:0"},{"AST":{"nodeType":"YulBlock","src":"3207:498:0","statements":[{"nodeType":"YulVariableDeclaration","src":"3270:24:0","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"3290:3:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3284:5:0"},"nodeType":"YulFunctionCall","src":"3284:10:0"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"3274:6:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:27:0","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3373:6:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3367:5:0"},"nodeType":"YulFunctionCall","src":"3367:13:0"},"variables":[{"name":"buflen","nodeType":"YulTypedName","src":"3357:6:0","type":""}]},{"nodeType":"YulAssignment","src":"3472:33:0","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3488:6:0"},{"kind":"number","nodeType":"YulLiteral","src":"3496:2:0","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3484:3:0"},"nodeType":"YulFunctionCall","src":"3484:15:0"},{"name":"off","nodeType":"YulIdentifier","src":"3501:3:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3480:3:0"},"nodeType":"YulFunctionCall","src":"3480:25:0"},"variableNames":[{"name":"dest","nodeType":"YulIdentifier","src":"3472:4:0"}]},{"body":{"nodeType":"YulBlock","src":"3603:59:0","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3628:6:0"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"3636:11:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3621:6:0"},"nodeType":"YulFunctionCall","src":"3621:27:0"},"nodeType":"YulExpressionStatement","src":"3621:27:0"}]},"condition":{"arguments":[{"name":"newCapacity","nodeType":"YulIdentifier","src":"3582:11:0"},{"name":"buflen","nodeType":"YulIdentifier","src":"3595:6:0"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3579:2:0"},"nodeType":"YulFunctionCall","src":"3579:23:0"},"nodeType":"YulIf","src":"3576:86:0"},{"nodeType":"YulAssignment","src":"3675:20:0","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3686:4:0"},{"kind":"number","nodeType":"YulLiteral","src":"3692:2:0","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3682:3:0"},"nodeType":"YulFunctionCall","src":"3682:13:0"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3675:3:0"}]}]},"evmVersion":"london","externalReferences":[{"declaration":116,"isOffset":false,"isSlot":false,"src":"3290:3:0","valueSize":1},{"declaration":118,"isOffset":false,"isSlot":false,"src":"3686:4:0","valueSize":1},{"declaration":159,"isOffset":false,"isSlot":false,"src":"3472:4:0","valueSize":1},{"declaration":140,"isOffset":false,"isSlot":false,"src":"3582:11:0","valueSize":1},{"declaration":140,"isOffset":false,"isSlot":false,"src":"3636:11:0","valueSize":1},{"declaration":134,"isOffset":false,"isSlot":false,"src":"3501:3:0","valueSize":1},{"declaration":162,"isOffset":false,"isSlot":false,"src":"3675:3:0","valueSize":1}],"id":164,"nodeType":"InlineAssembly","src":"3198:507:0"},{"body":{"id":181,"nodeType":"Block","src":"3794:136:0","statements":[{"AST":{"nodeType":"YulBlock","src":"3817:56:0","statements":[{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"3842:4:0"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3854:3:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3848:5:0"},"nodeType":"YulFunctionCall","src":"3848:10:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3835:6:0"},"nodeType":"YulFunctionCall","src":"3835:24:0"},"nodeType":"YulExpressionStatement","src":"3835:24:0"}]},"evmVersion":"london","externalReferences":[{"declaration":159,"isOffset":false,"isSlot":false,"src":"3842:4:0","valueSize":1},{"declaration":162,"isOffset":false,"isSlot":false,"src":"3854:3:0","valueSize":1}],"id":172,"nodeType":"InlineAssembly","src":"3808:65:0"},{"expression":{"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":173,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"3886:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3894:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3886:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":176,"nodeType":"ExpressionStatement","src":"3886:10:0"},{"expression":{"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":177,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"3910:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3917:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3910:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":180,"nodeType":"ExpressionStatement","src":"3910:9:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":165,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"3772:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3332","id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3779:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3772:9:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":182,"loopExpression":{"expression":{"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":168,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"3783:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3332","id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3790:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3783:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":171,"nodeType":"ExpressionStatement","src":"3783:9:0"},"nodeType":"ForStatement","src":"3765:165:0"},{"id":196,"nodeType":"UncheckedBlock","src":"3972:272:0","statements":[{"assignments":[184],"declarations":[{"constant":false,"id":184,"mutability":"mutable","name":"mask","nameLocation":"4001:4:0","nodeType":"VariableDeclaration","scope":196,"src":"3996:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":183,"name":"uint","nodeType":"ElementaryTypeName","src":"3996:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":194,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4009:3:0","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4017:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":187,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"4022:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4017:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":189,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4016:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4009:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":191,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4008:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4030:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4008:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3996:35:0"},{"AST":{"nodeType":"YulBlock","src":"4054:180:0","statements":[{"nodeType":"YulVariableDeclaration","src":"4072:41:0","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4097:3:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4091:5:0"},"nodeType":"YulFunctionCall","src":"4091:10:0"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"4107:4:0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4103:3:0"},"nodeType":"YulFunctionCall","src":"4103:9:0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4087:3:0"},"nodeType":"YulFunctionCall","src":"4087:26:0"},"variables":[{"name":"srcpart","nodeType":"YulTypedName","src":"4076:7:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4130:38:0","value":{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"4156:4:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4150:5:0"},"nodeType":"YulFunctionCall","src":"4150:11:0"},{"name":"mask","nodeType":"YulIdentifier","src":"4163:4:0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4146:3:0"},"nodeType":"YulFunctionCall","src":"4146:22:0"},"variables":[{"name":"destpart","nodeType":"YulTypedName","src":"4134:8:0","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"4192:4:0"},{"arguments":[{"name":"destpart","nodeType":"YulIdentifier","src":"4201:8:0"},{"name":"srcpart","nodeType":"YulIdentifier","src":"4211:7:0"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4198:2:0"},"nodeType":"YulFunctionCall","src":"4198:21:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4185:6:0"},"nodeType":"YulFunctionCall","src":"4185:35:0"},"nodeType":"YulExpressionStatement","src":"4185:35:0"}]},"evmVersion":"london","externalReferences":[{"declaration":159,"isOffset":false,"isSlot":false,"src":"4156:4:0","valueSize":1},{"declaration":159,"isOffset":false,"isSlot":false,"src":"4192:4:0","valueSize":1},{"declaration":184,"isOffset":false,"isSlot":false,"src":"4107:4:0","valueSize":1},{"declaration":184,"isOffset":false,"isSlot":false,"src":"4163:4:0","valueSize":1},{"declaration":162,"isOffset":false,"isSlot":false,"src":"4097:3:0","valueSize":1}],"id":195,"nodeType":"InlineAssembly","src":"4045:189:0"}]},{"expression":{"id":197,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"4261:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":125,"id":198,"nodeType":"Return","src":"4254:10:0"}]},"documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"2523:316:0","text":" @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to copy.\n @return The original buffer, for chaining."},"id":200,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"2853:6:0","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"buf","nameLocation":"2874:3:0","nodeType":"VariableDeclaration","scope":200,"src":"2860:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":115,"nodeType":"UserDefinedTypeName","pathNode":{"id":114,"name":"buffer","nameLocations":["2860:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"2860:6:0"},"referencedDeclaration":7,"src":"2860:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":118,"mutability":"mutable","name":"data","nameLocation":"2892:4:0","nodeType":"VariableDeclaration","scope":200,"src":"2879:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":117,"name":"bytes","nodeType":"ElementaryTypeName","src":"2879:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":120,"mutability":"mutable","name":"len","nameLocation":"2903:3:0","nodeType":"VariableDeclaration","scope":200,"src":"2898:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":119,"name":"uint","nodeType":"ElementaryTypeName","src":"2898:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2859:48:0"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":200,"src":"2930:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":123,"nodeType":"UserDefinedTypeName","pathNode":{"id":122,"name":"buffer","nameLocations":["2930:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"2930:6:0"},"referencedDeclaration":7,"src":"2930:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"2929:15:0"},"scope":420,"src":"2844:1427:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":219,"nodeType":"Block","src":"4631:54:0","statements":[{"expression":{"arguments":[{"id":213,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"4655:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":214,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"4660:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":215,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"4666:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4671:6:0","memberName":"length","nodeType":"MemberAccess","src":"4666:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":212,"name":"append","nodeType":"Identifier","overloadedDeclarations":[200,220,326],"referencedDeclaration":200,"src":"4648:6:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$7_memory_ptr_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$7_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes memory,uint256) pure returns (struct Buffer.buffer memory)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4648:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":211,"id":218,"nodeType":"Return","src":"4641:37:0"}]},"documentation":{"id":201,"nodeType":"StructuredDocumentation","src":"4277:257:0","text":" @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":220,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"4548:6:0","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"buf","nameLocation":"4569:3:0","nodeType":"VariableDeclaration","scope":220,"src":"4555:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":203,"nodeType":"UserDefinedTypeName","pathNode":{"id":202,"name":"buffer","nameLocations":["4555:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"4555:6:0"},"referencedDeclaration":7,"src":"4555:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"data","nameLocation":"4587:4:0","nodeType":"VariableDeclaration","scope":220,"src":"4574:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":205,"name":"bytes","nodeType":"ElementaryTypeName","src":"4574:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4554:38:0"},"returnParameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":220,"src":"4616:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":209,"nodeType":"UserDefinedTypeName","pathNode":{"id":208,"name":"buffer","nameLocations":["4616:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"4616:6:0"},"referencedDeclaration":7,"src":"4616:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"4615:15:0"},"scope":420,"src":"4539:146:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":260,"nodeType":"Block","src":"5037:610:0","statements":[{"assignments":[233],"declarations":[{"constant":false,"id":233,"mutability":"mutable","name":"off","nameLocation":"5052:3:0","nodeType":"VariableDeclaration","scope":260,"src":"5047:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint","nodeType":"ElementaryTypeName","src":"5047:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":237,"initialValue":{"expression":{"expression":{"id":234,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"5058:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5062:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":4,"src":"5058:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5066:6:0","memberName":"length","nodeType":"MemberAccess","src":"5058:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5047:25:0"},{"assignments":[239],"declarations":[{"constant":false,"id":239,"mutability":"mutable","name":"offPlusOne","nameLocation":"5087:10:0","nodeType":"VariableDeclaration","scope":260,"src":"5082:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":238,"name":"uint","nodeType":"ElementaryTypeName","src":"5082:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":243,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":240,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"5100:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5106:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5100:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5082:25:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":244,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"5121:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":245,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"5128:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":246,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5132:8:0","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":6,"src":"5128:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5121:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":256,"nodeType":"IfStatement","src":"5117:77:0","trueBody":{"id":255,"nodeType":"Block","src":"5142:52:0","statements":[{"expression":{"arguments":[{"id":249,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"5163:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":250,"name":"offPlusOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"5168:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5181:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5168:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":248,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"5156:6:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$7_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5156:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"5156:27:0"}]}},{"AST":{"nodeType":"YulBlock","src":"5213:407:0","statements":[{"nodeType":"YulVariableDeclaration","src":"5276:24:0","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"5296:3:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5290:5:0"},"nodeType":"YulFunctionCall","src":"5290:10:0"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"5280:6:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5383:37:0","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5403:6:0"},{"name":"off","nodeType":"YulIdentifier","src":"5411:3:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5399:3:0"},"nodeType":"YulFunctionCall","src":"5399:16:0"},{"kind":"number","nodeType":"YulLiteral","src":"5417:2:0","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5395:3:0"},"nodeType":"YulFunctionCall","src":"5395:25:0"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"5387:4:0","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"5441:4:0"},{"name":"data","nodeType":"YulIdentifier","src":"5447:4:0"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"5433:7:0"},"nodeType":"YulFunctionCall","src":"5433:19:0"},"nodeType":"YulExpressionStatement","src":"5433:19:0"},{"body":{"nodeType":"YulBlock","src":"5552:58:0","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5577:6:0"},{"name":"offPlusOne","nodeType":"YulIdentifier","src":"5585:10:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5570:6:0"},"nodeType":"YulFunctionCall","src":"5570:26:0"},"nodeType":"YulExpressionStatement","src":"5570:26:0"}]},"condition":{"arguments":[{"name":"offPlusOne","nodeType":"YulIdentifier","src":"5525:10:0"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5543:6:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5537:5:0"},"nodeType":"YulFunctionCall","src":"5537:13:0"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5522:2:0"},"nodeType":"YulFunctionCall","src":"5522:29:0"},"nodeType":"YulIf","src":"5519:91:0"}]},"evmVersion":"london","externalReferences":[{"declaration":224,"isOffset":false,"isSlot":false,"src":"5296:3:0","valueSize":1},{"declaration":226,"isOffset":false,"isSlot":false,"src":"5447:4:0","valueSize":1},{"declaration":233,"isOffset":false,"isSlot":false,"src":"5411:3:0","valueSize":1},{"declaration":239,"isOffset":false,"isSlot":false,"src":"5525:10:0","valueSize":1},{"declaration":239,"isOffset":false,"isSlot":false,"src":"5585:10:0","valueSize":1}],"id":257,"nodeType":"InlineAssembly","src":"5204:416:0"},{"expression":{"id":258,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"5637:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":231,"id":259,"nodeType":"Return","src":"5630:10:0"}]},"documentation":{"id":221,"nodeType":"StructuredDocumentation","src":"4691:252:0","text":" @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":261,"implemented":true,"kind":"function","modifiers":[],"name":"appendUint8","nameLocation":"4957:11:0","nodeType":"FunctionDefinition","parameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":224,"mutability":"mutable","name":"buf","nameLocation":"4983:3:0","nodeType":"VariableDeclaration","scope":261,"src":"4969:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":223,"nodeType":"UserDefinedTypeName","pathNode":{"id":222,"name":"buffer","nameLocations":["4969:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"4969:6:0"},"referencedDeclaration":7,"src":"4969:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":226,"mutability":"mutable","name":"data","nameLocation":"4994:4:0","nodeType":"VariableDeclaration","scope":261,"src":"4988:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":225,"name":"uint8","nodeType":"ElementaryTypeName","src":"4988:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4968:31:0"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":261,"src":"5022:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":229,"nodeType":"UserDefinedTypeName","pathNode":{"id":228,"name":"buffer","nameLocations":["5022:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"5022:6:0"},"referencedDeclaration":7,"src":"5022:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"5021:15:0"},"scope":420,"src":"4948:699:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":325,"nodeType":"Block","src":"6079:854:0","statements":[{"assignments":[276],"declarations":[{"constant":false,"id":276,"mutability":"mutable","name":"off","nameLocation":"6094:3:0","nodeType":"VariableDeclaration","scope":325,"src":"6089:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":275,"name":"uint","nodeType":"ElementaryTypeName","src":"6089:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":280,"initialValue":{"expression":{"expression":{"id":277,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"6100:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":278,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6104:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":4,"src":"6100:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6108:6:0","memberName":"length","nodeType":"MemberAccess","src":"6100:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6089:25:0"},{"assignments":[282],"declarations":[{"constant":false,"id":282,"mutability":"mutable","name":"newCapacity","nameLocation":"6129:11:0","nodeType":"VariableDeclaration","scope":325,"src":"6124:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":281,"name":"uint","nodeType":"ElementaryTypeName","src":"6124:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":286,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":283,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"6143:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":284,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"6149:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6143:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6124:28:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":287,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"6166:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":288,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"6180:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":289,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6184:8:0","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":6,"src":"6180:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6166:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":299,"nodeType":"IfStatement","src":"6162:85:0","trueBody":{"id":298,"nodeType":"Block","src":"6194:53:0","statements":[{"expression":{"arguments":[{"id":292,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"6215:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":293,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"6220:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6234:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6220:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":291,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"6208:6:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$7_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6208:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":297,"nodeType":"ExpressionStatement","src":"6208:28:0"}]}},{"id":322,"nodeType":"UncheckedBlock","src":"6257:650:0","statements":[{"assignments":[301],"declarations":[{"constant":false,"id":301,"mutability":"mutable","name":"mask","nameLocation":"6286:4:0","nodeType":"VariableDeclaration","scope":322,"src":"6281:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":300,"name":"uint","nodeType":"ElementaryTypeName","src":"6281:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":308,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6294:3:0","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":303,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"6301:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6294:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":305,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6293:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6308:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6293:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6281:28:0"},{"expression":{"id":319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":309,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"6355:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":310,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"6362:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6371:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6376:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":313,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"6381:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6376:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":315,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6375:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6371:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":317,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6370:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6362:24:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6355:31:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":320,"nodeType":"ExpressionStatement","src":"6355:31:0"},{"AST":{"nodeType":"YulBlock","src":"6409:488:0","statements":[{"nodeType":"YulVariableDeclaration","src":"6480:24:0","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"6500:3:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6494:5:0"},"nodeType":"YulFunctionCall","src":"6494:10:0"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"6484:6:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6603:36:0","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6619:6:0"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"6627:11:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6615:3:0"},"nodeType":"YulFunctionCall","src":"6615:24:0"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"6607:4:0","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"6663:4:0"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"6682:4:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6676:5:0"},"nodeType":"YulFunctionCall","src":"6676:11:0"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"6693:4:0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6689:3:0"},"nodeType":"YulFunctionCall","src":"6689:9:0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6672:3:0"},"nodeType":"YulFunctionCall","src":"6672:27:0"},{"name":"data","nodeType":"YulIdentifier","src":"6701:4:0"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6669:2:0"},"nodeType":"YulFunctionCall","src":"6669:37:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6656:6:0"},"nodeType":"YulFunctionCall","src":"6656:51:0"},"nodeType":"YulExpressionStatement","src":"6656:51:0"},{"body":{"nodeType":"YulBlock","src":"6816:67:0","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6845:6:0"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"6853:11:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6838:6:0"},"nodeType":"YulFunctionCall","src":"6838:27:0"},"nodeType":"YulExpressionStatement","src":"6838:27:0"}]},"condition":{"arguments":[{"name":"newCapacity","nodeType":"YulIdentifier","src":"6788:11:0"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6807:6:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6801:5:0"},"nodeType":"YulFunctionCall","src":"6801:13:0"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6785:2:0"},"nodeType":"YulFunctionCall","src":"6785:30:0"},"nodeType":"YulIf","src":"6782:101:0"}]},"evmVersion":"london","externalReferences":[{"declaration":265,"isOffset":false,"isSlot":false,"src":"6500:3:0","valueSize":1},{"declaration":267,"isOffset":false,"isSlot":false,"src":"6701:4:0","valueSize":1},{"declaration":301,"isOffset":false,"isSlot":false,"src":"6693:4:0","valueSize":1},{"declaration":282,"isOffset":false,"isSlot":false,"src":"6627:11:0","valueSize":1},{"declaration":282,"isOffset":false,"isSlot":false,"src":"6788:11:0","valueSize":1},{"declaration":282,"isOffset":false,"isSlot":false,"src":"6853:11:0","valueSize":1}],"id":321,"nodeType":"InlineAssembly","src":"6400:497:0"}]},{"expression":{"id":323,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"6923:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":274,"id":324,"nodeType":"Return","src":"6916:10:0"}]},"documentation":{"id":262,"nodeType":"StructuredDocumentation","src":"5653:326:0","text":" @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\n      exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to write (left-aligned).\n @return The original buffer, for chaining."},"id":326,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"5993:6:0","nodeType":"FunctionDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":265,"mutability":"mutable","name":"buf","nameLocation":"6014:3:0","nodeType":"VariableDeclaration","scope":326,"src":"6000:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":264,"nodeType":"UserDefinedTypeName","pathNode":{"id":263,"name":"buffer","nameLocations":["6000:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"6000:6:0"},"referencedDeclaration":7,"src":"6000:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":267,"mutability":"mutable","name":"data","nameLocation":"6027:4:0","nodeType":"VariableDeclaration","scope":326,"src":"6019:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6019:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":269,"mutability":"mutable","name":"len","nameLocation":"6038:3:0","nodeType":"VariableDeclaration","scope":326,"src":"6033:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":268,"name":"uint","nodeType":"ElementaryTypeName","src":"6033:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5999:43:0"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":326,"src":"6064:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":272,"nodeType":"UserDefinedTypeName","pathNode":{"id":271,"name":"buffer","nameLocations":["6064:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"6064:6:0"},"referencedDeclaration":7,"src":"6064:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"6063:15:0"},"scope":420,"src":"5984:949:0","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":347,"nodeType":"Block","src":"7294:54:0","statements":[{"expression":{"arguments":[{"id":339,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"7318:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"arguments":[{"id":342,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"7331:4:0","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7323:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7323:7:0","typeDescriptions":{}}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7323:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3230","id":344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:2:0","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"id":338,"name":"append","nodeType":"Identifier","overloadedDeclarations":[200,220,326],"referencedDeclaration":326,"src":"7311:6:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$7_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$7_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes32,uint256) pure returns (struct Buffer.buffer memory)"}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7311:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":337,"id":346,"nodeType":"Return","src":"7304:37:0"}]},"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"6939:256:0","text":" @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chhaining."},"id":348,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes20","nameLocation":"7209:13:0","nodeType":"FunctionDefinition","parameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"buf","nameLocation":"7237:3:0","nodeType":"VariableDeclaration","scope":348,"src":"7223:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":329,"nodeType":"UserDefinedTypeName","pathNode":{"id":328,"name":"buffer","nameLocations":["7223:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"7223:6:0"},"referencedDeclaration":7,"src":"7223:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":332,"mutability":"mutable","name":"data","nameLocation":"7250:4:0","nodeType":"VariableDeclaration","scope":348,"src":"7242:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":331,"name":"bytes20","nodeType":"ElementaryTypeName","src":"7242:7:0","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"7222:33:0"},"returnParameters":{"id":337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":348,"src":"7279:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":335,"nodeType":"UserDefinedTypeName","pathNode":{"id":334,"name":"buffer","nameLocations":["7279:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"7279:6:0"},"referencedDeclaration":7,"src":"7279:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"7278:15:0"},"scope":420,"src":"7200:148:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":366,"nodeType":"Block","src":"7708:45:0","statements":[{"expression":{"arguments":[{"id":361,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"7732:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":362,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"7737:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3332","id":363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7743:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":360,"name":"append","nodeType":"Identifier","overloadedDeclarations":[200,220,326],"referencedDeclaration":326,"src":"7725:6:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$7_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$7_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes32,uint256) pure returns (struct Buffer.buffer memory)"}},"id":364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7725:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":359,"id":365,"nodeType":"Return","src":"7718:28:0"}]},"documentation":{"id":349,"nodeType":"StructuredDocumentation","src":"7354:255:0","text":" @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":367,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes32","nameLocation":"7623:13:0","nodeType":"FunctionDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"mutability":"mutable","name":"buf","nameLocation":"7651:3:0","nodeType":"VariableDeclaration","scope":367,"src":"7637:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":351,"nodeType":"UserDefinedTypeName","pathNode":{"id":350,"name":"buffer","nameLocations":["7637:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"7637:6:0"},"referencedDeclaration":7,"src":"7637:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":354,"mutability":"mutable","name":"data","nameLocation":"7664:4:0","nodeType":"VariableDeclaration","scope":367,"src":"7656:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7656:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7636:33:0"},"returnParameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":367,"src":"7693:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":357,"nodeType":"UserDefinedTypeName","pathNode":{"id":356,"name":"buffer","nameLocations":["7693:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"7693:6:0"},"referencedDeclaration":7,"src":"7693:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"7692:15:0"},"scope":420,"src":"7614:139:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":418,"nodeType":"Block","src":"8179:699:0","statements":[{"assignments":[382],"declarations":[{"constant":false,"id":382,"mutability":"mutable","name":"off","nameLocation":"8194:3:0","nodeType":"VariableDeclaration","scope":418,"src":"8189:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":381,"name":"uint","nodeType":"ElementaryTypeName","src":"8189:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":386,"initialValue":{"expression":{"expression":{"id":383,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"8200:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":384,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8204:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":4,"src":"8200:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8208:6:0","memberName":"length","nodeType":"MemberAccess","src":"8200:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8189:25:0"},{"assignments":[388],"declarations":[{"constant":false,"id":388,"mutability":"mutable","name":"newCapacity","nameLocation":"8229:11:0","nodeType":"VariableDeclaration","scope":418,"src":"8224:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":387,"name":"uint","nodeType":"ElementaryTypeName","src":"8224:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":392,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":389,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"8243:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":390,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"8249:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8243:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8224:28:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":393,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"8266:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":394,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"8280:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":395,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8284:8:0","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":6,"src":"8280:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8266:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":405,"nodeType":"IfStatement","src":"8262:85:0","trueBody":{"id":404,"nodeType":"Block","src":"8294:53:0","statements":[{"expression":{"arguments":[{"id":398,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"8315:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":399,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"8320:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8334:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"8320:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":397,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"8308:6:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$7_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8308:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":403,"nodeType":"ExpressionStatement","src":"8308:28:0"}]}},{"assignments":[407],"declarations":[{"constant":false,"id":407,"mutability":"mutable","name":"mask","nameLocation":"8362:4:0","nodeType":"VariableDeclaration","scope":418,"src":"8357:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":406,"name":"uint","nodeType":"ElementaryTypeName","src":"8357:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":414,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8370:3:0","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":409,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"8377:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8370:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":411,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8369:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8369:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8357:28:0"},{"AST":{"nodeType":"YulBlock","src":"8404:448:0","statements":[{"nodeType":"YulVariableDeclaration","src":"8467:24:0","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"8487:3:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8481:5:0"},"nodeType":"YulFunctionCall","src":"8481:10:0"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"8471:6:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8582:36:0","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8598:6:0"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"8606:11:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8594:3:0"},"nodeType":"YulFunctionCall","src":"8594:24:0"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"8586:4:0","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"8638:4:0"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"8657:4:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8651:5:0"},"nodeType":"YulFunctionCall","src":"8651:11:0"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"8668:4:0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8664:3:0"},"nodeType":"YulFunctionCall","src":"8664:9:0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8647:3:0"},"nodeType":"YulFunctionCall","src":"8647:27:0"},{"name":"data","nodeType":"YulIdentifier","src":"8676:4:0"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8644:2:0"},"nodeType":"YulFunctionCall","src":"8644:37:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8631:6:0"},"nodeType":"YulFunctionCall","src":"8631:51:0"},"nodeType":"YulExpressionStatement","src":"8631:51:0"},{"body":{"nodeType":"YulBlock","src":"8783:59:0","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8808:6:0"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"8816:11:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8801:6:0"},"nodeType":"YulFunctionCall","src":"8801:27:0"},"nodeType":"YulExpressionStatement","src":"8801:27:0"}]},"condition":{"arguments":[{"name":"newCapacity","nodeType":"YulIdentifier","src":"8755:11:0"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8774:6:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8768:5:0"},"nodeType":"YulFunctionCall","src":"8768:13:0"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8752:2:0"},"nodeType":"YulFunctionCall","src":"8752:30:0"},"nodeType":"YulIf","src":"8749:93:0"}]},"evmVersion":"london","externalReferences":[{"declaration":371,"isOffset":false,"isSlot":false,"src":"8487:3:0","valueSize":1},{"declaration":373,"isOffset":false,"isSlot":false,"src":"8676:4:0","valueSize":1},{"declaration":407,"isOffset":false,"isSlot":false,"src":"8668:4:0","valueSize":1},{"declaration":388,"isOffset":false,"isSlot":false,"src":"8606:11:0","valueSize":1},{"declaration":388,"isOffset":false,"isSlot":false,"src":"8755:11:0","valueSize":1},{"declaration":388,"isOffset":false,"isSlot":false,"src":"8816:11:0","valueSize":1}],"id":415,"nodeType":"InlineAssembly","src":"8395:457:0"},{"expression":{"id":416,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"8868:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":380,"id":417,"nodeType":"Return","src":"8861:10:0"}]},"documentation":{"id":368,"nodeType":"StructuredDocumentation","src":"7759:319:0","text":" @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to write (right-aligned).\n @return The original buffer."},"id":419,"implemented":true,"kind":"function","modifiers":[],"name":"appendInt","nameLocation":"8092:9:0","nodeType":"FunctionDefinition","parameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"buf","nameLocation":"8116:3:0","nodeType":"VariableDeclaration","scope":419,"src":"8102:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":370,"nodeType":"UserDefinedTypeName","pathNode":{"id":369,"name":"buffer","nameLocations":["8102:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"8102:6:0"},"referencedDeclaration":7,"src":"8102:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":373,"mutability":"mutable","name":"data","nameLocation":"8126:4:0","nodeType":"VariableDeclaration","scope":419,"src":"8121:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":372,"name":"uint","nodeType":"ElementaryTypeName","src":"8121:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":375,"mutability":"mutable","name":"len","nameLocation":"8137:3:0","nodeType":"VariableDeclaration","scope":419,"src":"8132:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":374,"name":"uint","nodeType":"ElementaryTypeName","src":"8132:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8101:40:0"},"returnParameters":{"id":380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":419,"src":"8164:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":378,"nodeType":"UserDefinedTypeName","pathNode":{"id":377,"name":"buffer","nameLocations":["8164:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":7,"src":"8164:6:0"},"referencedDeclaration":7,"src":"8164:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$7_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"8163:15:0"},"scope":420,"src":"8083:795:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":421,"src":"445:8435:0","usedErrors":[]}],"src":"41:8840:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[1606],"Initializable":[1088],"OwnableUpgradeable":[553]},"id":554,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":422,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":423,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":554,"sourceUnit":1607,"src":"127:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":425,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":554,"sourceUnit":1089,"src":"169:63:1","symbolAliases":[{"foreign":{"id":424,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"177:13:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":427,"name":"Initializable","nameLocations":["769:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":1088,"src":"769:13:1"},"id":428,"nodeType":"InheritanceSpecifier","src":"769:13:1"},{"baseName":{"id":429,"name":"ContextUpgradeable","nameLocations":["784:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":1606,"src":"784:18:1"},"id":430,"nodeType":"InheritanceSpecifier","src":"784:18:1"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":426,"nodeType":"StructuredDocumentation","src":"234:494:1","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":553,"linearizedBaseContracts":[553,1606,1088],"name":"OwnableUpgradeable","nameLocation":"747:18:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":432,"mutability":"mutable","name":"_owner","nameLocation":"825:6:1","nodeType":"VariableDeclaration","scope":553,"src":"809:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":431,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":438,"name":"OwnershipTransferred","nameLocation":"844:20:1","nodeType":"EventDefinition","parameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":434,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"881:13:1","nodeType":"VariableDeclaration","scope":438,"src":"865:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":433,"name":"address","nodeType":"ElementaryTypeName","src":"865:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":436,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"912:8:1","nodeType":"VariableDeclaration","scope":438,"src":"896:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":435,"name":"address","nodeType":"ElementaryTypeName","src":"896:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"864:57:1"},"src":"838:84:1"},{"body":{"id":447,"nodeType":"Block","src":"1076:43:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":444,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"1086:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1086:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":446,"nodeType":"ExpressionStatement","src":"1086:26:1"}]},"documentation":{"id":439,"nodeType":"StructuredDocumentation","src":"928:91:1","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":448,"implemented":true,"kind":"function","modifiers":[{"id":442,"kind":"modifierInvocation","modifierName":{"id":441,"name":"onlyInitializing","nameLocations":["1059:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":1033,"src":"1059:16:1"},"nodeType":"ModifierInvocation","src":"1059:16:1"}],"name":"__Ownable_init","nameLocation":"1033:14:1","nodeType":"FunctionDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[],"src":"1047:2:1"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[],"src":"1076:0:1"},"scope":553,"src":"1024:95:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":458,"nodeType":"Block","src":"1187:49:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":454,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"1216:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":453,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":547,"src":"1197:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1197:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"1197:32:1"}]},"id":459,"implemented":true,"kind":"function","modifiers":[{"id":451,"kind":"modifierInvocation","modifierName":{"id":450,"name":"onlyInitializing","nameLocations":["1170:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":1033,"src":"1170:16:1"},"nodeType":"ModifierInvocation","src":"1170:16:1"}],"name":"__Ownable_init_unchained","nameLocation":"1134:24:1","nodeType":"FunctionDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[],"src":"1158:2:1"},"returnParameters":{"id":452,"nodeType":"ParameterList","parameters":[],"src":"1187:0:1"},"scope":553,"src":"1125:111:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":466,"nodeType":"Block","src":"1345:41:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":462,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"1355:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1355:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":464,"nodeType":"ExpressionStatement","src":"1355:13:1"},{"id":465,"nodeType":"PlaceholderStatement","src":"1378:1:1"}]},"documentation":{"id":460,"nodeType":"StructuredDocumentation","src":"1242:77:1","text":" @dev Throws if called by any account other than the owner."},"id":467,"name":"onlyOwner","nameLocation":"1333:9:1","nodeType":"ModifierDefinition","parameters":{"id":461,"nodeType":"ParameterList","parameters":[],"src":"1342:2:1"},"src":"1324:62:1","virtual":false,"visibility":"internal"},{"body":{"id":475,"nodeType":"Block","src":"1517:30:1","statements":[{"expression":{"id":473,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"1534:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":472,"id":474,"nodeType":"Return","src":"1527:13:1"}]},"documentation":{"id":468,"nodeType":"StructuredDocumentation","src":"1392:65:1","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":476,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1471:5:1","nodeType":"FunctionDefinition","parameters":{"id":469,"nodeType":"ParameterList","parameters":[],"src":"1476:2:1"},"returnParameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":476,"src":"1508:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"1508:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1507:9:1"},"scope":553,"src":"1462:85:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":489,"nodeType":"Block","src":"1665:85:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":481,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"1683:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1683:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":483,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"1694:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1694:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1683:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1708:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":480,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1675:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1675:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":488,"nodeType":"ExpressionStatement","src":"1675:68:1"}]},"documentation":{"id":477,"nodeType":"StructuredDocumentation","src":"1553:62:1","text":" @dev Throws if the sender is not the owner."},"id":490,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1629:11:1","nodeType":"FunctionDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[],"src":"1640:2:1"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[],"src":"1665:0:1"},"scope":553,"src":"1620:130:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":503,"nodeType":"Block","src":"2139:47:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2176:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":498,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2168:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":497,"name":"address","nodeType":"ElementaryTypeName","src":"2168:7:1","typeDescriptions":{}}},"id":500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2168:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":496,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":547,"src":"2149:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2149:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":502,"nodeType":"ExpressionStatement","src":"2149:30:1"}]},"documentation":{"id":491,"nodeType":"StructuredDocumentation","src":"1756:324:1","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":504,"implemented":true,"kind":"function","modifiers":[{"id":494,"kind":"modifierInvocation","modifierName":{"id":493,"name":"onlyOwner","nameLocations":["2129:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":467,"src":"2129:9:1"},"nodeType":"ModifierInvocation","src":"2129:9:1"}],"name":"renounceOwnership","nameLocation":"2094:17:1","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[],"src":"2111:2:1"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[],"src":"2139:0:1"},"scope":553,"src":"2085:101:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":526,"nodeType":"Block","src":"2405:128:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":513,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"2423:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2443:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2435:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":514,"name":"address","nodeType":"ElementaryTypeName","src":"2435:7:1","typeDescriptions":{}}},"id":517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2435:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2423:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2447:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":512,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2415:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2415:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":521,"nodeType":"ExpressionStatement","src":"2415:73:1"},{"expression":{"arguments":[{"id":523,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"2517:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":522,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":547,"src":"2498:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2498:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":525,"nodeType":"ExpressionStatement","src":"2498:28:1"}]},"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"2192:138:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":527,"implemented":true,"kind":"function","modifiers":[{"id":510,"kind":"modifierInvocation","modifierName":{"id":509,"name":"onlyOwner","nameLocations":["2395:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":467,"src":"2395:9:1"},"nodeType":"ModifierInvocation","src":"2395:9:1"}],"name":"transferOwnership","nameLocation":"2344:17:1","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":507,"mutability":"mutable","name":"newOwner","nameLocation":"2370:8:1","nodeType":"VariableDeclaration","scope":527,"src":"2362:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":506,"name":"address","nodeType":"ElementaryTypeName","src":"2362:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2361:18:1"},"returnParameters":{"id":511,"nodeType":"ParameterList","parameters":[],"src":"2405:0:1"},"scope":553,"src":"2335:198:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":546,"nodeType":"Block","src":"2750:124:1","statements":[{"assignments":[534],"declarations":[{"constant":false,"id":534,"mutability":"mutable","name":"oldOwner","nameLocation":"2768:8:1","nodeType":"VariableDeclaration","scope":546,"src":"2760:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":533,"name":"address","nodeType":"ElementaryTypeName","src":"2760:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":536,"initialValue":{"id":535,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"2779:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2760:25:1"},{"expression":{"id":539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":537,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"2795:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":538,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"2804:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2795:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":540,"nodeType":"ExpressionStatement","src":"2795:17:1"},{"eventCall":{"arguments":[{"id":542,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"2848:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":543,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"2858:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":541,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"2827:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":545,"nodeType":"EmitStatement","src":"2822:45:1"}]},"documentation":{"id":528,"nodeType":"StructuredDocumentation","src":"2539:143:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":547,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2696:18:1","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"newOwner","nameLocation":"2723:8:1","nodeType":"VariableDeclaration","scope":547,"src":"2715:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":529,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2714:18:1"},"returnParameters":{"id":532,"nodeType":"ParameterList","parameters":[],"src":"2750:0:1"},"scope":553,"src":"2687:187:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":548,"nodeType":"StructuredDocumentation","src":"2880:254:1","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":552,"mutability":"mutable","name":"__gap","nameLocation":"3159:5:1","nodeType":"VariableDeclaration","scope":553,"src":"3139:25:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":549,"name":"uint256","nodeType":"ElementaryTypeName","src":"3139:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":551,"length":{"hexValue":"3439","id":550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:2:1","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3139:11:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":554,"src":"729:2438:1","usedErrors":[]}],"src":"102:3066:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","exportedSymbols":{"IERC1967Upgradeable":[574]},"id":575,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":555,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1967Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":556,"nodeType":"StructuredDocumentation","src":"132:133:2","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"},"fullyImplemented":true,"id":574,"linearizedBaseContracts":[574],"name":"IERC1967Upgradeable","nameLocation":"276:19:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":557,"nodeType":"StructuredDocumentation","src":"302:68:2","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":561,"name":"Upgraded","nameLocation":"381:8:2","nodeType":"EventDefinition","parameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"406:14:2","nodeType":"VariableDeclaration","scope":561,"src":"390:30:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":558,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"389:32:2"},"src":"375:47:2"},{"anonymous":false,"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"428:67:2","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":568,"name":"AdminChanged","nameLocation":"506:12:2","nodeType":"EventDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"527:13:2","nodeType":"VariableDeclaration","scope":568,"src":"519:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":563,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":566,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"550:8:2","nodeType":"VariableDeclaration","scope":568,"src":"542:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"518:41:2"},"src":"500:60:2"},{"anonymous":false,"documentation":{"id":569,"nodeType":"StructuredDocumentation","src":"566:59:2","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":573,"name":"BeaconUpgraded","nameLocation":"636:14:2","nodeType":"EventDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":571,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"667:6:2","nodeType":"VariableDeclaration","scope":573,"src":"651:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":570,"name":"address","nodeType":"ElementaryTypeName","src":"651:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"650:24:2"},"src":"630:45:2"}],"scope":575,"src":"266:411:2","usedErrors":[]}],"src":"107:571:2"},"id":2},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[584]},"id":585,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":576,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":577,"nodeType":"StructuredDocumentation","src":"138:203:3","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":584,"linearizedBaseContracts":[584],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":578,"nodeType":"StructuredDocumentation","src":"387:438:3","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":583,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:3","nodeType":"FunctionDefinition","parameters":{"id":579,"nodeType":"ParameterList","parameters":[],"src":"852:2:3"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":583,"src":"878:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:3"},"scope":584,"src":"830:57:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":585,"src":"342:547:3","usedErrors":[]}],"src":"113:777:3"},"id":3},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1555],"ERC1967UpgradeUpgradeable":[909],"IBeaconUpgradeable":[919],"IERC1822ProxiableUpgradeable":[584],"IERC1967Upgradeable":[574],"Initializable":[1088],"StorageSlotUpgradeable":[1716]},"id":910,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":586,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":587,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":920,"src":"141:42:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","file":"../../interfaces/IERC1967Upgradeable.sol","id":588,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":575,"src":"184:50:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":589,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":585,"src":"235:56:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":590,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":1556,"src":"292:44:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":591,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":1717,"src":"337:48:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":593,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":1089,"src":"386:57:4","symbolAliases":[{"foreign":{"id":592,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"394:13:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":595,"name":"Initializable","nameLocations":["677:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":1088,"src":"677:13:4"},"id":596,"nodeType":"InheritanceSpecifier","src":"677:13:4"},{"baseName":{"id":597,"name":"IERC1967Upgradeable","nameLocations":["692:19:4"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"692:19:4"},"id":598,"nodeType":"InheritanceSpecifier","src":"692:19:4"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":594,"nodeType":"StructuredDocumentation","src":"445:184:4","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"},"fullyImplemented":true,"id":909,"linearizedBaseContracts":[909,574,1088],"name":"ERC1967UpgradeUpgradeable","nameLocation":"648:25:4","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":601,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"822:14:4","nodeType":"VariableDeclaration","scope":909,"src":"797:108:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":599,"name":"bytes32","nodeType":"ElementaryTypeName","src":"797:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"839:66:4","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"912:214:4","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":605,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1157:20:4","nodeType":"VariableDeclaration","scope":909,"src":"1131:115:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":603,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1131:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1180:66:4","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":610,"nodeType":"Block","src":"1312:7:4","statements":[]},"id":611,"implemented":true,"kind":"function","modifiers":[{"id":608,"kind":"modifierInvocation","modifierName":{"id":607,"name":"onlyInitializing","nameLocations":["1295:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":1033,"src":"1295:16:4"},"nodeType":"ModifierInvocation","src":"1295:16:4"}],"name":"__ERC1967Upgrade_init","nameLocation":"1262:21:4","nodeType":"FunctionDefinition","parameters":{"id":606,"nodeType":"ParameterList","parameters":[],"src":"1283:2:4"},"returnParameters":{"id":609,"nodeType":"ParameterList","parameters":[],"src":"1312:0:4"},"scope":909,"src":"1253:66:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":616,"nodeType":"Block","src":"1394:7:4","statements":[]},"id":617,"implemented":true,"kind":"function","modifiers":[{"id":614,"kind":"modifierInvocation","modifierName":{"id":613,"name":"onlyInitializing","nameLocations":["1377:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":1033,"src":"1377:16:4"},"nodeType":"ModifierInvocation","src":"1377:16:4"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"1334:31:4","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"1365:2:4"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[],"src":"1394:0:4"},"scope":909,"src":"1325:76:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":629,"nodeType":"Block","src":"1540:89:4","statements":[{"expression":{"expression":{"arguments":[{"id":625,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"1595:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":623,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"1557:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1716_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1580:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1638,"src":"1557:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1612_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1557:59:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1612_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":627,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1617:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1611,"src":"1557:65:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":622,"id":628,"nodeType":"Return","src":"1550:72:4"}]},"documentation":{"id":618,"nodeType":"StructuredDocumentation","src":"1406:67:4","text":" @dev Returns the current implementation address."},"id":630,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1487:18:4","nodeType":"FunctionDefinition","parameters":{"id":619,"nodeType":"ParameterList","parameters":[],"src":"1505:2:4"},"returnParameters":{"id":622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":630,"src":"1531:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":620,"name":"address","nodeType":"ElementaryTypeName","src":"1531:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1530:9:4"},"scope":909,"src":"1478:151:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":653,"nodeType":"Block","src":"1783:218:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":639,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"1831:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":637,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"1801:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1555_$","typeString":"type(library AddressUpgradeable)"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1820:10:4","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1243,"src":"1801:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1801:48:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1851:47:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":636,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1793:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1793:106:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":643,"nodeType":"ExpressionStatement","src":"1793:106:4"},{"expression":{"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":647,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"1947:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":644,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"1909:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1716_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1932:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1638,"src":"1909:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1612_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1909:59:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1612_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":649,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1969:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1611,"src":"1909:65:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":650,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"1977:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1909:85:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":652,"nodeType":"ExpressionStatement","src":"1909:85:4"}]},"documentation":{"id":631,"nodeType":"StructuredDocumentation","src":"1635:80:4","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":654,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1729:18:4","nodeType":"FunctionDefinition","parameters":{"id":634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":633,"mutability":"mutable","name":"newImplementation","nameLocation":"1756:17:4","nodeType":"VariableDeclaration","scope":654,"src":"1748:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":632,"name":"address","nodeType":"ElementaryTypeName","src":"1748:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1747:27:4"},"returnParameters":{"id":635,"nodeType":"ParameterList","parameters":[],"src":"1783:0:4"},"scope":909,"src":"1720:281:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":668,"nodeType":"Block","src":"2163:96:4","statements":[{"expression":{"arguments":[{"id":661,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"2192:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":660,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"2173:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2173:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":663,"nodeType":"ExpressionStatement","src":"2173:37:4"},{"eventCall":{"arguments":[{"id":665,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"2234:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":664,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2225:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2225:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":667,"nodeType":"EmitStatement","src":"2220:32:4"}]},"documentation":{"id":655,"nodeType":"StructuredDocumentation","src":"2007:95:4","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":669,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2116:10:4","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":657,"mutability":"mutable","name":"newImplementation","nameLocation":"2135:17:4","nodeType":"VariableDeclaration","scope":669,"src":"2127:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":656,"name":"address","nodeType":"ElementaryTypeName","src":"2127:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2126:27:4"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[],"src":"2163:0:4"},"scope":909,"src":"2107:152:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":698,"nodeType":"Block","src":"2491:178:4","statements":[{"expression":{"arguments":[{"id":680,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"2512:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":679,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"2501:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":682,"nodeType":"ExpressionStatement","src":"2501:29:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":683,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"2544:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2549:6:4","memberName":"length","nodeType":"MemberAccess","src":"2544:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2558:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2544:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":687,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"2563:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2544:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":697,"nodeType":"IfStatement","src":"2540:123:4","trueBody":{"id":696,"nodeType":"Block","src":"2574:89:4","statements":[{"expression":{"arguments":[{"id":692,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"2628:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":693,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"2647:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":689,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"2588:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1555_$","typeString":"type(library AddressUpgradeable)"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2607:20:4","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1442,"src":"2588:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2588:64:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":695,"nodeType":"ExpressionStatement","src":"2588:64:4"}]}}]},"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"2265:123:4","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":699,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2402:17:4","nodeType":"FunctionDefinition","parameters":{"id":677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":672,"mutability":"mutable","name":"newImplementation","nameLocation":"2428:17:4","nodeType":"VariableDeclaration","scope":699,"src":"2420:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":671,"name":"address","nodeType":"ElementaryTypeName","src":"2420:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":674,"mutability":"mutable","name":"data","nameLocation":"2460:4:4","nodeType":"VariableDeclaration","scope":699,"src":"2447:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":673,"name":"bytes","nodeType":"ElementaryTypeName","src":"2447:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":676,"mutability":"mutable","name":"forceCall","nameLocation":"2471:9:4","nodeType":"VariableDeclaration","scope":699,"src":"2466:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":675,"name":"bool","nodeType":"ElementaryTypeName","src":"2466:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2419:62:4"},"returnParameters":{"id":678,"nodeType":"ParameterList","parameters":[],"src":"2491:0:4"},"scope":909,"src":"2393:276:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":751,"nodeType":"Block","src":"2943:842:4","statements":[{"condition":{"expression":{"arguments":[{"id":711,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"3295:14:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":709,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"3257:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1716_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3280:14:4","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":1649,"src":"3257:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$1615_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3257:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1615_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":713,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3311:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1614,"src":"3257:59:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":749,"nodeType":"Block","src":"3386:393:4","statements":[{"clauses":[{"block":{"id":734,"nodeType":"Block","src":"3491:115:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":728,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"3517:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":729,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"3525:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3517:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3547:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":727,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3509:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3509:82:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":733,"nodeType":"ExpressionStatement","src":"3509:82:4"}]},"errorName":"","id":735,"nodeType":"TryCatchClause","parameters":{"id":726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":725,"mutability":"mutable","name":"slot","nameLocation":"3485:4:4","nodeType":"VariableDeclaration","scope":735,"src":"3477:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":724,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3477:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3476:14:4"},"src":"3468:138:4"},{"block":{"id":740,"nodeType":"Block","src":"3613:89:4","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3638:48:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":736,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3631:6:4","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3631:56:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":739,"nodeType":"ExpressionStatement","src":"3631:56:4"}]},"errorName":"","id":741,"nodeType":"TryCatchClause","src":"3607:95:4"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":720,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"3433:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":719,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"3404:28:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$584_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3404:47:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$584","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3452:13:4","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":583,"src":"3404:61:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3404:63:4","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":742,"nodeType":"TryStatement","src":"3400:302:4"},{"expression":{"arguments":[{"id":744,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"3733:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":745,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"3752:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":746,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"3758:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":743,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"3715:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3715:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":748,"nodeType":"ExpressionStatement","src":"3715:53:4"}]},"id":750,"nodeType":"IfStatement","src":"3253:526:4","trueBody":{"id":718,"nodeType":"Block","src":"3318:62:4","statements":[{"expression":{"arguments":[{"id":715,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"3351:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":714,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"3332:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3332:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":717,"nodeType":"ExpressionStatement","src":"3332:37:4"}]}}]},"documentation":{"id":700,"nodeType":"StructuredDocumentation","src":"2675:161:4","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":752,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2850:21:4","nodeType":"FunctionDefinition","parameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":702,"mutability":"mutable","name":"newImplementation","nameLocation":"2880:17:4","nodeType":"VariableDeclaration","scope":752,"src":"2872:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":701,"name":"address","nodeType":"ElementaryTypeName","src":"2872:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"data","nameLocation":"2912:4:4","nodeType":"VariableDeclaration","scope":752,"src":"2899:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":703,"name":"bytes","nodeType":"ElementaryTypeName","src":"2899:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"forceCall","nameLocation":"2923:9:4","nodeType":"VariableDeclaration","scope":752,"src":"2918:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":705,"name":"bool","nodeType":"ElementaryTypeName","src":"2918:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2871:62:4"},"returnParameters":{"id":708,"nodeType":"ParameterList","parameters":[],"src":"2943:0:4"},"scope":909,"src":"2841:944:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":753,"nodeType":"StructuredDocumentation","src":"3791:189:4","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":756,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"4011:11:4","nodeType":"VariableDeclaration","scope":909,"src":"3985:106:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":754,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3985:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4025:66:4","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":768,"nodeType":"Block","src":"4206:80:4","statements":[{"expression":{"expression":{"arguments":[{"id":764,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"4261:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":762,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"4223:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1716_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4246:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1638,"src":"4223:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1612_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4223:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1612_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":766,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4274:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1611,"src":"4223:56:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":761,"id":767,"nodeType":"Return","src":"4216:63:4"}]},"documentation":{"id":757,"nodeType":"StructuredDocumentation","src":"4098:50:4","text":" @dev Returns the current admin."},"id":769,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4162:9:4","nodeType":"FunctionDefinition","parameters":{"id":758,"nodeType":"ParameterList","parameters":[],"src":"4171:2:4"},"returnParameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":760,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":769,"src":"4197:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":759,"name":"address","nodeType":"ElementaryTypeName","src":"4197:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4196:9:4"},"scope":909,"src":"4153:133:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":794,"nodeType":"Block","src":"4413:167:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":776,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"4431:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4451:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4443:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":777,"name":"address","nodeType":"ElementaryTypeName","src":"4443:7:4","typeDescriptions":{}}},"id":780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4443:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4431:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4455:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":775,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4423:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4423:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":784,"nodeType":"ExpressionStatement","src":"4423:73:4"},{"expression":{"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":788,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"4544:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":785,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"4506:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1716_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4529:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1638,"src":"4506:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1612_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4506:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1612_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":790,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4557:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1611,"src":"4506:56:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":791,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"4565:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4506:67:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":793,"nodeType":"ExpressionStatement","src":"4506:67:4"}]},"documentation":{"id":770,"nodeType":"StructuredDocumentation","src":"4292:71:4","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":795,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4377:9:4","nodeType":"FunctionDefinition","parameters":{"id":773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":772,"mutability":"mutable","name":"newAdmin","nameLocation":"4395:8:4","nodeType":"VariableDeclaration","scope":795,"src":"4387:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"4387:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4386:18:4"},"returnParameters":{"id":774,"nodeType":"ParameterList","parameters":[],"src":"4413:0:4"},"scope":909,"src":"4368:212:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":811,"nodeType":"Block","src":"4740:86:4","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":802,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":769,"src":"4768:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4768:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":804,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"4781:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":801,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"4755:12:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4755:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":806,"nodeType":"EmitStatement","src":"4750:40:4"},{"expression":{"arguments":[{"id":808,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"4810:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":807,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"4800:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4800:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":810,"nodeType":"ExpressionStatement","src":"4800:19:4"}]},"documentation":{"id":796,"nodeType":"StructuredDocumentation","src":"4586:100:4","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":812,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4700:12:4","nodeType":"FunctionDefinition","parameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"newAdmin","nameLocation":"4721:8:4","nodeType":"VariableDeclaration","scope":812,"src":"4713:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":797,"name":"address","nodeType":"ElementaryTypeName","src":"4713:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4712:18:4"},"returnParameters":{"id":800,"nodeType":"ParameterList","parameters":[],"src":"4740:0:4"},"scope":909,"src":"4691:135:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":813,"nodeType":"StructuredDocumentation","src":"4832:232:4","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":816,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5095:12:4","nodeType":"VariableDeclaration","scope":909,"src":"5069:107:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":814,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5069:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5110:66:4","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":828,"nodeType":"Block","src":"5293:81:4","statements":[{"expression":{"expression":{"arguments":[{"id":824,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"5348:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":822,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"5310:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1716_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5333:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1638,"src":"5310:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1612_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5310:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1612_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":826,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5362:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1611,"src":"5310:57:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":821,"id":827,"nodeType":"Return","src":"5303:64:4"}]},"documentation":{"id":817,"nodeType":"StructuredDocumentation","src":"5183:51:4","text":" @dev Returns the current beacon."},"id":829,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5248:10:4","nodeType":"FunctionDefinition","parameters":{"id":818,"nodeType":"ParameterList","parameters":[],"src":"5258:2:4"},"returnParameters":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":820,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":829,"src":"5284:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":819,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5283:9:4"},"scope":909,"src":"5239:135:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":864,"nodeType":"Block","src":"5503:368:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":838,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"5551:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":836,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"5521:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1555_$","typeString":"type(library AddressUpgradeable)"}},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5540:10:4","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1243,"src":"5521:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5521:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5563:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":835,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5513:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5513:90:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":842,"nodeType":"ExpressionStatement","src":"5513:90:4"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":847,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"5683:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":846,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"5664:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$919_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5664:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$919","typeString":"contract IBeaconUpgradeable"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5694:14:4","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":918,"src":"5664:44:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5664:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":844,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"5634:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1555_$","typeString":"type(library AddressUpgradeable)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5653:10:4","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1243,"src":"5634:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5634:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5725:50:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":843,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5613:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:172:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":854,"nodeType":"ExpressionStatement","src":"5613:172:4"},{"expression":{"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":858,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"5833:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":855,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"5795:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1716_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5818:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1638,"src":"5795:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1612_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5795:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1612_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":860,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5847:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1611,"src":"5795:57:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":861,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"5855:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5795:69:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":863,"nodeType":"ExpressionStatement","src":"5795:69:4"}]},"documentation":{"id":830,"nodeType":"StructuredDocumentation","src":"5380:71:4","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":865,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5465:10:4","nodeType":"FunctionDefinition","parameters":{"id":833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":832,"mutability":"mutable","name":"newBeacon","nameLocation":"5484:9:4","nodeType":"VariableDeclaration","scope":865,"src":"5476:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":831,"name":"address","nodeType":"ElementaryTypeName","src":"5476:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5475:19:4"},"returnParameters":{"id":834,"nodeType":"ParameterList","parameters":[],"src":"5503:0:4"},"scope":909,"src":"5456:415:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":902,"nodeType":"Block","src":"6270:239:4","statements":[{"expression":{"arguments":[{"id":876,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"6291:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":875,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"6280:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6280:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":878,"nodeType":"ExpressionStatement","src":"6280:21:4"},{"eventCall":{"arguments":[{"id":880,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"6331:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":879,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"6316:14:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6316:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":882,"nodeType":"EmitStatement","src":"6311:30:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":883,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"6355:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6360:6:4","memberName":"length","nodeType":"MemberAccess","src":"6355:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6369:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6355:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":887,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"6374:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6355:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":901,"nodeType":"IfStatement","src":"6351:152:4","trueBody":{"id":900,"nodeType":"Block","src":"6385:118:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":893,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"6458:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":892,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"6439:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$919_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6439:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$919","typeString":"contract IBeaconUpgradeable"}},"id":895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6469:14:4","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":918,"src":"6439:44:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6439:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":897,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"6487:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":889,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"6399:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1555_$","typeString":"type(library AddressUpgradeable)"}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6418:20:4","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1442,"src":"6399:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6399:93:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":899,"nodeType":"ExpressionStatement","src":"6399:93:4"}]}}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"5877:292:4","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":903,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6183:23:4","nodeType":"FunctionDefinition","parameters":{"id":873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"newBeacon","nameLocation":"6215:9:4","nodeType":"VariableDeclaration","scope":903,"src":"6207:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"6207:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"data","nameLocation":"6239:4:4","nodeType":"VariableDeclaration","scope":903,"src":"6226:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":869,"name":"bytes","nodeType":"ElementaryTypeName","src":"6226:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":872,"mutability":"mutable","name":"forceCall","nameLocation":"6250:9:4","nodeType":"VariableDeclaration","scope":903,"src":"6245:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":871,"name":"bool","nodeType":"ElementaryTypeName","src":"6245:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6206:54:4"},"returnParameters":{"id":874,"nodeType":"ParameterList","parameters":[],"src":"6270:0:4"},"scope":909,"src":"6174:335:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":904,"nodeType":"StructuredDocumentation","src":"6515:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":908,"mutability":"mutable","name":"__gap","nameLocation":"6794:5:4","nodeType":"VariableDeclaration","scope":909,"src":"6774:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":905,"name":"uint256","nodeType":"ElementaryTypeName","src":"6774:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":907,"length":{"hexValue":"3530","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6782:2:4","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"6774:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":910,"src":"630:6172:4","usedErrors":[]}],"src":"116:6687:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[919]},"id":920,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":911,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":912,"nodeType":"StructuredDocumentation","src":"118:79:5","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":919,"linearizedBaseContracts":[919],"name":"IBeaconUpgradeable","nameLocation":"208:18:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":913,"nodeType":"StructuredDocumentation","src":"233:162:5","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":918,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:5","nodeType":"FunctionDefinition","parameters":{"id":914,"nodeType":"ParameterList","parameters":[],"src":"423:2:5"},"returnParameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":918,"src":"449:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":915,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:5"},"scope":919,"src":"400:58:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":920,"src":"198:262:5","usedErrors":[]}],"src":"93:368:5"},"id":5},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1555],"Initializable":[1088]},"id":1089,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":921,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":922,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1089,"sourceUnit":1556,"src":"138:44:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":923,"nodeType":"StructuredDocumentation","src":"184:2209:6","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":1088,"linearizedBaseContracts":[1088],"name":"Initializable","nameLocation":"2412:13:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":924,"nodeType":"StructuredDocumentation","src":"2432:109:6","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":926,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:6","nodeType":"VariableDeclaration","scope":1088,"src":"2546:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":925,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"2579:91:6","text":" @dev Indicates that the contract is in the process of being initialized."},"id":929,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:6","nodeType":"VariableDeclaration","scope":1088,"src":"2675:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":928,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":930,"nodeType":"StructuredDocumentation","src":"2708:90:6","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":934,"name":"Initialized","nameLocation":"2809:11:6","nodeType":"EventDefinition","parameters":{"id":933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":932,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:6","nodeType":"VariableDeclaration","scope":934,"src":"2821:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":931,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:6"},"src":"2803:33:6"},{"body":{"id":989,"nodeType":"Block","src":"3269:483:6","statements":[{"assignments":[938],"declarations":[{"constant":false,"id":938,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:6","nodeType":"VariableDeclaration","scope":989,"src":"3279:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":937,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":941,"initialValue":{"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:6","subExpression":{"id":939,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"3302:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":943,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"3347:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":944,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"3365:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":948,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:6","subExpression":{"arguments":[{"arguments":[{"id":953,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$1088","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$1088","typeString":"contract Initializable"}],"id":952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":951,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:6","typeDescriptions":{}}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":949,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"3388:18:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1555_$","typeString":"type(library AddressUpgradeable)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1243,"src":"3388:29:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":957,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"3436:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":961,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":942,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":965,"nodeType":"ExpressionStatement","src":"3325:201:6"},{"expression":{"id":968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":966,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"3536:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":969,"nodeType":"ExpressionStatement","src":"3536:16:6"},{"condition":{"id":970,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"3566:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":976,"nodeType":"IfStatement","src":"3562:65:6","trueBody":{"id":975,"nodeType":"Block","src":"3582:45:6","statements":[{"expression":{"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":971,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"3596:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":974,"nodeType":"ExpressionStatement","src":"3596:20:6"}]}},{"id":977,"nodeType":"PlaceholderStatement","src":"3636:1:6"},{"condition":{"id":978,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"3651:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":988,"nodeType":"IfStatement","src":"3647:99:6","trueBody":{"id":987,"nodeType":"Block","src":"3667:79:6","statements":[{"expression":{"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":979,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"3681:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":982,"nodeType":"ExpressionStatement","src":"3681:21:6"},{"eventCall":{"arguments":[{"hexValue":"31","id":984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":983,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"3721:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":986,"nodeType":"EmitStatement","src":"3716:19:6"}]}}]},"documentation":{"id":935,"nodeType":"StructuredDocumentation","src":"2842:399:6","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":990,"name":"initializer","nameLocation":"3255:11:6","nodeType":"ModifierDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[],"src":"3266:2:6"},"src":"3246:506:6","virtual":false,"visibility":"internal"},{"body":{"id":1022,"nodeType":"Block","src":"4863:255:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:6","subExpression":{"id":996,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"4882:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":998,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"4899:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":999,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"4914:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":995,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1004,"nodeType":"ExpressionStatement","src":"4873:99:6"},{"expression":{"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1005,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"4982:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1006,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"4997:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1008,"nodeType":"ExpressionStatement","src":"4982:22:6"},{"expression":{"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1009,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"5014:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1012,"nodeType":"ExpressionStatement","src":"5014:20:6"},{"id":1013,"nodeType":"PlaceholderStatement","src":"5044:1:6"},{"expression":{"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1014,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"5055:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1017,"nodeType":"ExpressionStatement","src":"5055:21:6"},{"eventCall":{"arguments":[{"id":1019,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"5103:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1018,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"5091:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1021,"nodeType":"EmitStatement","src":"5086:25:6"}]},"documentation":{"id":991,"nodeType":"StructuredDocumentation","src":"3758:1062:6","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":1023,"name":"reinitializer","nameLocation":"4834:13:6","nodeType":"ModifierDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":993,"mutability":"mutable","name":"version","nameLocation":"4854:7:6","nodeType":"VariableDeclaration","scope":1023,"src":"4848:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":992,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:6"},"src":"4825:293:6","virtual":false,"visibility":"internal"},{"body":{"id":1032,"nodeType":"Block","src":"5356:97:6","statements":[{"expression":{"arguments":[{"id":1027,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"5374:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":1028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":1026,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1030,"nodeType":"ExpressionStatement","src":"5366:69:6"},{"id":1031,"nodeType":"PlaceholderStatement","src":"5445:1:6"}]},"documentation":{"id":1024,"nodeType":"StructuredDocumentation","src":"5124:199:6","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":1033,"name":"onlyInitializing","nameLocation":"5337:16:6","nodeType":"ModifierDefinition","parameters":{"id":1025,"nodeType":"ParameterList","parameters":[],"src":"5353:2:6"},"src":"5328:125:6","virtual":false,"visibility":"internal"},{"body":{"id":1068,"nodeType":"Block","src":"5988:231:6","statements":[{"expression":{"arguments":[{"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:6","subExpression":{"id":1038,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"6007:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":1037,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1042,"nodeType":"ExpressionStatement","src":"5998:66:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1043,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"6078:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1045,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1044,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:6","memberName":"max","nodeType":"MemberAccess","src":"6094:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1067,"nodeType":"IfStatement","src":"6074:139:6","trueBody":{"id":1066,"nodeType":"Block","src":"6111:102:6","statements":[{"expression":{"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1050,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"6125:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":1053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1052,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1051,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:6","memberName":"max","nodeType":"MemberAccess","src":"6140:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1057,"nodeType":"ExpressionStatement","src":"6125:30:6"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":1061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1060,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1059,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:6","memberName":"max","nodeType":"MemberAccess","src":"6186:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1058,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"6174:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1065,"nodeType":"EmitStatement","src":"6169:33:6"}]}}]},"documentation":{"id":1034,"nodeType":"StructuredDocumentation","src":"5459:475:6","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":1069,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:6","nodeType":"FunctionDefinition","parameters":{"id":1035,"nodeType":"ParameterList","parameters":[],"src":"5968:2:6"},"returnParameters":{"id":1036,"nodeType":"ParameterList","parameters":[],"src":"5988:0:6"},"scope":1088,"src":"5939:280:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1077,"nodeType":"Block","src":"6393:36:6","statements":[{"expression":{"id":1075,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"6410:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1074,"id":1076,"nodeType":"Return","src":"6403:19:6"}]},"documentation":{"id":1070,"nodeType":"StructuredDocumentation","src":"6225:99:6","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":1078,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:6","nodeType":"FunctionDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[],"src":"6360:2:6"},"returnParameters":{"id":1074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1073,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1078,"src":"6386:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1072,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:6"},"scope":1088,"src":"6329:100:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1086,"nodeType":"Block","src":"6601:37:6","statements":[{"expression":{"id":1084,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"6618:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1083,"id":1085,"nodeType":"Return","src":"6611:20:6"}]},"documentation":{"id":1079,"nodeType":"StructuredDocumentation","src":"6435:105:6","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":1087,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:6","nodeType":"FunctionDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[],"src":"6569:2:6"},"returnParameters":{"id":1083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1082,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1087,"src":"6595:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1081,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:6"},"scope":1088,"src":"6545:93:6","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1089,"src":"2394:4246:6","usedErrors":[]}],"src":"113:6528:6"},"id":6},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1555],"ERC1967UpgradeUpgradeable":[909],"IBeaconUpgradeable":[919],"IERC1822ProxiableUpgradeable":[584],"IERC1967Upgradeable":[574],"Initializable":[1088],"StorageSlotUpgradeable":[1716],"UUPSUpgradeable":[1225]},"id":1226,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1090,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":1091,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1226,"sourceUnit":585,"src":"140:56:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":1092,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1226,"sourceUnit":910,"src":"197:50:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":1094,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1226,"sourceUnit":1089,"src":"248:50:7","symbolAliases":[{"foreign":{"id":1093,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"256:13:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1096,"name":"Initializable","nameLocations":["986:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":1088,"src":"986:13:7"},"id":1097,"nodeType":"InheritanceSpecifier","src":"986:13:7"},{"baseName":{"id":1098,"name":"IERC1822ProxiableUpgradeable","nameLocations":["1001:28:7"],"nodeType":"IdentifierPath","referencedDeclaration":584,"src":"1001:28:7"},"id":1099,"nodeType":"InheritanceSpecifier","src":"1001:28:7"},{"baseName":{"id":1100,"name":"ERC1967UpgradeUpgradeable","nameLocations":["1031:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"1031:25:7"},"id":1101,"nodeType":"InheritanceSpecifier","src":"1031:25:7"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1095,"nodeType":"StructuredDocumentation","src":"300:648:7","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":1225,"linearizedBaseContracts":[1225,909,574,584,1088],"name":"UUPSUpgradeable","nameLocation":"967:15:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"1063:87:7","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":1108,"mutability":"immutable","name":"__self","nameLocation":"1181:6:7","nodeType":"VariableDeclaration","scope":1225,"src":"1155:48:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"1155:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":1106,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1198:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1225","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1225","typeString":"contract UUPSUpgradeable"}],"id":1105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1190:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1104,"name":"address","nodeType":"ElementaryTypeName","src":"1190:7:7","typeDescriptions":{}}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1190:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":1130,"nodeType":"Block","src":"1729:205:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1114,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1755:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1225","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1225","typeString":"contract UUPSUpgradeable"}],"id":1113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1747:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1112,"name":"address","nodeType":"ElementaryTypeName","src":"1747:7:7","typeDescriptions":{}}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1747:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1116,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"1764:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1747:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1772:46:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":1111,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1739:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1739:80:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1120,"nodeType":"ExpressionStatement","src":"1739:80:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1122,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"1837:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1837:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1124,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"1861:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1837:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1869:46:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":1121,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1829:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1829:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1128,"nodeType":"ExpressionStatement","src":"1829:87:7"},{"id":1129,"nodeType":"PlaceholderStatement","src":"1926:1:7"}]},"documentation":{"id":1109,"nodeType":"StructuredDocumentation","src":"1210:493:7","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":1131,"name":"onlyProxy","nameLocation":"1717:9:7","nodeType":"ModifierDefinition","parameters":{"id":1110,"nodeType":"ParameterList","parameters":[],"src":"1726:2:7"},"src":"1708:226:7","virtual":false,"visibility":"internal"},{"body":{"id":1145,"nodeType":"Block","src":"2164:120:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1137,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2190:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1225","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1225","typeString":"contract UUPSUpgradeable"}],"id":1136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2182:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1135,"name":"address","nodeType":"ElementaryTypeName","src":"2182:7:7","typeDescriptions":{}}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2182:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1139,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"2199:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2182:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2207:58:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":1134,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2174:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:92:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1143,"nodeType":"ExpressionStatement","src":"2174:92:7"},{"id":1144,"nodeType":"PlaceholderStatement","src":"2276:1:7"}]},"documentation":{"id":1132,"nodeType":"StructuredDocumentation","src":"1940:195:7","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":1146,"name":"notDelegated","nameLocation":"2149:12:7","nodeType":"ModifierDefinition","parameters":{"id":1133,"nodeType":"ParameterList","parameters":[],"src":"2161:2:7"},"src":"2140:144:7","virtual":false,"visibility":"internal"},{"body":{"id":1151,"nodeType":"Block","src":"2350:7:7","statements":[]},"id":1152,"implemented":true,"kind":"function","modifiers":[{"id":1149,"kind":"modifierInvocation","modifierName":{"id":1148,"name":"onlyInitializing","nameLocations":["2333:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":1033,"src":"2333:16:7"},"nodeType":"ModifierInvocation","src":"2333:16:7"}],"name":"__UUPSUpgradeable_init","nameLocation":"2299:22:7","nodeType":"FunctionDefinition","parameters":{"id":1147,"nodeType":"ParameterList","parameters":[],"src":"2321:2:7"},"returnParameters":{"id":1150,"nodeType":"ParameterList","parameters":[],"src":"2350:0:7"},"scope":1225,"src":"2290:67:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1157,"nodeType":"Block","src":"2433:7:7","statements":[]},"id":1158,"implemented":true,"kind":"function","modifiers":[{"id":1155,"kind":"modifierInvocation","modifierName":{"id":1154,"name":"onlyInitializing","nameLocations":["2416:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":1033,"src":"2416:16:7"},"nodeType":"ModifierInvocation","src":"2416:16:7"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"2372:32:7","nodeType":"FunctionDefinition","parameters":{"id":1153,"nodeType":"ParameterList","parameters":[],"src":"2404:2:7"},"returnParameters":{"id":1156,"nodeType":"ParameterList","parameters":[],"src":"2433:0:7"},"scope":1225,"src":"2363:77:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[583],"body":{"id":1169,"nodeType":"Block","src":"3114:44:7","statements":[{"expression":{"id":1167,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"3131:20:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1166,"id":1168,"nodeType":"Return","src":"3124:27:7"}]},"documentation":{"id":1159,"nodeType":"StructuredDocumentation","src":"2445:577:7","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":1170,"implemented":true,"kind":"function","modifiers":[{"id":1163,"kind":"modifierInvocation","modifierName":{"id":1162,"name":"notDelegated","nameLocations":["3083:12:7"],"nodeType":"IdentifierPath","referencedDeclaration":1146,"src":"3083:12:7"},"nodeType":"ModifierInvocation","src":"3083:12:7"}],"name":"proxiableUUID","nameLocation":"3036:13:7","nodeType":"FunctionDefinition","overrides":{"id":1161,"nodeType":"OverrideSpecifier","overrides":[],"src":"3074:8:7"},"parameters":{"id":1160,"nodeType":"ParameterList","parameters":[],"src":"3049:2:7"},"returnParameters":{"id":1166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1170,"src":"3105:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3105:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3104:9:7"},"scope":1225,"src":"3027:131:7","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":1191,"nodeType":"Block","src":"3479:124:7","statements":[{"expression":{"arguments":[{"id":1179,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"3507:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1178,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"3489:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3489:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1181,"nodeType":"ExpressionStatement","src":"3489:36:7"},{"expression":{"arguments":[{"id":1183,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"3557:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3586:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3576:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1184,"name":"bytes","nodeType":"ElementaryTypeName","src":"3580:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3576:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":1188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3590:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1182,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"3535:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3535:61:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1190,"nodeType":"ExpressionStatement","src":"3535:61:7"}]},"documentation":{"id":1171,"nodeType":"StructuredDocumentation","src":"3164:239:7","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"3659cfe6","id":1192,"implemented":true,"kind":"function","modifiers":[{"id":1176,"kind":"modifierInvocation","modifierName":{"id":1175,"name":"onlyProxy","nameLocations":["3469:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"3469:9:7"},"nodeType":"ModifierInvocation","src":"3469:9:7"}],"name":"upgradeTo","nameLocation":"3417:9:7","nodeType":"FunctionDefinition","parameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1173,"mutability":"mutable","name":"newImplementation","nameLocation":"3435:17:7","nodeType":"VariableDeclaration","scope":1192,"src":"3427:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1172,"name":"address","nodeType":"ElementaryTypeName","src":"3427:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3426:27:7"},"returnParameters":{"id":1177,"nodeType":"ParameterList","parameters":[],"src":"3479:0:7"},"scope":1225,"src":"3408:195:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1212,"nodeType":"Block","src":"4027:115:7","statements":[{"expression":{"arguments":[{"id":1203,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"4055:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1202,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"4037:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1205,"nodeType":"ExpressionStatement","src":"4037:36:7"},{"expression":{"arguments":[{"id":1207,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"4105:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1208,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"4124:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4130:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1206,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"4083:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4083:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1211,"nodeType":"ExpressionStatement","src":"4083:52:7"}]},"documentation":{"id":1193,"nodeType":"StructuredDocumentation","src":"3609:308:7","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"4f1ef286","id":1213,"implemented":true,"kind":"function","modifiers":[{"id":1200,"kind":"modifierInvocation","modifierName":{"id":1199,"name":"onlyProxy","nameLocations":["4017:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"4017:9:7"},"nodeType":"ModifierInvocation","src":"4017:9:7"}],"name":"upgradeToAndCall","nameLocation":"3931:16:7","nodeType":"FunctionDefinition","parameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1195,"mutability":"mutable","name":"newImplementation","nameLocation":"3956:17:7","nodeType":"VariableDeclaration","scope":1213,"src":"3948:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1194,"name":"address","nodeType":"ElementaryTypeName","src":"3948:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1197,"mutability":"mutable","name":"data","nameLocation":"3988:4:7","nodeType":"VariableDeclaration","scope":1213,"src":"3975:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1196,"name":"bytes","nodeType":"ElementaryTypeName","src":"3975:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3947:46:7"},"returnParameters":{"id":1201,"nodeType":"ParameterList","parameters":[],"src":"4027:0:7"},"scope":1225,"src":"3922:220:7","stateMutability":"payable","virtual":true,"visibility":"public"},{"documentation":{"id":1214,"nodeType":"StructuredDocumentation","src":"4148:397:7","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":1219,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4559:17:7","nodeType":"FunctionDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1216,"mutability":"mutable","name":"newImplementation","nameLocation":"4585:17:7","nodeType":"VariableDeclaration","scope":1219,"src":"4577:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1215,"name":"address","nodeType":"ElementaryTypeName","src":"4577:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4576:27:7"},"returnParameters":{"id":1218,"nodeType":"ParameterList","parameters":[],"src":"4620:0:7"},"scope":1225,"src":"4550:71:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1220,"nodeType":"StructuredDocumentation","src":"4627:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1224,"mutability":"mutable","name":"__gap","nameLocation":"4906:5:7","nodeType":"VariableDeclaration","scope":1225,"src":"4886:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1221,"name":"uint256","nodeType":"ElementaryTypeName","src":"4886:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1223,"length":{"hexValue":"3530","id":1222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4894:2:7","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4886:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1226,"src":"949:3965:7","usedErrors":[]}],"src":"115:4800:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1555]},"id":1556,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1227,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1228,"nodeType":"StructuredDocumentation","src":"126:67:8","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1555,"linearizedBaseContracts":[1555],"name":"AddressUpgradeable","nameLocation":"202:18:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1242,"nodeType":"Block","src":"1489:254:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1236,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"1713:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:8","memberName":"code","nodeType":"MemberAccess","src":"1713:12:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:8","memberName":"length","nodeType":"MemberAccess","src":"1713:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1235,"id":1241,"nodeType":"Return","src":"1706:30:8"}]},"documentation":{"id":1229,"nodeType":"StructuredDocumentation","src":"227:1191:8","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1243,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:8","nodeType":"FunctionDefinition","parameters":{"id":1232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1231,"mutability":"mutable","name":"account","nameLocation":"1451:7:8","nodeType":"VariableDeclaration","scope":1243,"src":"1443:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:8"},"returnParameters":{"id":1235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1243,"src":"1483:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1233,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:8"},"scope":1555,"src":"1423:320:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1276,"nodeType":"Block","src":"2729:241:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1254,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1555","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1555","typeString":"library AddressUpgradeable"}],"id":1253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1252,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:8","typeDescriptions":{}}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:8","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1257,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"2772:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1251,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1261,"nodeType":"ExpressionStatement","src":"2739:73:8"},{"assignments":[1263,null],"declarations":[{"constant":false,"id":1263,"mutability":"mutable","name":"success","nameLocation":"2829:7:8","nodeType":"VariableDeclaration","scope":1276,"src":"2824:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1262,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1270,"initialValue":{"arguments":[{"hexValue":"","id":1268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1264,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"2842:9:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:8","memberName":"call","nodeType":"MemberAccess","src":"2842:14:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1266,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"2864:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:8"},{"expression":{"arguments":[{"id":1272,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"2893:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1271,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1275,"nodeType":"ExpressionStatement","src":"2885:78:8"}]},"documentation":{"id":1244,"nodeType":"StructuredDocumentation","src":"1749:904:8","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1277,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:8","nodeType":"FunctionDefinition","parameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1246,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:8","nodeType":"VariableDeclaration","scope":1277,"src":"2677:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1245,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1248,"mutability":"mutable","name":"amount","nameLocation":"2712:6:8","nodeType":"VariableDeclaration","scope":1277,"src":"2704:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1247,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:8"},"returnParameters":{"id":1250,"nodeType":"ParameterList","parameters":[],"src":"2729:0:8"},"scope":1555,"src":"2658:312:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1294,"nodeType":"Block","src":"3801:96:8","statements":[{"expression":{"arguments":[{"id":1288,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"3840:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1289,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"3848:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1287,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1335,1379],"referencedDeclaration":1379,"src":"3818:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1286,"id":1293,"nodeType":"Return","src":"3811:79:8"}]},"documentation":{"id":1278,"nodeType":"StructuredDocumentation","src":"2976:731:8","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1295,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:8","nodeType":"FunctionDefinition","parameters":{"id":1283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"target","nameLocation":"3742:6:8","nodeType":"VariableDeclaration","scope":1295,"src":"3734:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1279,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"data","nameLocation":"3763:4:8","nodeType":"VariableDeclaration","scope":1295,"src":"3750:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1281,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:8"},"returnParameters":{"id":1286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1295,"src":"3787:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1284,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:8"},"scope":1555,"src":"3712:185:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1314,"nodeType":"Block","src":"4266:76:8","statements":[{"expression":{"arguments":[{"id":1308,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"4305:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1309,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"4313:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1311,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"4322:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1307,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1335,1379],"referencedDeclaration":1379,"src":"4283:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1306,"id":1313,"nodeType":"Return","src":"4276:59:8"}]},"documentation":{"id":1296,"nodeType":"StructuredDocumentation","src":"3903:211:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1315,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:8","nodeType":"FunctionDefinition","parameters":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"target","nameLocation":"4158:6:8","nodeType":"VariableDeclaration","scope":1315,"src":"4150:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1297,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1300,"mutability":"mutable","name":"data","nameLocation":"4187:4:8","nodeType":"VariableDeclaration","scope":1315,"src":"4174:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1299,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1302,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:8","nodeType":"VariableDeclaration","scope":1315,"src":"4201:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1301,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:8"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1315,"src":"4252:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1304,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:8"},"scope":1555,"src":"4119:223:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1334,"nodeType":"Block","src":"4817:111:8","statements":[{"expression":{"arguments":[{"id":1328,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"4856:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1329,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"4864:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1330,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"4870:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1327,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1335,1379],"referencedDeclaration":1379,"src":"4834:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1326,"id":1333,"nodeType":"Return","src":"4827:94:8"}]},"documentation":{"id":1316,"nodeType":"StructuredDocumentation","src":"4348:351:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1335,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:8","nodeType":"FunctionDefinition","parameters":{"id":1323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"target","nameLocation":"4743:6:8","nodeType":"VariableDeclaration","scope":1335,"src":"4735:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1317,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1320,"mutability":"mutable","name":"data","nameLocation":"4764:4:8","nodeType":"VariableDeclaration","scope":1335,"src":"4751:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1319,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"value","nameLocation":"4778:5:8","nodeType":"VariableDeclaration","scope":1335,"src":"4770:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1321,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:8"},"returnParameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1335,"src":"4803:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1324,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:8"},"scope":1555,"src":"4704:224:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1378,"nodeType":"Block","src":"5355:267:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1352,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1555","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1555","typeString":"library AddressUpgradeable"}],"id":1351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1350,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:8","typeDescriptions":{}}},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:8","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1355,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"5398:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1349,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1359,"nodeType":"ExpressionStatement","src":"5365:81:8"},{"assignments":[1361,1363],"declarations":[{"constant":false,"id":1361,"mutability":"mutable","name":"success","nameLocation":"5462:7:8","nodeType":"VariableDeclaration","scope":1378,"src":"5457:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1360,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1363,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:8","nodeType":"VariableDeclaration","scope":1378,"src":"5471:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1362,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1370,"initialValue":{"arguments":[{"id":1368,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"5524:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1364,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"5498:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:8","memberName":"call","nodeType":"MemberAccess","src":"5498:11:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1366,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"5517:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:8"},{"expression":{"arguments":[{"id":1372,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"5573:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1373,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"5581:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1374,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"5590:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1375,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"5602:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1371,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"5546:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1348,"id":1377,"nodeType":"Return","src":"5539:76:8"}]},"documentation":{"id":1336,"nodeType":"StructuredDocumentation","src":"4934:237:8","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1379,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:8","nodeType":"FunctionDefinition","parameters":{"id":1345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1338,"mutability":"mutable","name":"target","nameLocation":"5224:6:8","nodeType":"VariableDeclaration","scope":1379,"src":"5216:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1337,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1340,"mutability":"mutable","name":"data","nameLocation":"5253:4:8","nodeType":"VariableDeclaration","scope":1379,"src":"5240:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1339,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1342,"mutability":"mutable","name":"value","nameLocation":"5275:5:8","nodeType":"VariableDeclaration","scope":1379,"src":"5267:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1341,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1344,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:8","nodeType":"VariableDeclaration","scope":1379,"src":"5290:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1343,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:8"},"returnParameters":{"id":1348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1347,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1379,"src":"5341:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1346,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:8"},"scope":1555,"src":"5176:446:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1395,"nodeType":"Block","src":"5899:97:8","statements":[{"expression":{"arguments":[{"id":1390,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"5935:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1391,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"5943:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1389,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1396,1425],"referencedDeclaration":1425,"src":"5916:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1388,"id":1394,"nodeType":"Return","src":"5909:80:8"}]},"documentation":{"id":1380,"nodeType":"StructuredDocumentation","src":"5628:166:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1396,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:8","nodeType":"FunctionDefinition","parameters":{"id":1385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1382,"mutability":"mutable","name":"target","nameLocation":"5835:6:8","nodeType":"VariableDeclaration","scope":1396,"src":"5827:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1381,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1384,"mutability":"mutable","name":"data","nameLocation":"5856:4:8","nodeType":"VariableDeclaration","scope":1396,"src":"5843:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1383,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:8"},"returnParameters":{"id":1388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1396,"src":"5885:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1386,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:8"},"scope":1555,"src":"5799:197:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1424,"nodeType":"Block","src":"6338:168:8","statements":[{"assignments":[1409,1411],"declarations":[{"constant":false,"id":1409,"mutability":"mutable","name":"success","nameLocation":"6354:7:8","nodeType":"VariableDeclaration","scope":1424,"src":"6349:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1408,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1411,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:8","nodeType":"VariableDeclaration","scope":1424,"src":"6363:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1410,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1416,"initialValue":{"arguments":[{"id":1414,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"6408:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1412,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"6390:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:8","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:8","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:8"},{"expression":{"arguments":[{"id":1418,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"6457:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1419,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"6465:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1420,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"6474:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1421,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"6486:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1417,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"6430:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1407,"id":1423,"nodeType":"Return","src":"6423:76:8"}]},"documentation":{"id":1397,"nodeType":"StructuredDocumentation","src":"6002:173:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1425,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:8","nodeType":"FunctionDefinition","parameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"mutability":"mutable","name":"target","nameLocation":"6225:6:8","nodeType":"VariableDeclaration","scope":1425,"src":"6217:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1398,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1401,"mutability":"mutable","name":"data","nameLocation":"6254:4:8","nodeType":"VariableDeclaration","scope":1425,"src":"6241:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1400,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1403,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:8","nodeType":"VariableDeclaration","scope":1425,"src":"6268:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1402,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:8"},"returnParameters":{"id":1407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1406,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1425,"src":"6324:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1405,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:8"},"scope":1555,"src":"6180:326:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1441,"nodeType":"Block","src":"6782:101:8","statements":[{"expression":{"arguments":[{"id":1436,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"6820:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1437,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"6828:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1435,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1442,1471],"referencedDeclaration":1471,"src":"6799:20:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1434,"id":1440,"nodeType":"Return","src":"6792:84:8"}]},"documentation":{"id":1426,"nodeType":"StructuredDocumentation","src":"6512:168:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1442,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:8","nodeType":"FunctionDefinition","parameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1428,"mutability":"mutable","name":"target","nameLocation":"6723:6:8","nodeType":"VariableDeclaration","scope":1442,"src":"6715:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1427,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1430,"mutability":"mutable","name":"data","nameLocation":"6744:4:8","nodeType":"VariableDeclaration","scope":1442,"src":"6731:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1429,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:8"},"returnParameters":{"id":1434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1442,"src":"6768:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1432,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:8"},"scope":1555,"src":"6685:198:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1470,"nodeType":"Block","src":"7224:170:8","statements":[{"assignments":[1455,1457],"declarations":[{"constant":false,"id":1455,"mutability":"mutable","name":"success","nameLocation":"7240:7:8","nodeType":"VariableDeclaration","scope":1470,"src":"7235:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1454,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1457,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:8","nodeType":"VariableDeclaration","scope":1470,"src":"7249:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1456,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1462,"initialValue":{"arguments":[{"id":1460,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"7296:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1458,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"7276:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:8","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:8","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:8"},{"expression":{"arguments":[{"id":1464,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"7345:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1465,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"7353:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1466,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"7362:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1467,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"7374:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1463,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"7318:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1453,"id":1469,"nodeType":"Return","src":"7311:76:8"}]},"documentation":{"id":1443,"nodeType":"StructuredDocumentation","src":"6889:175:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1471,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:8","nodeType":"FunctionDefinition","parameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"target","nameLocation":"7116:6:8","nodeType":"VariableDeclaration","scope":1471,"src":"7108:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1444,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1447,"mutability":"mutable","name":"data","nameLocation":"7145:4:8","nodeType":"VariableDeclaration","scope":1471,"src":"7132:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1446,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1449,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:8","nodeType":"VariableDeclaration","scope":1471,"src":"7159:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1448,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:8"},"returnParameters":{"id":1453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1471,"src":"7210:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1451,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:8"},"scope":1555,"src":"7069:325:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1509,"nodeType":"Block","src":"7876:434:8","statements":[{"condition":{"id":1485,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7890:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1507,"nodeType":"Block","src":"8246:58:8","statements":[{"expression":{"arguments":[{"id":1503,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8268:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1504,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"8280:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1502,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"8260:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1506,"nodeType":"ExpressionStatement","src":"8260:33:8"}]},"id":1508,"nodeType":"IfStatement","src":"7886:418:8","trueBody":{"id":1501,"nodeType":"Block","src":"7899:341:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1486,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"7917:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:8","memberName":"length","nodeType":"MemberAccess","src":"7917:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1498,"nodeType":"IfStatement","src":"7913:286:8","trueBody":{"id":1497,"nodeType":"Block","src":"7941:258:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1492,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"8143:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1491,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"8132:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1490,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1496,"nodeType":"ExpressionStatement","src":"8124:60:8"}]}},{"expression":{"id":1499,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8219:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1484,"id":1500,"nodeType":"Return","src":"8212:17:8"}]}}]},"documentation":{"id":1472,"nodeType":"StructuredDocumentation","src":"7400:277:8","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1510,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:8","nodeType":"FunctionDefinition","parameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1474,"mutability":"mutable","name":"target","nameLocation":"7735:6:8","nodeType":"VariableDeclaration","scope":1510,"src":"7727:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1473,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1476,"mutability":"mutable","name":"success","nameLocation":"7756:7:8","nodeType":"VariableDeclaration","scope":1510,"src":"7751:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1475,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1478,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:8","nodeType":"VariableDeclaration","scope":1510,"src":"7773:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1477,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1480,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:8","nodeType":"VariableDeclaration","scope":1510,"src":"7806:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1479,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:8"},"returnParameters":{"id":1484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1510,"src":"7862:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1482,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:8"},"scope":1555,"src":"7682:628:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1533,"nodeType":"Block","src":"8691:135:8","statements":[{"condition":{"id":1522,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"8705:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1531,"nodeType":"Block","src":"8762:58:8","statements":[{"expression":{"arguments":[{"id":1527,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"8784:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1528,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"8796:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1526,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"8776:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1530,"nodeType":"ExpressionStatement","src":"8776:33:8"}]},"id":1532,"nodeType":"IfStatement","src":"8701:119:8","trueBody":{"id":1525,"nodeType":"Block","src":"8714:42:8","statements":[{"expression":{"id":1523,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"8735:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1521,"id":1524,"nodeType":"Return","src":"8728:17:8"}]}}]},"documentation":{"id":1511,"nodeType":"StructuredDocumentation","src":"8316:210:8","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1534,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:8","nodeType":"FunctionDefinition","parameters":{"id":1518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"success","nameLocation":"8571:7:8","nodeType":"VariableDeclaration","scope":1534,"src":"8566:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1512,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1515,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:8","nodeType":"VariableDeclaration","scope":1534,"src":"8588:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1514,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1517,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:8","nodeType":"VariableDeclaration","scope":1534,"src":"8621:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1516,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:8"},"returnParameters":{"id":1521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1534,"src":"8677:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1519,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:8"},"scope":1555,"src":"8531:295:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1553,"nodeType":"Block","src":"8915:457:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1541,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"8991:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:8","memberName":"length","nodeType":"MemberAccess","src":"8991:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1551,"nodeType":"Block","src":"9321:45:8","statements":[{"expression":{"arguments":[{"id":1548,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"9342:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1547,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1550,"nodeType":"ExpressionStatement","src":"9335:20:8"}]},"id":1552,"nodeType":"IfStatement","src":"8987:379:8","trueBody":{"id":1546,"nodeType":"Block","src":"9014:301:8","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:8","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:8","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:8"},"nodeType":"YulFunctionCall","src":"9213:17:8"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:8","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:8"},"nodeType":"YulFunctionCall","src":"9254:19:8"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:8"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:8"},"nodeType":"YulFunctionCall","src":"9247:44:8"},"nodeType":"YulExpressionStatement","src":"9247:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1536,"isOffset":false,"isSlot":false,"src":"9219:10:8","valueSize":1},{"declaration":1536,"isOffset":false,"isSlot":false,"src":"9262:10:8","valueSize":1}],"id":1545,"nodeType":"InlineAssembly","src":"9163:142:8"}]}}]},"id":1554,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:8","nodeType":"FunctionDefinition","parameters":{"id":1539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1536,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:8","nodeType":"VariableDeclaration","scope":1554,"src":"8849:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1535,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1538,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:8","nodeType":"VariableDeclaration","scope":1554,"src":"8874:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1537,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:8"},"returnParameters":{"id":1540,"nodeType":"ParameterList","parameters":[],"src":"8915:0:8"},"scope":1555,"src":"8832:540:8","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1556,"src":"194:9180:8","usedErrors":[]}],"src":"101:9274:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[1606],"Initializable":[1088]},"id":1607,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1557,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1607,"sourceUnit":1089,"src":"125:63:9","symbolAliases":[{"foreign":{"id":1558,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"133:13:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1561,"name":"Initializable","nameLocations":["727:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":1088,"src":"727:13:9"},"id":1562,"nodeType":"InheritanceSpecifier","src":"727:13:9"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1560,"nodeType":"StructuredDocumentation","src":"190:496:9","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1606,"linearizedBaseContracts":[1606,1088],"name":"ContextUpgradeable","nameLocation":"705:18:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1567,"nodeType":"Block","src":"799:7:9","statements":[]},"id":1568,"implemented":true,"kind":"function","modifiers":[{"id":1565,"kind":"modifierInvocation","modifierName":{"id":1564,"name":"onlyInitializing","nameLocations":["782:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1033,"src":"782:16:9"},"nodeType":"ModifierInvocation","src":"782:16:9"}],"name":"__Context_init","nameLocation":"756:14:9","nodeType":"FunctionDefinition","parameters":{"id":1563,"nodeType":"ParameterList","parameters":[],"src":"770:2:9"},"returnParameters":{"id":1566,"nodeType":"ParameterList","parameters":[],"src":"799:0:9"},"scope":1606,"src":"747:59:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1573,"nodeType":"Block","src":"874:7:9","statements":[]},"id":1574,"implemented":true,"kind":"function","modifiers":[{"id":1571,"kind":"modifierInvocation","modifierName":{"id":1570,"name":"onlyInitializing","nameLocations":["857:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1033,"src":"857:16:9"},"nodeType":"ModifierInvocation","src":"857:16:9"}],"name":"__Context_init_unchained","nameLocation":"821:24:9","nodeType":"FunctionDefinition","parameters":{"id":1569,"nodeType":"ParameterList","parameters":[],"src":"845:2:9"},"returnParameters":{"id":1572,"nodeType":"ParameterList","parameters":[],"src":"874:0:9"},"scope":1606,"src":"812:69:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1582,"nodeType":"Block","src":"948:34:9","statements":[{"expression":{"expression":{"id":1579,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"965:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"969:6:9","memberName":"sender","nodeType":"MemberAccess","src":"965:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1578,"id":1581,"nodeType":"Return","src":"958:17:9"}]},"id":1583,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"895:10:9","nodeType":"FunctionDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[],"src":"905:2:9"},"returnParameters":{"id":1578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1577,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1583,"src":"939:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1576,"name":"address","nodeType":"ElementaryTypeName","src":"939:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"938:9:9"},"scope":1606,"src":"886:96:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1591,"nodeType":"Block","src":"1055:32:9","statements":[{"expression":{"expression":{"id":1588,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1072:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1076:4:9","memberName":"data","nodeType":"MemberAccess","src":"1072:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1587,"id":1590,"nodeType":"Return","src":"1065:15:9"}]},"id":1592,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"997:8:9","nodeType":"FunctionDefinition","parameters":{"id":1584,"nodeType":"ParameterList","parameters":[],"src":"1005:2:9"},"returnParameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1592,"src":"1039:14:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1585,"name":"bytes","nodeType":"ElementaryTypeName","src":"1039:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1038:16:9"},"scope":1606,"src":"988:99:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1599,"nodeType":"Block","src":"1165:25:9","statements":[{"expression":{"hexValue":"30","id":1597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1596,"id":1598,"nodeType":"Return","src":"1175:8:9"}]},"id":1600,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"1102:20:9","nodeType":"FunctionDefinition","parameters":{"id":1593,"nodeType":"ParameterList","parameters":[],"src":"1122:2:9"},"returnParameters":{"id":1596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1600,"src":"1156:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1594,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1155:9:9"},"scope":1606,"src":"1093:97:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1601,"nodeType":"StructuredDocumentation","src":"1196:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1605,"mutability":"mutable","name":"__gap","nameLocation":"1475:5:9","nodeType":"VariableDeclaration","scope":1606,"src":"1455:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1602,"name":"uint256","nodeType":"ElementaryTypeName","src":"1455:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1604,"length":{"hexValue":"3530","id":1603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1463:2:9","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1455:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1607,"src":"687:796:9","usedErrors":[]}],"src":"101:1383:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[1716]},"id":1717,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1608,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1609,"nodeType":"StructuredDocumentation","src":"218:1201:10","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":1716,"linearizedBaseContracts":[1716],"name":"StorageSlotUpgradeable","nameLocation":"1428:22:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":1612,"members":[{"constant":false,"id":1611,"mutability":"mutable","name":"value","nameLocation":"1494:5:10","nodeType":"VariableDeclaration","scope":1612,"src":"1486:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1610,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1464:11:10","nodeType":"StructDefinition","scope":1716,"src":"1457:49:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":1615,"members":[{"constant":false,"id":1614,"mutability":"mutable","name":"value","nameLocation":"1546:5:10","nodeType":"VariableDeclaration","scope":1615,"src":"1541:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1613,"name":"bool","nodeType":"ElementaryTypeName","src":"1541:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1519:11:10","nodeType":"StructDefinition","scope":1716,"src":"1512:46:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":1618,"members":[{"constant":false,"id":1617,"mutability":"mutable","name":"value","nameLocation":"1601:5:10","nodeType":"VariableDeclaration","scope":1618,"src":"1593:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1593:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1571:11:10","nodeType":"StructDefinition","scope":1716,"src":"1564:49:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":1621,"members":[{"constant":false,"id":1620,"mutability":"mutable","name":"value","nameLocation":"1656:5:10","nodeType":"VariableDeclaration","scope":1621,"src":"1648:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1619,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1626:11:10","nodeType":"StructDefinition","scope":1716,"src":"1619:49:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.StringSlot","id":1624,"members":[{"constant":false,"id":1623,"mutability":"mutable","name":"value","nameLocation":"1709:5:10","nodeType":"VariableDeclaration","scope":1624,"src":"1702:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1622,"name":"string","nodeType":"ElementaryTypeName","src":"1702:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1681:10:10","nodeType":"StructDefinition","scope":1716,"src":"1674:47:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BytesSlot","id":1627,"members":[{"constant":false,"id":1626,"mutability":"mutable","name":"value","nameLocation":"1760:5:10","nodeType":"VariableDeclaration","scope":1627,"src":"1754:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1625,"name":"bytes","nodeType":"ElementaryTypeName","src":"1754:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1734:9:10","nodeType":"StructDefinition","scope":1716,"src":"1727:45:10","visibility":"public"},{"body":{"id":1637,"nodeType":"Block","src":"1954:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"2016:38:10","statements":[{"nodeType":"YulAssignment","src":"2030:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"2040:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2030:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1634,"isOffset":false,"isSlot":true,"src":"2030:6:10","suffix":"slot","valueSize":1},{"declaration":1630,"isOffset":false,"isSlot":false,"src":"2040:4:10","valueSize":1}],"id":1636,"nodeType":"InlineAssembly","src":"2007:47:10"}]},"documentation":{"id":1628,"nodeType":"StructuredDocumentation","src":"1778:87:10","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1638,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1879:14:10","nodeType":"FunctionDefinition","parameters":{"id":1631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1630,"mutability":"mutable","name":"slot","nameLocation":"1902:4:10","nodeType":"VariableDeclaration","scope":1638,"src":"1894:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1629,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1894:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1893:14:10"},"returnParameters":{"id":1635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1634,"mutability":"mutable","name":"r","nameLocation":"1951:1:10","nodeType":"VariableDeclaration","scope":1638,"src":"1931:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1612_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":1633,"nodeType":"UserDefinedTypeName","pathNode":{"id":1632,"name":"AddressSlot","nameLocations":["1931:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1612,"src":"1931:11:10"},"referencedDeclaration":1612,"src":"1931:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1612_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1930:23:10"},"scope":1716,"src":"1870:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1648,"nodeType":"Block","src":"2242:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"2304:38:10","statements":[{"nodeType":"YulAssignment","src":"2318:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"2328:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2318:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1645,"isOffset":false,"isSlot":true,"src":"2318:6:10","suffix":"slot","valueSize":1},{"declaration":1641,"isOffset":false,"isSlot":false,"src":"2328:4:10","valueSize":1}],"id":1647,"nodeType":"InlineAssembly","src":"2295:47:10"}]},"documentation":{"id":1639,"nodeType":"StructuredDocumentation","src":"2066:87:10","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1649,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2167:14:10","nodeType":"FunctionDefinition","parameters":{"id":1642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"slot","nameLocation":"2190:4:10","nodeType":"VariableDeclaration","scope":1649,"src":"2182:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1640,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2182:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2181:14:10"},"returnParameters":{"id":1646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1645,"mutability":"mutable","name":"r","nameLocation":"2239:1:10","nodeType":"VariableDeclaration","scope":1649,"src":"2219:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1615_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":1644,"nodeType":"UserDefinedTypeName","pathNode":{"id":1643,"name":"BooleanSlot","nameLocations":["2219:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1615,"src":"2219:11:10"},"referencedDeclaration":1615,"src":"2219:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1615_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"2218:23:10"},"scope":1716,"src":"2158:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1659,"nodeType":"Block","src":"2530:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"2592:38:10","statements":[{"nodeType":"YulAssignment","src":"2606:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"2616:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2606:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1656,"isOffset":false,"isSlot":true,"src":"2606:6:10","suffix":"slot","valueSize":1},{"declaration":1652,"isOffset":false,"isSlot":false,"src":"2616:4:10","valueSize":1}],"id":1658,"nodeType":"InlineAssembly","src":"2583:47:10"}]},"documentation":{"id":1650,"nodeType":"StructuredDocumentation","src":"2354:87:10","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1660,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2455:14:10","nodeType":"FunctionDefinition","parameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1652,"mutability":"mutable","name":"slot","nameLocation":"2478:4:10","nodeType":"VariableDeclaration","scope":1660,"src":"2470:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2470:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2469:14:10"},"returnParameters":{"id":1657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1656,"mutability":"mutable","name":"r","nameLocation":"2527:1:10","nodeType":"VariableDeclaration","scope":1660,"src":"2507:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1618_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":1655,"nodeType":"UserDefinedTypeName","pathNode":{"id":1654,"name":"Bytes32Slot","nameLocations":["2507:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1618,"src":"2507:11:10"},"referencedDeclaration":1618,"src":"2507:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1618_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2506:23:10"},"scope":1716,"src":"2446:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1670,"nodeType":"Block","src":"2818:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"2880:38:10","statements":[{"nodeType":"YulAssignment","src":"2894:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"2904:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2894:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1667,"isOffset":false,"isSlot":true,"src":"2894:6:10","suffix":"slot","valueSize":1},{"declaration":1663,"isOffset":false,"isSlot":false,"src":"2904:4:10","valueSize":1}],"id":1669,"nodeType":"InlineAssembly","src":"2871:47:10"}]},"documentation":{"id":1661,"nodeType":"StructuredDocumentation","src":"2642:87:10","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1671,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2743:14:10","nodeType":"FunctionDefinition","parameters":{"id":1664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1663,"mutability":"mutable","name":"slot","nameLocation":"2766:4:10","nodeType":"VariableDeclaration","scope":1671,"src":"2758:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1662,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2758:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2757:14:10"},"returnParameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1667,"mutability":"mutable","name":"r","nameLocation":"2815:1:10","nodeType":"VariableDeclaration","scope":1671,"src":"2795:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1621_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":1666,"nodeType":"UserDefinedTypeName","pathNode":{"id":1665,"name":"Uint256Slot","nameLocations":["2795:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1621,"src":"2795:11:10"},"referencedDeclaration":1621,"src":"2795:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1621_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2794:23:10"},"scope":1716,"src":"2734:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1681,"nodeType":"Block","src":"3103:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"3165:38:10","statements":[{"nodeType":"YulAssignment","src":"3179:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"3189:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3179:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1678,"isOffset":false,"isSlot":true,"src":"3179:6:10","suffix":"slot","valueSize":1},{"declaration":1674,"isOffset":false,"isSlot":false,"src":"3189:4:10","valueSize":1}],"id":1680,"nodeType":"InlineAssembly","src":"3156:47:10"}]},"documentation":{"id":1672,"nodeType":"StructuredDocumentation","src":"2930:86:10","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":1682,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3030:13:10","nodeType":"FunctionDefinition","parameters":{"id":1675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1674,"mutability":"mutable","name":"slot","nameLocation":"3052:4:10","nodeType":"VariableDeclaration","scope":1682,"src":"3044:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1673,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3044:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3043:14:10"},"returnParameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"r","nameLocation":"3100:1:10","nodeType":"VariableDeclaration","scope":1682,"src":"3081:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1624_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":1677,"nodeType":"UserDefinedTypeName","pathNode":{"id":1676,"name":"StringSlot","nameLocations":["3081:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":1624,"src":"3081:10:10"},"referencedDeclaration":1624,"src":"3081:10:10","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1624_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3080:22:10"},"scope":1716,"src":"3021:188:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1692,"nodeType":"Block","src":"3411:112:10","statements":[{"AST":{"nodeType":"YulBlock","src":"3473:44:10","statements":[{"nodeType":"YulAssignment","src":"3487:20:10","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3497:10:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3487:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1689,"isOffset":false,"isSlot":true,"src":"3487:6:10","suffix":"slot","valueSize":1},{"declaration":1685,"isOffset":false,"isSlot":true,"src":"3497:10:10","suffix":"slot","valueSize":1}],"id":1691,"nodeType":"InlineAssembly","src":"3464:53:10"}]},"documentation":{"id":1683,"nodeType":"StructuredDocumentation","src":"3215:101:10","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1693,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3330:13:10","nodeType":"FunctionDefinition","parameters":{"id":1686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1685,"mutability":"mutable","name":"store","nameLocation":"3359:5:10","nodeType":"VariableDeclaration","scope":1693,"src":"3344:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1684,"name":"string","nodeType":"ElementaryTypeName","src":"3344:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3343:22:10"},"returnParameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1689,"mutability":"mutable","name":"r","nameLocation":"3408:1:10","nodeType":"VariableDeclaration","scope":1693,"src":"3389:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1624_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":1688,"nodeType":"UserDefinedTypeName","pathNode":{"id":1687,"name":"StringSlot","nameLocations":["3389:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":1624,"src":"3389:10:10"},"referencedDeclaration":1624,"src":"3389:10:10","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1624_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3388:22:10"},"scope":1716,"src":"3321:202:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1703,"nodeType":"Block","src":"3699:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"3761:38:10","statements":[{"nodeType":"YulAssignment","src":"3775:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"3785:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3775:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1700,"isOffset":false,"isSlot":true,"src":"3775:6:10","suffix":"slot","valueSize":1},{"declaration":1696,"isOffset":false,"isSlot":false,"src":"3785:4:10","valueSize":1}],"id":1702,"nodeType":"InlineAssembly","src":"3752:47:10"}]},"documentation":{"id":1694,"nodeType":"StructuredDocumentation","src":"3529:85:10","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":1704,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3628:12:10","nodeType":"FunctionDefinition","parameters":{"id":1697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1696,"mutability":"mutable","name":"slot","nameLocation":"3649:4:10","nodeType":"VariableDeclaration","scope":1704,"src":"3641:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1695,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3641:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3640:14:10"},"returnParameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"r","nameLocation":"3696:1:10","nodeType":"VariableDeclaration","scope":1704,"src":"3678:19:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1627_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":1699,"nodeType":"UserDefinedTypeName","pathNode":{"id":1698,"name":"BytesSlot","nameLocations":["3678:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":1627,"src":"3678:9:10"},"referencedDeclaration":1627,"src":"3678:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1627_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3677:21:10"},"scope":1716,"src":"3619:186:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1714,"nodeType":"Block","src":"4002:112:10","statements":[{"AST":{"nodeType":"YulBlock","src":"4064:44:10","statements":[{"nodeType":"YulAssignment","src":"4078:20:10","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"4088:10:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"4078:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1711,"isOffset":false,"isSlot":true,"src":"4078:6:10","suffix":"slot","valueSize":1},{"declaration":1707,"isOffset":false,"isSlot":true,"src":"4088:10:10","suffix":"slot","valueSize":1}],"id":1713,"nodeType":"InlineAssembly","src":"4055:53:10"}]},"documentation":{"id":1705,"nodeType":"StructuredDocumentation","src":"3811:99:10","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1715,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3924:12:10","nodeType":"FunctionDefinition","parameters":{"id":1708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1707,"mutability":"mutable","name":"store","nameLocation":"3951:5:10","nodeType":"VariableDeclaration","scope":1715,"src":"3937:19:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1706,"name":"bytes","nodeType":"ElementaryTypeName","src":"3937:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3936:21:10"},"returnParameters":{"id":1712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1711,"mutability":"mutable","name":"r","nameLocation":"3999:1:10","nodeType":"VariableDeclaration","scope":1715,"src":"3981:19:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1627_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":1710,"nodeType":"UserDefinedTypeName","pathNode":{"id":1709,"name":"BytesSlot","nameLocations":["3981:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":1627,"src":"3981:9:10"},"referencedDeclaration":1627,"src":"3981:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1627_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3980:21:10"},"scope":1716,"src":"3915:199:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1717,"src":"1420:2696:10","usedErrors":[]}],"src":"193:3924:10"},"id":10},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","exportedSymbols":{"IERC1155":[1838],"IERC165":[1990]},"id":1839,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1718,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:11"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1719,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1839,"sourceUnit":1991,"src":"135:47:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1721,"name":"IERC165","nameLocations":["372:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"372:7:11"},"id":1722,"nodeType":"InheritanceSpecifier","src":"372:7:11"}],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":1720,"nodeType":"StructuredDocumentation","src":"184:165:11","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":1838,"linearizedBaseContracts":[1838,1990],"name":"IERC1155","nameLocation":"360:8:11","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1723,"nodeType":"StructuredDocumentation","src":"386:121:11","text":" @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":1735,"name":"TransferSingle","nameLocation":"518:14:11","nodeType":"EventDefinition","parameters":{"id":1734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1725,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"549:8:11","nodeType":"VariableDeclaration","scope":1735,"src":"533:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1724,"name":"address","nodeType":"ElementaryTypeName","src":"533:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1727,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"575:4:11","nodeType":"VariableDeclaration","scope":1735,"src":"559:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1726,"name":"address","nodeType":"ElementaryTypeName","src":"559:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1729,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"597:2:11","nodeType":"VariableDeclaration","scope":1735,"src":"581:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1728,"name":"address","nodeType":"ElementaryTypeName","src":"581:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1731,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"609:2:11","nodeType":"VariableDeclaration","scope":1735,"src":"601:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1730,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1733,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"621:5:11","nodeType":"VariableDeclaration","scope":1735,"src":"613:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1732,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"532:95:11"},"src":"512:116:11"},{"anonymous":false,"documentation":{"id":1736,"nodeType":"StructuredDocumentation","src":"634:144:11","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":1750,"name":"TransferBatch","nameLocation":"789:13:11","nodeType":"EventDefinition","parameters":{"id":1749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1738,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"828:8:11","nodeType":"VariableDeclaration","scope":1750,"src":"812:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1737,"name":"address","nodeType":"ElementaryTypeName","src":"812:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1740,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"862:4:11","nodeType":"VariableDeclaration","scope":1750,"src":"846:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1739,"name":"address","nodeType":"ElementaryTypeName","src":"846:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1742,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"892:2:11","nodeType":"VariableDeclaration","scope":1750,"src":"876:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1741,"name":"address","nodeType":"ElementaryTypeName","src":"876:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1745,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"914:3:11","nodeType":"VariableDeclaration","scope":1750,"src":"904:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1743,"name":"uint256","nodeType":"ElementaryTypeName","src":"904:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1744,"nodeType":"ArrayTypeName","src":"904:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1748,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"937:6:11","nodeType":"VariableDeclaration","scope":1750,"src":"927:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1747,"nodeType":"ArrayTypeName","src":"927:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"802:147:11"},"src":"783:167:11"},{"anonymous":false,"documentation":{"id":1751,"nodeType":"StructuredDocumentation","src":"956:147:11","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1759,"name":"ApprovalForAll","nameLocation":"1114:14:11","nodeType":"EventDefinition","parameters":{"id":1758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1753,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1145:7:11","nodeType":"VariableDeclaration","scope":1759,"src":"1129:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1752,"name":"address","nodeType":"ElementaryTypeName","src":"1129:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1755,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1170:8:11","nodeType":"VariableDeclaration","scope":1759,"src":"1154:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1754,"name":"address","nodeType":"ElementaryTypeName","src":"1154:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1757,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1185:8:11","nodeType":"VariableDeclaration","scope":1759,"src":"1180:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1756,"name":"bool","nodeType":"ElementaryTypeName","src":"1180:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1128:66:11"},"src":"1108:87:11"},{"anonymous":false,"documentation":{"id":1760,"nodeType":"StructuredDocumentation","src":"1201:343:11","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":1766,"name":"URI","nameLocation":"1555:3:11","nodeType":"EventDefinition","parameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1762,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1566:5:11","nodeType":"VariableDeclaration","scope":1766,"src":"1559:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1761,"name":"string","nodeType":"ElementaryTypeName","src":"1559:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1764,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1589:2:11","nodeType":"VariableDeclaration","scope":1766,"src":"1573:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1763,"name":"uint256","nodeType":"ElementaryTypeName","src":"1573:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1558:34:11"},"src":"1549:44:11"},{"documentation":{"id":1767,"nodeType":"StructuredDocumentation","src":"1599:173:11","text":" @dev Returns the amount of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":1776,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1786:9:11","nodeType":"FunctionDefinition","parameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1769,"mutability":"mutable","name":"account","nameLocation":"1804:7:11","nodeType":"VariableDeclaration","scope":1776,"src":"1796:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1768,"name":"address","nodeType":"ElementaryTypeName","src":"1796:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1771,"mutability":"mutable","name":"id","nameLocation":"1821:2:11","nodeType":"VariableDeclaration","scope":1776,"src":"1813:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1770,"name":"uint256","nodeType":"ElementaryTypeName","src":"1813:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1795:29:11"},"returnParameters":{"id":1775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1776,"src":"1848:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1773,"name":"uint256","nodeType":"ElementaryTypeName","src":"1848:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1847:9:11"},"scope":1838,"src":"1777:80:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1777,"nodeType":"StructuredDocumentation","src":"1863:188:11","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":1789,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2065:14:11","nodeType":"FunctionDefinition","parameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1780,"mutability":"mutable","name":"accounts","nameLocation":"2099:8:11","nodeType":"VariableDeclaration","scope":1789,"src":"2080:27:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1778,"name":"address","nodeType":"ElementaryTypeName","src":"2080:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1779,"nodeType":"ArrayTypeName","src":"2080:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1783,"mutability":"mutable","name":"ids","nameLocation":"2128:3:11","nodeType":"VariableDeclaration","scope":1789,"src":"2109:22:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1781,"name":"uint256","nodeType":"ElementaryTypeName","src":"2109:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1782,"nodeType":"ArrayTypeName","src":"2109:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2079:53:11"},"returnParameters":{"id":1788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1787,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1789,"src":"2180:16:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1785,"name":"uint256","nodeType":"ElementaryTypeName","src":"2180:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1786,"nodeType":"ArrayTypeName","src":"2180:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2179:18:11"},"scope":1838,"src":"2056:142:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1790,"nodeType":"StructuredDocumentation","src":"2204:248:11","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":1797,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2466:17:11","nodeType":"FunctionDefinition","parameters":{"id":1795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1792,"mutability":"mutable","name":"operator","nameLocation":"2492:8:11","nodeType":"VariableDeclaration","scope":1797,"src":"2484:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1791,"name":"address","nodeType":"ElementaryTypeName","src":"2484:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1794,"mutability":"mutable","name":"approved","nameLocation":"2507:8:11","nodeType":"VariableDeclaration","scope":1797,"src":"2502:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1793,"name":"bool","nodeType":"ElementaryTypeName","src":"2502:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2483:33:11"},"returnParameters":{"id":1796,"nodeType":"ParameterList","parameters":[],"src":"2525:0:11"},"scope":1838,"src":"2457:69:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1798,"nodeType":"StructuredDocumentation","src":"2532:135:11","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":1807,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2681:16:11","nodeType":"FunctionDefinition","parameters":{"id":1803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1800,"mutability":"mutable","name":"account","nameLocation":"2706:7:11","nodeType":"VariableDeclaration","scope":1807,"src":"2698:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1799,"name":"address","nodeType":"ElementaryTypeName","src":"2698:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1802,"mutability":"mutable","name":"operator","nameLocation":"2723:8:11","nodeType":"VariableDeclaration","scope":1807,"src":"2715:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1801,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2697:35:11"},"returnParameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1807,"src":"2756:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1804,"name":"bool","nodeType":"ElementaryTypeName","src":"2756:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2755:6:11"},"scope":1838,"src":"2672:90:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1808,"nodeType":"StructuredDocumentation","src":"2768:556:11","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":1821,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3338:16:11","nodeType":"FunctionDefinition","parameters":{"id":1819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1810,"mutability":"mutable","name":"from","nameLocation":"3372:4:11","nodeType":"VariableDeclaration","scope":1821,"src":"3364:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1809,"name":"address","nodeType":"ElementaryTypeName","src":"3364:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1812,"mutability":"mutable","name":"to","nameLocation":"3394:2:11","nodeType":"VariableDeclaration","scope":1821,"src":"3386:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1814,"mutability":"mutable","name":"id","nameLocation":"3414:2:11","nodeType":"VariableDeclaration","scope":1821,"src":"3406:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1813,"name":"uint256","nodeType":"ElementaryTypeName","src":"3406:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1816,"mutability":"mutable","name":"amount","nameLocation":"3434:6:11","nodeType":"VariableDeclaration","scope":1821,"src":"3426:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1815,"name":"uint256","nodeType":"ElementaryTypeName","src":"3426:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1818,"mutability":"mutable","name":"data","nameLocation":"3465:4:11","nodeType":"VariableDeclaration","scope":1821,"src":"3450:19:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1817,"name":"bytes","nodeType":"ElementaryTypeName","src":"3450:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3354:121:11"},"returnParameters":{"id":1820,"nodeType":"ParameterList","parameters":[],"src":"3484:0:11"},"scope":1838,"src":"3329:156:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1822,"nodeType":"StructuredDocumentation","src":"3491:390:11","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":1837,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3895:21:11","nodeType":"FunctionDefinition","parameters":{"id":1835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1824,"mutability":"mutable","name":"from","nameLocation":"3934:4:11","nodeType":"VariableDeclaration","scope":1837,"src":"3926:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1823,"name":"address","nodeType":"ElementaryTypeName","src":"3926:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1826,"mutability":"mutable","name":"to","nameLocation":"3956:2:11","nodeType":"VariableDeclaration","scope":1837,"src":"3948:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1825,"name":"address","nodeType":"ElementaryTypeName","src":"3948:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1829,"mutability":"mutable","name":"ids","nameLocation":"3987:3:11","nodeType":"VariableDeclaration","scope":1837,"src":"3968:22:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1827,"name":"uint256","nodeType":"ElementaryTypeName","src":"3968:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1828,"nodeType":"ArrayTypeName","src":"3968:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1832,"mutability":"mutable","name":"amounts","nameLocation":"4019:7:11","nodeType":"VariableDeclaration","scope":1837,"src":"4000:26:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1830,"name":"uint256","nodeType":"ElementaryTypeName","src":"4000:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1831,"nodeType":"ArrayTypeName","src":"4000:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1834,"mutability":"mutable","name":"data","nameLocation":"4051:4:11","nodeType":"VariableDeclaration","scope":1837,"src":"4036:19:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1833,"name":"bytes","nodeType":"ElementaryTypeName","src":"4036:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3916:145:11"},"returnParameters":{"id":1836,"nodeType":"ParameterList","parameters":[],"src":"4070:0:11"},"scope":1838,"src":"3886:185:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1839,"src":"350:3723:11","usedErrors":[]}],"src":"110:3964:11"},"id":11},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1990],"IERC721":[1954]},"id":1955,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1840,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1841,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1955,"sourceUnit":1991,"src":"133:47:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1843,"name":"IERC165","nameLocations":["271:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"271:7:12"},"id":1844,"nodeType":"InheritanceSpecifier","src":"271:7:12"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1842,"nodeType":"StructuredDocumentation","src":"182:67:12","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1954,"linearizedBaseContracts":[1954,1990],"name":"IERC721","nameLocation":"260:7:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1845,"nodeType":"StructuredDocumentation","src":"285:88:12","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1853,"name":"Transfer","nameLocation":"384:8:12","nodeType":"EventDefinition","parameters":{"id":1852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1847,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:12","nodeType":"VariableDeclaration","scope":1853,"src":"393:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1846,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1849,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:12","nodeType":"VariableDeclaration","scope":1853,"src":"415:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1848,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1851,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:12","nodeType":"VariableDeclaration","scope":1853,"src":"435:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1850,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:12"},"src":"378:82:12"},{"anonymous":false,"documentation":{"id":1854,"nodeType":"StructuredDocumentation","src":"466:94:12","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1862,"name":"Approval","nameLocation":"571:8:12","nodeType":"EventDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1856,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:12","nodeType":"VariableDeclaration","scope":1862,"src":"580:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1855,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1858,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:12","nodeType":"VariableDeclaration","scope":1862,"src":"603:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1857,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1860,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:12","nodeType":"VariableDeclaration","scope":1862,"src":"629:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1859,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:12"},"src":"565:89:12"},{"anonymous":false,"documentation":{"id":1863,"nodeType":"StructuredDocumentation","src":"660:117:12","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1871,"name":"ApprovalForAll","nameLocation":"788:14:12","nodeType":"EventDefinition","parameters":{"id":1870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1865,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:12","nodeType":"VariableDeclaration","scope":1871,"src":"803:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1864,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1867,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:12","nodeType":"VariableDeclaration","scope":1871,"src":"826:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1866,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1869,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:12","nodeType":"VariableDeclaration","scope":1871,"src":"852:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1868,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:12"},"src":"782:85:12"},{"documentation":{"id":1872,"nodeType":"StructuredDocumentation","src":"873:76:12","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1879,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:12","nodeType":"FunctionDefinition","parameters":{"id":1875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1874,"mutability":"mutable","name":"owner","nameLocation":"981:5:12","nodeType":"VariableDeclaration","scope":1879,"src":"973:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1873,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:12"},"returnParameters":{"id":1878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1877,"mutability":"mutable","name":"balance","nameLocation":"1019:7:12","nodeType":"VariableDeclaration","scope":1879,"src":"1011:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1876,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:12"},"scope":1954,"src":"954:74:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1880,"nodeType":"StructuredDocumentation","src":"1034:131:12","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1887,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:12","nodeType":"FunctionDefinition","parameters":{"id":1883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1882,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:12","nodeType":"VariableDeclaration","scope":1887,"src":"1187:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1881,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:12"},"returnParameters":{"id":1886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1885,"mutability":"mutable","name":"owner","nameLocation":"1235:5:12","nodeType":"VariableDeclaration","scope":1887,"src":"1227:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1884,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:12"},"scope":1954,"src":"1170:72:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1888,"nodeType":"StructuredDocumentation","src":"1248:556:12","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1899,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:12","nodeType":"FunctionDefinition","parameters":{"id":1897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1890,"mutability":"mutable","name":"from","nameLocation":"1852:4:12","nodeType":"VariableDeclaration","scope":1899,"src":"1844:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1889,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1892,"mutability":"mutable","name":"to","nameLocation":"1874:2:12","nodeType":"VariableDeclaration","scope":1899,"src":"1866:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1891,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1894,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:12","nodeType":"VariableDeclaration","scope":1899,"src":"1886:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1893,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1896,"mutability":"mutable","name":"data","nameLocation":"1926:4:12","nodeType":"VariableDeclaration","scope":1899,"src":"1911:19:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1895,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:12"},"returnParameters":{"id":1898,"nodeType":"ParameterList","parameters":[],"src":"1945:0:12"},"scope":1954,"src":"1809:137:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"1952:687:12","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1909,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:12","nodeType":"FunctionDefinition","parameters":{"id":1907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"from","nameLocation":"2687:4:12","nodeType":"VariableDeclaration","scope":1909,"src":"2679:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1901,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1904,"mutability":"mutable","name":"to","nameLocation":"2709:2:12","nodeType":"VariableDeclaration","scope":1909,"src":"2701:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1903,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1906,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:12","nodeType":"VariableDeclaration","scope":1909,"src":"2721:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1905,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:12"},"returnParameters":{"id":1908,"nodeType":"ParameterList","parameters":[],"src":"2751:0:12"},"scope":1954,"src":"2644:108:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1910,"nodeType":"StructuredDocumentation","src":"2758:732:12","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1919,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:12","nodeType":"FunctionDefinition","parameters":{"id":1917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1912,"mutability":"mutable","name":"from","nameLocation":"3534:4:12","nodeType":"VariableDeclaration","scope":1919,"src":"3526:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1911,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1914,"mutability":"mutable","name":"to","nameLocation":"3556:2:12","nodeType":"VariableDeclaration","scope":1919,"src":"3548:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1913,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1916,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:12","nodeType":"VariableDeclaration","scope":1919,"src":"3568:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1915,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:12"},"returnParameters":{"id":1918,"nodeType":"ParameterList","parameters":[],"src":"3598:0:12"},"scope":1954,"src":"3495:104:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1920,"nodeType":"StructuredDocumentation","src":"3605:452:12","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1927,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:12","nodeType":"FunctionDefinition","parameters":{"id":1925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1922,"mutability":"mutable","name":"to","nameLocation":"4087:2:12","nodeType":"VariableDeclaration","scope":1927,"src":"4079:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1921,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1924,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:12","nodeType":"VariableDeclaration","scope":1927,"src":"4091:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1923,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:12"},"returnParameters":{"id":1926,"nodeType":"ParameterList","parameters":[],"src":"4116:0:12"},"scope":1954,"src":"4062:55:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1928,"nodeType":"StructuredDocumentation","src":"4123:309:12","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1935,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:12","nodeType":"FunctionDefinition","parameters":{"id":1933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"operator","nameLocation":"4472:8:12","nodeType":"VariableDeclaration","scope":1935,"src":"4464:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1929,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1932,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:12","nodeType":"VariableDeclaration","scope":1935,"src":"4482:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1931,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:12"},"returnParameters":{"id":1934,"nodeType":"ParameterList","parameters":[],"src":"4506:0:12"},"scope":1954,"src":"4437:70:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1936,"nodeType":"StructuredDocumentation","src":"4513:139:12","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1943,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:12","nodeType":"FunctionDefinition","parameters":{"id":1939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1938,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:12","nodeType":"VariableDeclaration","scope":1943,"src":"4678:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1937,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:12"},"returnParameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1941,"mutability":"mutable","name":"operator","nameLocation":"4726:8:12","nodeType":"VariableDeclaration","scope":1943,"src":"4718:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1940,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:12"},"scope":1954,"src":"4657:79:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1944,"nodeType":"StructuredDocumentation","src":"4742:138:12","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1953,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:12","nodeType":"FunctionDefinition","parameters":{"id":1949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1946,"mutability":"mutable","name":"owner","nameLocation":"4919:5:12","nodeType":"VariableDeclaration","scope":1953,"src":"4911:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1945,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1948,"mutability":"mutable","name":"operator","nameLocation":"4934:8:12","nodeType":"VariableDeclaration","scope":1953,"src":"4926:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1947,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:12"},"returnParameters":{"id":1952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1951,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1953,"src":"4967:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1950,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:12"},"scope":1954,"src":"4885:88:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1955,"src":"250:4725:12","usedErrors":[]}],"src":"108:4868:12"},"id":12},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1978],"IERC165":[1990]},"id":1979,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1956,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:13"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1957,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1979,"sourceUnit":1991,"src":"124:23:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1959,"name":"IERC165","nameLocations":["754:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"754:7:13"},"id":1960,"nodeType":"InheritanceSpecifier","src":"754:7:13"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1958,"nodeType":"StructuredDocumentation","src":"149:576:13","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1978,"linearizedBaseContracts":[1978,1990],"name":"ERC165","nameLocation":"744:6:13","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1989],"body":{"id":1976,"nodeType":"Block","src":"920:64:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1969,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"937:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1971,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"957:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1990_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1990_$","typeString":"type(contract IERC165)"}],"id":1970,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1990","typeString":"type(contract IERC165)"}},"id":1973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:13","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1968,"id":1975,"nodeType":"Return","src":"930:47:13"}]},"documentation":{"id":1961,"nodeType":"StructuredDocumentation","src":"768:56:13","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1977,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:13","nodeType":"FunctionDefinition","overrides":{"id":1965,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:13"},"parameters":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:13","nodeType":"VariableDeclaration","scope":1977,"src":"856:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1962,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:13"},"returnParameters":{"id":1968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1977,"src":"914:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1966,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:13"},"scope":1978,"src":"829:155:13","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1979,"src":"726:260:13","usedErrors":[]}],"src":"99:888:13"},"id":13},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1990]},"id":1991,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1980,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1981,"nodeType":"StructuredDocumentation","src":"125:279:14","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1990,"linearizedBaseContracts":[1990],"name":"IERC165","nameLocation":"415:7:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1982,"nodeType":"StructuredDocumentation","src":"429:340:14","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1989,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:14","nodeType":"FunctionDefinition","parameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:14","nodeType":"VariableDeclaration","scope":1989,"src":"801:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1983,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:14"},"returnParameters":{"id":1988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1987,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1989,"src":"844:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1986,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:14"},"scope":1990,"src":"774:76:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1991,"src":"405:447:14","usedErrors":[]}],"src":"100:753:14"},"id":14},"contracts/dnssec-oracle/RRUtils.sol":{"ast":{"absolutePath":"contracts/dnssec-oracle/RRUtils.sol","exportedSymbols":{"Buffer":[420],"BytesUtils":[6533],"RRUtils":[3088]},"id":3089,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1992,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"31:23:15"},{"absolutePath":"contracts/utils/BytesUtils.sol","file":"../utils/BytesUtils.sol","id":1993,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3089,"sourceUnit":6534,"src":"56:33:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ensdomains/buffer/contracts/Buffer.sol","file":"@ensdomains/buffer/contracts/Buffer.sol","id":1994,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3089,"sourceUnit":421,"src":"90:49:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"RRUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":1995,"nodeType":"StructuredDocumentation","src":"141:94:15","text":" @dev RRUtils is a library that provides utilities for parsing DNS resource records."},"fullyImplemented":true,"id":3088,"linearizedBaseContracts":[3088],"name":"RRUtils","nameLocation":"244:7:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1997,"libraryName":{"id":1996,"name":"BytesUtils","nameLocations":["264:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":6533,"src":"264:10:15"},"nodeType":"UsingForDirective","src":"258:23:15"},{"global":false,"id":1999,"libraryName":{"id":1998,"name":"Buffer","nameLocations":["292:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":420,"src":"292:6:15"},"nodeType":"UsingForDirective","src":"286:19:15"},{"body":{"id":2046,"nodeType":"Block","src":"688:293:15","statements":[{"assignments":[2010],"declarations":[{"constant":false,"id":2010,"mutability":"mutable","name":"idx","nameLocation":"706:3:15","nodeType":"VariableDeclaration","scope":2046,"src":"698:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2009,"name":"uint256","nodeType":"ElementaryTypeName","src":"698:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2012,"initialValue":{"id":2011,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"712:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"698:20:15"},{"body":{"id":2040,"nodeType":"Block","src":"741:205:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"762:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2016,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"768:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"773:6:15","memberName":"length","nodeType":"MemberAccess","src":"768:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"762:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2014,"name":"assert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-3,"src":"755:6:15","typeDescriptions":{"typeIdentifier":"t_function_assert_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"755:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2020,"nodeType":"ExpressionStatement","src":"755:25:15"},{"assignments":[2022],"declarations":[{"constant":false,"id":2022,"mutability":"mutable","name":"labelLen","nameLocation":"802:8:15","nodeType":"VariableDeclaration","scope":2040,"src":"794:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2021,"name":"uint256","nodeType":"ElementaryTypeName","src":"794:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2027,"initialValue":{"arguments":[{"id":2025,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"828:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2023,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"813:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"818:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"813:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"813:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"794:38:15"},{"expression":{"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2028,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"846:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2029,"name":"labelLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"853:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"864:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"853:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"846:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2033,"nodeType":"ExpressionStatement","src":"846:19:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2034,"name":"labelLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"883:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"895:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"883:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2039,"nodeType":"IfStatement","src":"879:57:15","trueBody":{"id":2038,"nodeType":"Block","src":"898:38:15","statements":[{"id":2037,"nodeType":"Break","src":"916:5:15"}]}}]},"condition":{"hexValue":"74727565","id":2013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"735:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2041,"nodeType":"WhileStatement","src":"728:218:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2042,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"962:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2043,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"968:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"962:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2008,"id":2045,"nodeType":"Return","src":"955:19:15"}]},"documentation":{"id":2000,"nodeType":"StructuredDocumentation","src":"311:263:15","text":" @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\n @param self The byte array to read a name from.\n @param offset The offset to start reading at.\n @return The length of the DNS name at 'offset', in bytes."},"id":2047,"implemented":true,"kind":"function","modifiers":[],"name":"nameLength","nameLocation":"588:10:15","nodeType":"FunctionDefinition","parameters":{"id":2005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"self","nameLocation":"621:4:15","nodeType":"VariableDeclaration","scope":2047,"src":"608:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2001,"name":"bytes","nodeType":"ElementaryTypeName","src":"608:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2004,"mutability":"mutable","name":"offset","nameLocation":"643:6:15","nodeType":"VariableDeclaration","scope":2047,"src":"635:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2003,"name":"uint256","nodeType":"ElementaryTypeName","src":"635:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"598:57:15"},"returnParameters":{"id":2008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2047,"src":"679:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2006,"name":"uint256","nodeType":"ElementaryTypeName","src":"679:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"678:9:15"},"scope":3088,"src":"579:402:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2070,"nodeType":"Block","src":"1327:99:15","statements":[{"assignments":[2058],"declarations":[{"constant":false,"id":2058,"mutability":"mutable","name":"len","nameLocation":"1345:3:15","nodeType":"VariableDeclaration","scope":2070,"src":"1337:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2057,"name":"uint256","nodeType":"ElementaryTypeName","src":"1337:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2063,"initialValue":{"arguments":[{"id":2060,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"1362:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2061,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"1368:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2059,"name":"nameLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"1351:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1351:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1337:38:15"},{"expression":{"arguments":[{"id":2066,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"1407:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2067,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"1415:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2064,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"1392:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1397:9:15","memberName":"substring","nodeType":"MemberAccess","referencedDeclaration":6261,"src":"1392:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1392:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2056,"id":2069,"nodeType":"Return","src":"1385:34:15"}]},"documentation":{"id":2048,"nodeType":"StructuredDocumentation","src":"987:219:15","text":" @dev Returns a DNS format name at the specified offset of self.\n @param self The byte array to read a name from.\n @param offset The offset to start reading at.\n @return ret The name."},"id":2071,"implemented":true,"kind":"function","modifiers":[],"name":"readName","nameLocation":"1220:8:15","nodeType":"FunctionDefinition","parameters":{"id":2053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2050,"mutability":"mutable","name":"self","nameLocation":"1251:4:15","nodeType":"VariableDeclaration","scope":2071,"src":"1238:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2049,"name":"bytes","nodeType":"ElementaryTypeName","src":"1238:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2052,"mutability":"mutable","name":"offset","nameLocation":"1273:6:15","nodeType":"VariableDeclaration","scope":2071,"src":"1265:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2051,"name":"uint256","nodeType":"ElementaryTypeName","src":"1265:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1228:57:15"},"returnParameters":{"id":2056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"ret","nameLocation":"1322:3:15","nodeType":"VariableDeclaration","scope":2071,"src":"1309:16:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2054,"name":"bytes","nodeType":"ElementaryTypeName","src":"1309:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1308:18:15"},"scope":3088,"src":"1211:215:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2120,"nodeType":"Block","src":"1820:316:15","statements":[{"assignments":[2082],"declarations":[{"constant":false,"id":2082,"mutability":"mutable","name":"count","nameLocation":"1838:5:15","nodeType":"VariableDeclaration","scope":2120,"src":"1830:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"1830:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2084,"initialValue":{"hexValue":"30","id":2083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1846:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1830:17:15"},{"body":{"id":2116,"nodeType":"Block","src":"1870:238:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2087,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"1891:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2088,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"1900:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1905:6:15","memberName":"length","nodeType":"MemberAccess","src":"1900:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1891:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2086,"name":"assert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-3,"src":"1884:6:15","typeDescriptions":{"typeIdentifier":"t_function_assert_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1884:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2092,"nodeType":"ExpressionStatement","src":"1884:28:15"},{"assignments":[2094],"declarations":[{"constant":false,"id":2094,"mutability":"mutable","name":"labelLen","nameLocation":"1934:8:15","nodeType":"VariableDeclaration","scope":2116,"src":"1926:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2093,"name":"uint256","nodeType":"ElementaryTypeName","src":"1926:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2099,"initialValue":{"arguments":[{"id":2097,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"1960:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2095,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"1945:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1950:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"1945:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1945:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"1926:41:15"},{"expression":{"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2100,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"1981:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2101,"name":"labelLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"1991:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2002:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1991:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1981:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2105,"nodeType":"ExpressionStatement","src":"1981:22:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2106,"name":"labelLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"2021:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2033:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2021:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2111,"nodeType":"IfStatement","src":"2017:57:15","trueBody":{"id":2110,"nodeType":"Block","src":"2036:38:15","statements":[{"id":2109,"nodeType":"Break","src":"2054:5:15"}]}},{"expression":{"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2112,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"2087:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2096:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2087:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2115,"nodeType":"ExpressionStatement","src":"2087:10:15"}]},"condition":{"hexValue":"74727565","id":2085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1864:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2117,"nodeType":"WhileStatement","src":"1857:251:15"},{"expression":{"id":2118,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"2124:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2080,"id":2119,"nodeType":"Return","src":"2117:12:15"}]},"documentation":{"id":2072,"nodeType":"StructuredDocumentation","src":"1432:274:15","text":" @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\n @param self The byte array to read a name from.\n @param offset The offset to start reading at.\n @return The number of labels in the DNS name at 'offset', in bytes."},"id":2121,"implemented":true,"kind":"function","modifiers":[],"name":"labelCount","nameLocation":"1720:10:15","nodeType":"FunctionDefinition","parameters":{"id":2077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2074,"mutability":"mutable","name":"self","nameLocation":"1753:4:15","nodeType":"VariableDeclaration","scope":2121,"src":"1740:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2073,"name":"bytes","nodeType":"ElementaryTypeName","src":"1740:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2076,"mutability":"mutable","name":"offset","nameLocation":"1775:6:15","nodeType":"VariableDeclaration","scope":2121,"src":"1767:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2075,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1730:57:15"},"returnParameters":{"id":2080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2121,"src":"1811:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2078,"name":"uint256","nodeType":"ElementaryTypeName","src":"1811:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1810:9:15"},"scope":3088,"src":"1711:425:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":2124,"mutability":"constant","name":"RRSIG_TYPE","nameLocation":"2159:10:15","nodeType":"VariableDeclaration","scope":3088,"src":"2142:31:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2122,"name":"uint256","nodeType":"ElementaryTypeName","src":"2142:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":2123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2172:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":2127,"mutability":"constant","name":"RRSIG_ALGORITHM","nameLocation":"2196:15:15","nodeType":"VariableDeclaration","scope":3088,"src":"2179:36:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2125,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":2126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2214:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":2130,"mutability":"constant","name":"RRSIG_LABELS","nameLocation":"2238:12:15","nodeType":"VariableDeclaration","scope":3088,"src":"2221:33:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2128,"name":"uint256","nodeType":"ElementaryTypeName","src":"2221:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":2129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2253:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":true,"id":2133,"mutability":"constant","name":"RRSIG_TTL","nameLocation":"2277:9:15","nodeType":"VariableDeclaration","scope":3088,"src":"2260:30:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2131,"name":"uint256","nodeType":"ElementaryTypeName","src":"2260:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"34","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2289:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"},{"constant":true,"id":2136,"mutability":"constant","name":"RRSIG_EXPIRATION","nameLocation":"2313:16:15","nodeType":"VariableDeclaration","scope":3088,"src":"2296:37:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2134,"name":"uint256","nodeType":"ElementaryTypeName","src":"2296:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"38","id":2135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2332:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"visibility":"internal"},{"constant":true,"id":2139,"mutability":"constant","name":"RRSIG_INCEPTION","nameLocation":"2356:15:15","nodeType":"VariableDeclaration","scope":3088,"src":"2339:37:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2137,"name":"uint256","nodeType":"ElementaryTypeName","src":"2339:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3132","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2374:2:15","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"visibility":"internal"},{"constant":true,"id":2142,"mutability":"constant","name":"RRSIG_KEY_TAG","nameLocation":"2399:13:15","nodeType":"VariableDeclaration","scope":3088,"src":"2382:35:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2140,"name":"uint256","nodeType":"ElementaryTypeName","src":"2382:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3136","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"visibility":"internal"},{"constant":true,"id":2145,"mutability":"constant","name":"RRSIG_SIGNER_NAME","nameLocation":"2440:17:15","nodeType":"VariableDeclaration","scope":3088,"src":"2423:39:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2143,"name":"uint256","nodeType":"ElementaryTypeName","src":"2423:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3138","id":2144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2460:2:15","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"visibility":"internal"},{"canonicalName":"RRUtils.SignedSet","id":2166,"members":[{"constant":false,"id":2147,"mutability":"mutable","name":"typeCovered","nameLocation":"2503:11:15","nodeType":"VariableDeclaration","scope":2166,"src":"2496:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2146,"name":"uint16","nodeType":"ElementaryTypeName","src":"2496:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2149,"mutability":"mutable","name":"algorithm","nameLocation":"2530:9:15","nodeType":"VariableDeclaration","scope":2166,"src":"2524:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2148,"name":"uint8","nodeType":"ElementaryTypeName","src":"2524:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2151,"mutability":"mutable","name":"labels","nameLocation":"2555:6:15","nodeType":"VariableDeclaration","scope":2166,"src":"2549:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2150,"name":"uint8","nodeType":"ElementaryTypeName","src":"2549:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2153,"mutability":"mutable","name":"ttl","nameLocation":"2578:3:15","nodeType":"VariableDeclaration","scope":2166,"src":"2571:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2152,"name":"uint32","nodeType":"ElementaryTypeName","src":"2571:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2155,"mutability":"mutable","name":"expiration","nameLocation":"2598:10:15","nodeType":"VariableDeclaration","scope":2166,"src":"2591:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2154,"name":"uint32","nodeType":"ElementaryTypeName","src":"2591:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2157,"mutability":"mutable","name":"inception","nameLocation":"2625:9:15","nodeType":"VariableDeclaration","scope":2166,"src":"2618:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2156,"name":"uint32","nodeType":"ElementaryTypeName","src":"2618:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2159,"mutability":"mutable","name":"keytag","nameLocation":"2651:6:15","nodeType":"VariableDeclaration","scope":2166,"src":"2644:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2158,"name":"uint16","nodeType":"ElementaryTypeName","src":"2644:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2161,"mutability":"mutable","name":"signerName","nameLocation":"2673:10:15","nodeType":"VariableDeclaration","scope":2166,"src":"2667:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2160,"name":"bytes","nodeType":"ElementaryTypeName","src":"2667:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2163,"mutability":"mutable","name":"data","nameLocation":"2699:4:15","nodeType":"VariableDeclaration","scope":2166,"src":"2693:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2162,"name":"bytes","nodeType":"ElementaryTypeName","src":"2693:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2165,"mutability":"mutable","name":"name","nameLocation":"2719:4:15","nodeType":"VariableDeclaration","scope":2166,"src":"2713:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2164,"name":"bytes","nodeType":"ElementaryTypeName","src":"2713:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"SignedSet","nameLocation":"2476:9:15","nodeType":"StructDefinition","scope":3088,"src":"2469:261:15","visibility":"public"},{"body":{"id":2267,"nodeType":"Block","src":"2838:627:15","statements":[{"expression":{"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2174,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"2848:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2176,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2853:11:15","memberName":"typeCovered","nodeType":"MemberAccess","referencedDeclaration":2147,"src":"2848:16:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2179,"name":"RRSIG_TYPE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"2883:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2177,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"2867:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2872:10:15","memberName":"readUint16","nodeType":"MemberAccess","referencedDeclaration":6088,"src":"2867:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2867:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2848:46:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":2182,"nodeType":"ExpressionStatement","src":"2848:46:15"},{"expression":{"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2183,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"2904:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2185,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2909:9:15","memberName":"algorithm","nodeType":"MemberAccess","referencedDeclaration":2149,"src":"2904:14:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2188,"name":"RRSIG_ALGORITHM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"2936:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2186,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"2921:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2926:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"2921:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2921:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2904:48:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2191,"nodeType":"ExpressionStatement","src":"2904:48:15"},{"expression":{"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2192,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"2962:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2194,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2967:6:15","memberName":"labels","nodeType":"MemberAccess","referencedDeclaration":2151,"src":"2962:11:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2197,"name":"RRSIG_LABELS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"2991:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2195,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"2976:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2981:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"2976:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2976:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2962:42:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2200,"nodeType":"ExpressionStatement","src":"2962:42:15"},{"expression":{"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2201,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"3014:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2203,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3019:3:15","memberName":"ttl","nodeType":"MemberAccess","referencedDeclaration":2153,"src":"3014:8:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2206,"name":"RRSIG_TTL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"3041:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2204,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"3025:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3030:10:15","memberName":"readUint32","nodeType":"MemberAccess","referencedDeclaration":6108,"src":"3025:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint32)"}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3025:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3014:37:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":2209,"nodeType":"ExpressionStatement","src":"3014:37:15"},{"expression":{"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2210,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"3061:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3066:10:15","memberName":"expiration","nodeType":"MemberAccess","referencedDeclaration":2155,"src":"3061:15:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2215,"name":"RRSIG_EXPIRATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"3095:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2213,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"3079:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3084:10:15","memberName":"readUint32","nodeType":"MemberAccess","referencedDeclaration":6108,"src":"3079:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint32)"}},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3079:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3061:51:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":2218,"nodeType":"ExpressionStatement","src":"3061:51:15"},{"expression":{"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2219,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"3122:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2221,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3127:9:15","memberName":"inception","nodeType":"MemberAccess","referencedDeclaration":2157,"src":"3122:14:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2224,"name":"RRSIG_INCEPTION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"3155:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2222,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"3139:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3144:10:15","memberName":"readUint32","nodeType":"MemberAccess","referencedDeclaration":6108,"src":"3139:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint32)"}},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3139:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3122:49:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":2227,"nodeType":"ExpressionStatement","src":"3122:49:15"},{"expression":{"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2228,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"3181:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2230,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3186:6:15","memberName":"keytag","nodeType":"MemberAccess","referencedDeclaration":2159,"src":"3181:11:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2233,"name":"RRSIG_KEY_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"3211:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2231,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"3195:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3200:10:15","memberName":"readUint16","nodeType":"MemberAccess","referencedDeclaration":6088,"src":"3195:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3195:30:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"3181:44:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":2236,"nodeType":"ExpressionStatement","src":"3181:44:15"},{"expression":{"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2237,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"3235:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2239,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3240:10:15","memberName":"signerName","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"3235:15:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2241,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"3262:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2242,"name":"RRSIG_SIGNER_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"3268:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2240,"name":"readName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"3253:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes memory)"}},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3253:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3235:51:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2245,"nodeType":"ExpressionStatement","src":"3235:51:15"},{"expression":{"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2246,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"3296:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2248,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3301:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2163,"src":"3296:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2251,"name":"RRSIG_SIGNER_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"3336:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"expression":{"id":2252,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"3356:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2253,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3361:10:15","memberName":"signerName","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"3356:15:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3372:6:15","memberName":"length","nodeType":"MemberAccess","src":"3356:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3336:42:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2256,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"3392:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3397:6:15","memberName":"length","nodeType":"MemberAccess","src":"3392:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2258,"name":"RRSIG_SIGNER_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"3406:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3392:31:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"expression":{"id":2260,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"3426:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2261,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3431:10:15","memberName":"signerName","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"3426:15:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3442:6:15","memberName":"length","nodeType":"MemberAccess","src":"3426:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3392:56:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2249,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"3308:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3313:9:15","memberName":"substring","nodeType":"MemberAccess","referencedDeclaration":6261,"src":"3308:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3308:150:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3296:162:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2266,"nodeType":"ExpressionStatement","src":"3296:162:15"}]},"id":2268,"implemented":true,"kind":"function","modifiers":[],"name":"readSignedSet","nameLocation":"2745:13:15","nodeType":"FunctionDefinition","parameters":{"id":2169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2168,"mutability":"mutable","name":"data","nameLocation":"2781:4:15","nodeType":"VariableDeclaration","scope":2268,"src":"2768:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2167,"name":"bytes","nodeType":"ElementaryTypeName","src":"2768:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2758:33:15"},"returnParameters":{"id":2173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2172,"mutability":"mutable","name":"self","nameLocation":"2832:4:15","nodeType":"VariableDeclaration","scope":2268,"src":"2815:21:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet"},"typeName":{"id":2171,"nodeType":"UserDefinedTypeName","pathNode":{"id":2170,"name":"SignedSet","nameLocations":["2815:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":2166,"src":"2815:9:15"},"referencedDeclaration":2166,"src":"2815:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_storage_ptr","typeString":"struct RRUtils.SignedSet"}},"visibility":"internal"}],"src":"2814:23:15"},"scope":3088,"src":"2736:729:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2283,"nodeType":"Block","src":"3564:49:15","statements":[{"expression":{"arguments":[{"expression":{"id":2278,"name":"rrset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"3592:5:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet memory"}},"id":2279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3598:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2163,"src":"3592:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3604:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2277,"name":"iterateRRs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"3581:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_RRIterator_$2299_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (struct RRUtils.RRIterator memory)"}},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3581:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"functionReturnParameters":2276,"id":2282,"nodeType":"Return","src":"3574:32:15"}]},"id":2284,"implemented":true,"kind":"function","modifiers":[],"name":"rrs","nameLocation":"3480:3:15","nodeType":"FunctionDefinition","parameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2271,"mutability":"mutable","name":"rrset","nameLocation":"3510:5:15","nodeType":"VariableDeclaration","scope":2284,"src":"3493:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_memory_ptr","typeString":"struct RRUtils.SignedSet"},"typeName":{"id":2270,"nodeType":"UserDefinedTypeName","pathNode":{"id":2269,"name":"SignedSet","nameLocations":["3493:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":2166,"src":"3493:9:15"},"referencedDeclaration":2166,"src":"3493:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_SignedSet_$2166_storage_ptr","typeString":"struct RRUtils.SignedSet"}},"visibility":"internal"}],"src":"3483:38:15"},"returnParameters":{"id":2276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2284,"src":"3545:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator"},"typeName":{"id":2274,"nodeType":"UserDefinedTypeName","pathNode":{"id":2273,"name":"RRIterator","nameLocations":["3545:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":2299,"src":"3545:10:15"},"referencedDeclaration":2299,"src":"3545:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_storage_ptr","typeString":"struct RRUtils.RRIterator"}},"visibility":"internal"}],"src":"3544:19:15"},"scope":3088,"src":"3471:142:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"RRUtils.RRIterator","id":2299,"members":[{"constant":false,"id":2286,"mutability":"mutable","name":"data","nameLocation":"3716:4:15","nodeType":"VariableDeclaration","scope":2299,"src":"3710:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2285,"name":"bytes","nodeType":"ElementaryTypeName","src":"3710:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2288,"mutability":"mutable","name":"offset","nameLocation":"3738:6:15","nodeType":"VariableDeclaration","scope":2299,"src":"3730:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2287,"name":"uint256","nodeType":"ElementaryTypeName","src":"3730:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2290,"mutability":"mutable","name":"dnstype","nameLocation":"3761:7:15","nodeType":"VariableDeclaration","scope":2299,"src":"3754:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2289,"name":"uint16","nodeType":"ElementaryTypeName","src":"3754:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2292,"mutability":"mutable","name":"class","nameLocation":"3785:5:15","nodeType":"VariableDeclaration","scope":2299,"src":"3778:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2291,"name":"uint16","nodeType":"ElementaryTypeName","src":"3778:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2294,"mutability":"mutable","name":"ttl","nameLocation":"3807:3:15","nodeType":"VariableDeclaration","scope":2299,"src":"3800:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2293,"name":"uint32","nodeType":"ElementaryTypeName","src":"3800:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2296,"mutability":"mutable","name":"rdataOffset","nameLocation":"3828:11:15","nodeType":"VariableDeclaration","scope":2299,"src":"3820:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2295,"name":"uint256","nodeType":"ElementaryTypeName","src":"3820:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2298,"mutability":"mutable","name":"nextOffset","nameLocation":"3857:10:15","nodeType":"VariableDeclaration","scope":2299,"src":"3849:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2297,"name":"uint256","nodeType":"ElementaryTypeName","src":"3849:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"RRIterator","nameLocation":"3689:10:15","nodeType":"StructDefinition","scope":3088,"src":"3682:192:15","visibility":"public"},{"body":{"id":2326,"nodeType":"Block","src":"4212:84:15","statements":[{"expression":{"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2310,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"4222:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2312,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4226:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"4222:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2313,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"4233:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4222:15:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2315,"nodeType":"ExpressionStatement","src":"4222:15:15"},{"expression":{"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2316,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"4247:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4251:10:15","memberName":"nextOffset","nodeType":"MemberAccess","referencedDeclaration":2298,"src":"4247:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2319,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"4264:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4247:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2321,"nodeType":"ExpressionStatement","src":"4247:23:15"},{"expression":{"arguments":[{"id":2323,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"4285:3:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}],"id":2322,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"4280:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_RRIterator_$2299_memory_ptr_$returns$__$","typeString":"function (struct RRUtils.RRIterator memory) pure"}},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4280:9:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2325,"nodeType":"ExpressionStatement","src":"4280:9:15"}]},"documentation":{"id":2300,"nodeType":"StructuredDocumentation","src":"3880:204:15","text":" @dev Begins iterating over resource records.\n @param self The byte string to read from.\n @param offset The offset to start reading at.\n @return ret An iterator object."},"id":2327,"implemented":true,"kind":"function","modifiers":[],"name":"iterateRRs","nameLocation":"4098:10:15","nodeType":"FunctionDefinition","parameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2302,"mutability":"mutable","name":"self","nameLocation":"4131:4:15","nodeType":"VariableDeclaration","scope":2327,"src":"4118:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2301,"name":"bytes","nodeType":"ElementaryTypeName","src":"4118:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2304,"mutability":"mutable","name":"offset","nameLocation":"4153:6:15","nodeType":"VariableDeclaration","scope":2327,"src":"4145:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2303,"name":"uint256","nodeType":"ElementaryTypeName","src":"4145:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4108:57:15"},"returnParameters":{"id":2309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2308,"mutability":"mutable","name":"ret","nameLocation":"4207:3:15","nodeType":"VariableDeclaration","scope":2327,"src":"4189:21:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator"},"typeName":{"id":2307,"nodeType":"UserDefinedTypeName","pathNode":{"id":2306,"name":"RRIterator","nameLocations":["4189:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":2299,"src":"4189:10:15"},"referencedDeclaration":2299,"src":"4189:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_storage_ptr","typeString":"struct RRUtils.RRIterator"}},"visibility":"internal"}],"src":"4188:23:15"},"scope":3088,"src":"4089:207:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2343,"nodeType":"Block","src":"4538:55:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2336,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2331,"src":"4555:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2337,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4560:6:15","memberName":"offset","nodeType":"MemberAccess","referencedDeclaration":2288,"src":"4555:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"expression":{"id":2338,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2331,"src":"4570:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2339,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4575:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"4570:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4580:6:15","memberName":"length","nodeType":"MemberAccess","src":"4570:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4555:31:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2335,"id":2342,"nodeType":"Return","src":"4548:38:15"}]},"documentation":{"id":2328,"nodeType":"StructuredDocumentation","src":"4302:164:15","text":" @dev Returns true iff there are more RRs to iterate.\n @param iter The iterator to check.\n @return True iff the iterator has finished."},"id":2344,"implemented":true,"kind":"function","modifiers":[],"name":"done","nameLocation":"4480:4:15","nodeType":"FunctionDefinition","parameters":{"id":2332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2331,"mutability":"mutable","name":"iter","nameLocation":"4503:4:15","nodeType":"VariableDeclaration","scope":2344,"src":"4485:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator"},"typeName":{"id":2330,"nodeType":"UserDefinedTypeName","pathNode":{"id":2329,"name":"RRIterator","nameLocations":["4485:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":2299,"src":"4485:10:15"},"referencedDeclaration":2299,"src":"4485:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_storage_ptr","typeString":"struct RRUtils.RRIterator"}},"visibility":"internal"}],"src":"4484:24:15"},"returnParameters":{"id":2335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2344,"src":"4532:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2333,"name":"bool","nodeType":"ElementaryTypeName","src":"4532:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4531:6:15"},"scope":3088,"src":"4471:122:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2447,"nodeType":"Block","src":"4771:636:15","statements":[{"expression":{"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2351,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"4781:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2353,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4786:6:15","memberName":"offset","nodeType":"MemberAccess","referencedDeclaration":2288,"src":"4781:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2354,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"4795:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2355,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4800:10:15","memberName":"nextOffset","nodeType":"MemberAccess","referencedDeclaration":2298,"src":"4795:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4781:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2357,"nodeType":"ExpressionStatement","src":"4781:29:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2358,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"4824:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2359,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4829:6:15","memberName":"offset","nodeType":"MemberAccess","referencedDeclaration":2288,"src":"4824:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"expression":{"id":2360,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"4839:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2361,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4844:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"4839:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4849:6:15","memberName":"length","nodeType":"MemberAccess","src":"4839:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4824:31:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2366,"nodeType":"IfStatement","src":"4820:68:15","trueBody":{"id":2365,"nodeType":"Block","src":"4857:31:15","statements":[{"functionReturnParameters":2350,"id":2364,"nodeType":"Return","src":"4871:7:15"}]}},{"assignments":[2368],"declarations":[{"constant":false,"id":2368,"mutability":"mutable","name":"off","nameLocation":"4931:3:15","nodeType":"VariableDeclaration","scope":2447,"src":"4923:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2367,"name":"uint256","nodeType":"ElementaryTypeName","src":"4923:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2378,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2369,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"4937:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2370,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4942:6:15","memberName":"offset","nodeType":"MemberAccess","referencedDeclaration":2288,"src":"4937:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"expression":{"id":2372,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"4962:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4967:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"4962:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":2374,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"4973:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2375,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4978:6:15","memberName":"offset","nodeType":"MemberAccess","referencedDeclaration":2288,"src":"4973:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2371,"name":"nameLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"4951:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4951:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4937:48:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4923:62:15"},{"expression":{"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2379,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"5033:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2381,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5038:7:15","memberName":"dnstype","nodeType":"MemberAccess","referencedDeclaration":2290,"src":"5033:12:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2385,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5069:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2382,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"5048:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2383,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5053:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"5048:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5058:10:15","memberName":"readUint16","nodeType":"MemberAccess","referencedDeclaration":6088,"src":"5048:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5048:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"5033:40:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":2388,"nodeType":"ExpressionStatement","src":"5033:40:15"},{"expression":{"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2389,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5083:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5090:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5083:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2392,"nodeType":"ExpressionStatement","src":"5083:8:15"},{"expression":{"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2393,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"5101:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2395,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5106:5:15","memberName":"class","nodeType":"MemberAccess","referencedDeclaration":2292,"src":"5101:10:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2399,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5135:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2396,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"5114:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2397,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5119:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"5114:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5124:10:15","memberName":"readUint16","nodeType":"MemberAccess","referencedDeclaration":6088,"src":"5114:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5114:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"5101:38:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":2402,"nodeType":"ExpressionStatement","src":"5101:38:15"},{"expression":{"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2403,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5149:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5156:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5149:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2406,"nodeType":"ExpressionStatement","src":"5149:8:15"},{"expression":{"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2407,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"5167:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2409,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5172:3:15","memberName":"ttl","nodeType":"MemberAccess","referencedDeclaration":2294,"src":"5167:8:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2413,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5199:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2410,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"5178:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2411,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5183:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"5178:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5188:10:15","memberName":"readUint32","nodeType":"MemberAccess","referencedDeclaration":6108,"src":"5178:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint32)"}},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5178:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5167:36:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":2416,"nodeType":"ExpressionStatement","src":"5167:36:15"},{"expression":{"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2417,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5213:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5220:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"5213:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2420,"nodeType":"ExpressionStatement","src":"5213:8:15"},{"assignments":[2422],"declarations":[{"constant":false,"id":2422,"mutability":"mutable","name":"rdataLength","nameLocation":"5266:11:15","nodeType":"VariableDeclaration","scope":2447,"src":"5258:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2421,"name":"uint256","nodeType":"ElementaryTypeName","src":"5258:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2428,"initialValue":{"arguments":[{"id":2426,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5301:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2423,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"5280:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2424,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5285:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"5280:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5290:10:15","memberName":"readUint16","nodeType":"MemberAccess","referencedDeclaration":6088,"src":"5280:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5280:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"5258:47:15"},{"expression":{"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2429,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5315:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5322:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5315:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2432,"nodeType":"ExpressionStatement","src":"5315:8:15"},{"expression":{"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2433,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"5333:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5338:11:15","memberName":"rdataOffset","nodeType":"MemberAccess","referencedDeclaration":2296,"src":"5333:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2436,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5352:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5333:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2438,"nodeType":"ExpressionStatement","src":"5333:22:15"},{"expression":{"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2439,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"5365:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2441,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5370:10:15","memberName":"nextOffset","nodeType":"MemberAccess","referencedDeclaration":2298,"src":"5365:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2442,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5383:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2443,"name":"rdataLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"5389:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5383:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5365:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2446,"nodeType":"ExpressionStatement","src":"5365:35:15"}]},"documentation":{"id":2345,"nodeType":"StructuredDocumentation","src":"4599:115:15","text":" @dev Moves the iterator to the next resource record.\n @param iter The iterator to advance."},"id":2448,"implemented":true,"kind":"function","modifiers":[],"name":"next","nameLocation":"4728:4:15","nodeType":"FunctionDefinition","parameters":{"id":2349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2348,"mutability":"mutable","name":"iter","nameLocation":"4751:4:15","nodeType":"VariableDeclaration","scope":2448,"src":"4733:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator"},"typeName":{"id":2347,"nodeType":"UserDefinedTypeName","pathNode":{"id":2346,"name":"RRIterator","nameLocations":["4733:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":2299,"src":"4733:10:15"},"referencedDeclaration":2299,"src":"4733:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_storage_ptr","typeString":"struct RRUtils.RRIterator"}},"visibility":"internal"}],"src":"4732:24:15"},"returnParameters":{"id":2350,"nodeType":"ParameterList","parameters":[],"src":"4771:0:15"},"scope":3088,"src":"4719:688:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2470,"nodeType":"Block","src":"5662:150:15","statements":[{"expression":{"arguments":[{"expression":{"id":2460,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"5728:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5733:6:15","memberName":"offset","nodeType":"MemberAccess","referencedDeclaration":2288,"src":"5728:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"expression":{"id":2463,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"5768:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2464,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5773:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"5768:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":2465,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"5779:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2466,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5784:6:15","memberName":"offset","nodeType":"MemberAccess","referencedDeclaration":2288,"src":"5779:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2462,"name":"nameLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"5757:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5757:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2457,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"5691:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5696:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"5691:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5701:9:15","memberName":"substring","nodeType":"MemberAccess","referencedDeclaration":6261,"src":"5691:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5691:114:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2456,"id":2469,"nodeType":"Return","src":"5672:133:15"}]},"documentation":{"id":2449,"nodeType":"StructuredDocumentation","src":"5413:169:15","text":" @dev Returns the name of the current record.\n @param iter The iterator.\n @return A new bytes object containing the owner name from the RR."},"id":2471,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"5596:4:15","nodeType":"FunctionDefinition","parameters":{"id":2453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2452,"mutability":"mutable","name":"iter","nameLocation":"5619:4:15","nodeType":"VariableDeclaration","scope":2471,"src":"5601:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator"},"typeName":{"id":2451,"nodeType":"UserDefinedTypeName","pathNode":{"id":2450,"name":"RRIterator","nameLocations":["5601:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":2299,"src":"5601:10:15"},"referencedDeclaration":2299,"src":"5601:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_storage_ptr","typeString":"struct RRUtils.RRIterator"}},"visibility":"internal"}],"src":"5600:24:15"},"returnParameters":{"id":2456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2471,"src":"5648:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2454,"name":"bytes","nodeType":"ElementaryTypeName","src":"5648:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5647:14:15"},"scope":3088,"src":"5587:225:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2492,"nodeType":"Block","src":"6079:155:15","statements":[{"expression":{"arguments":[{"expression":{"id":2483,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"6145:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6150:11:15","memberName":"rdataOffset","nodeType":"MemberAccess","referencedDeclaration":2296,"src":"6145:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2485,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"6179:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2486,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6184:10:15","memberName":"nextOffset","nodeType":"MemberAccess","referencedDeclaration":2298,"src":"6179:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":2487,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"6197:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2488,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6202:11:15","memberName":"rdataOffset","nodeType":"MemberAccess","referencedDeclaration":2296,"src":"6197:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6179:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2480,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"6108:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":2481,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6113:4:15","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"6108:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6118:9:15","memberName":"substring","nodeType":"MemberAccess","referencedDeclaration":6261,"src":"6108:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6108:119:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2479,"id":2491,"nodeType":"Return","src":"6089:138:15"}]},"documentation":{"id":2472,"nodeType":"StructuredDocumentation","src":"5818:166:15","text":" @dev Returns the rdata portion of the current record.\n @param iter The iterator.\n @return A new bytes object containing the RR's RDATA."},"id":2493,"implemented":true,"kind":"function","modifiers":[],"name":"rdata","nameLocation":"5998:5:15","nodeType":"FunctionDefinition","parameters":{"id":2476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2475,"mutability":"mutable","name":"iter","nameLocation":"6031:4:15","nodeType":"VariableDeclaration","scope":2493,"src":"6013:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator"},"typeName":{"id":2474,"nodeType":"UserDefinedTypeName","pathNode":{"id":2473,"name":"RRIterator","nameLocations":["6013:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":2299,"src":"6013:10:15"},"referencedDeclaration":2299,"src":"6013:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_storage_ptr","typeString":"struct RRUtils.RRIterator"}},"visibility":"internal"}],"src":"6003:38:15"},"returnParameters":{"id":2479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2493,"src":"6065:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2477,"name":"bytes","nodeType":"ElementaryTypeName","src":"6065:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6064:14:15"},"scope":3088,"src":"5989:245:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":2496,"mutability":"constant","name":"DNSKEY_FLAGS","nameLocation":"6257:12:15","nodeType":"VariableDeclaration","scope":3088,"src":"6240:33:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2494,"name":"uint256","nodeType":"ElementaryTypeName","src":"6240:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":2495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6272:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":2499,"mutability":"constant","name":"DNSKEY_PROTOCOL","nameLocation":"6296:15:15","nodeType":"VariableDeclaration","scope":3088,"src":"6279:36:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2497,"name":"uint256","nodeType":"ElementaryTypeName","src":"6279:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6314:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":2502,"mutability":"constant","name":"DNSKEY_ALGORITHM","nameLocation":"6338:16:15","nodeType":"VariableDeclaration","scope":3088,"src":"6321:37:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint256","nodeType":"ElementaryTypeName","src":"6321:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6357:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":true,"id":2505,"mutability":"constant","name":"DNSKEY_PUBKEY","nameLocation":"6381:13:15","nodeType":"VariableDeclaration","scope":3088,"src":"6364:34:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2503,"name":"uint256","nodeType":"ElementaryTypeName","src":"6364:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"34","id":2504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6397:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"},{"canonicalName":"RRUtils.DNSKEY","id":2514,"members":[{"constant":false,"id":2507,"mutability":"mutable","name":"flags","nameLocation":"6436:5:15","nodeType":"VariableDeclaration","scope":2514,"src":"6429:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2506,"name":"uint16","nodeType":"ElementaryTypeName","src":"6429:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2509,"mutability":"mutable","name":"protocol","nameLocation":"6457:8:15","nodeType":"VariableDeclaration","scope":2514,"src":"6451:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2508,"name":"uint8","nodeType":"ElementaryTypeName","src":"6451:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2511,"mutability":"mutable","name":"algorithm","nameLocation":"6481:9:15","nodeType":"VariableDeclaration","scope":2514,"src":"6475:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2510,"name":"uint8","nodeType":"ElementaryTypeName","src":"6475:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2513,"mutability":"mutable","name":"publicKey","nameLocation":"6506:9:15","nodeType":"VariableDeclaration","scope":2514,"src":"6500:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2512,"name":"bytes","nodeType":"ElementaryTypeName","src":"6500:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"DNSKEY","nameLocation":"6412:6:15","nodeType":"StructDefinition","scope":3088,"src":"6405:117:15","visibility":"public"},{"body":{"id":2573,"nodeType":"Block","src":"6672:325:15","statements":[{"expression":{"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2526,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"6682:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_DNSKEY_$2514_memory_ptr","typeString":"struct RRUtils.DNSKEY memory"}},"id":2528,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6687:5:15","memberName":"flags","nodeType":"MemberAccess","referencedDeclaration":2507,"src":"6682:10:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2531,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"6711:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2532,"name":"DNSKEY_FLAGS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2496,"src":"6720:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6711:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2529,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"6695:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6700:10:15","memberName":"readUint16","nodeType":"MemberAccess","referencedDeclaration":6088,"src":"6695:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6695:38:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"6682:51:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":2536,"nodeType":"ExpressionStatement","src":"6682:51:15"},{"expression":{"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2537,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"6743:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_DNSKEY_$2514_memory_ptr","typeString":"struct RRUtils.DNSKEY memory"}},"id":2539,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6748:8:15","memberName":"protocol","nodeType":"MemberAccess","referencedDeclaration":2509,"src":"6743:13:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"6774:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2543,"name":"DNSKEY_PROTOCOL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"6783:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6774:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2540,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"6759:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6764:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"6759:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6759:40:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6743:56:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2547,"nodeType":"ExpressionStatement","src":"6743:56:15"},{"expression":{"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2548,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"6809:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_DNSKEY_$2514_memory_ptr","typeString":"struct RRUtils.DNSKEY memory"}},"id":2550,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6814:9:15","memberName":"algorithm","nodeType":"MemberAccess","referencedDeclaration":2511,"src":"6809:14:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2553,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"6841:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2554,"name":"DNSKEY_ALGORITHM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"6850:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6841:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2551,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"6826:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6831:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"6826:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6826:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6809:58:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2558,"nodeType":"ExpressionStatement","src":"6809:58:15"},{"expression":{"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2559,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"6877:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_DNSKEY_$2514_memory_ptr","typeString":"struct RRUtils.DNSKEY memory"}},"id":2561,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6882:9:15","memberName":"publicKey","nodeType":"MemberAccess","referencedDeclaration":2513,"src":"6877:14:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2564,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"6922:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2565,"name":"DNSKEY_PUBKEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"6931:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6922:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2567,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"6958:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2568,"name":"DNSKEY_PUBKEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"6967:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6958:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2562,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"6894:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6899:9:15","memberName":"substring","nodeType":"MemberAccess","referencedDeclaration":6261,"src":"6894:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6894:96:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"6877:113:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2572,"nodeType":"ExpressionStatement","src":"6877:113:15"}]},"id":2574,"implemented":true,"kind":"function","modifiers":[],"name":"readDNSKEY","nameLocation":"6537:10:15","nodeType":"FunctionDefinition","parameters":{"id":2521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2516,"mutability":"mutable","name":"data","nameLocation":"6570:4:15","nodeType":"VariableDeclaration","scope":2574,"src":"6557:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2515,"name":"bytes","nodeType":"ElementaryTypeName","src":"6557:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2518,"mutability":"mutable","name":"offset","nameLocation":"6592:6:15","nodeType":"VariableDeclaration","scope":2574,"src":"6584:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2517,"name":"uint256","nodeType":"ElementaryTypeName","src":"6584:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2520,"mutability":"mutable","name":"length","nameLocation":"6616:6:15","nodeType":"VariableDeclaration","scope":2574,"src":"6608:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2519,"name":"uint256","nodeType":"ElementaryTypeName","src":"6608:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6547:81:15"},"returnParameters":{"id":2525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2524,"mutability":"mutable","name":"self","nameLocation":"6666:4:15","nodeType":"VariableDeclaration","scope":2574,"src":"6652:18:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DNSKEY_$2514_memory_ptr","typeString":"struct RRUtils.DNSKEY"},"typeName":{"id":2523,"nodeType":"UserDefinedTypeName","pathNode":{"id":2522,"name":"DNSKEY","nameLocations":["6652:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":2514,"src":"6652:6:15"},"referencedDeclaration":2514,"src":"6652:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_DNSKEY_$2514_storage_ptr","typeString":"struct RRUtils.DNSKEY"}},"visibility":"internal"}],"src":"6651:20:15"},"scope":3088,"src":"6528:469:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":2577,"mutability":"constant","name":"DS_KEY_TAG","nameLocation":"7020:10:15","nodeType":"VariableDeclaration","scope":3088,"src":"7003:31:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2575,"name":"uint256","nodeType":"ElementaryTypeName","src":"7003:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":2576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7033:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":2580,"mutability":"constant","name":"DS_ALGORITHM","nameLocation":"7057:12:15","nodeType":"VariableDeclaration","scope":3088,"src":"7040:33:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2578,"name":"uint256","nodeType":"ElementaryTypeName","src":"7040:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7072:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":2583,"mutability":"constant","name":"DS_DIGEST_TYPE","nameLocation":"7096:14:15","nodeType":"VariableDeclaration","scope":3088,"src":"7079:35:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2581,"name":"uint256","nodeType":"ElementaryTypeName","src":"7079:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":2582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7113:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":true,"id":2586,"mutability":"constant","name":"DS_DIGEST","nameLocation":"7137:9:15","nodeType":"VariableDeclaration","scope":3088,"src":"7120:30:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2584,"name":"uint256","nodeType":"ElementaryTypeName","src":"7120:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"34","id":2585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7149:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"},{"canonicalName":"RRUtils.DS","id":2595,"members":[{"constant":false,"id":2588,"mutability":"mutable","name":"keytag","nameLocation":"7184:6:15","nodeType":"VariableDeclaration","scope":2595,"src":"7177:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2587,"name":"uint16","nodeType":"ElementaryTypeName","src":"7177:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2590,"mutability":"mutable","name":"algorithm","nameLocation":"7206:9:15","nodeType":"VariableDeclaration","scope":2595,"src":"7200:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2589,"name":"uint8","nodeType":"ElementaryTypeName","src":"7200:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2592,"mutability":"mutable","name":"digestType","nameLocation":"7231:10:15","nodeType":"VariableDeclaration","scope":2595,"src":"7225:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2591,"name":"uint8","nodeType":"ElementaryTypeName","src":"7225:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2594,"mutability":"mutable","name":"digest","nameLocation":"7257:6:15","nodeType":"VariableDeclaration","scope":2595,"src":"7251:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2593,"name":"bytes","nodeType":"ElementaryTypeName","src":"7251:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"DS","nameLocation":"7164:2:15","nodeType":"StructDefinition","scope":3088,"src":"7157:113:15","visibility":"public"},{"body":{"id":2654,"nodeType":"Block","src":"7412:276:15","statements":[{"expression":{"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2607,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"7422:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_DS_$2595_memory_ptr","typeString":"struct RRUtils.DS memory"}},"id":2609,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7427:6:15","memberName":"keytag","nodeType":"MemberAccess","referencedDeclaration":2588,"src":"7422:11:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2612,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"7452:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2613,"name":"DS_KEY_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"7461:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7452:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2610,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"7436:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7441:10:15","memberName":"readUint16","nodeType":"MemberAccess","referencedDeclaration":6088,"src":"7436:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7436:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"7422:50:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":2617,"nodeType":"ExpressionStatement","src":"7422:50:15"},{"expression":{"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2618,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"7482:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_DS_$2595_memory_ptr","typeString":"struct RRUtils.DS memory"}},"id":2620,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7487:9:15","memberName":"algorithm","nodeType":"MemberAccess","referencedDeclaration":2590,"src":"7482:14:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2623,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"7514:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2624,"name":"DS_ALGORITHM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"7523:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7514:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2621,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"7499:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7504:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"7499:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7499:37:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7482:54:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2628,"nodeType":"ExpressionStatement","src":"7482:54:15"},{"expression":{"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2629,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"7546:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_DS_$2595_memory_ptr","typeString":"struct RRUtils.DS memory"}},"id":2631,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7551:10:15","memberName":"digestType","nodeType":"MemberAccess","referencedDeclaration":2592,"src":"7546:15:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2634,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"7579:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2635,"name":"DS_DIGEST_TYPE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"7588:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7579:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2632,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"7564:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7569:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"7564:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7564:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7546:57:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2639,"nodeType":"ExpressionStatement","src":"7546:57:15"},{"expression":{"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2640,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"7613:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_DS_$2595_memory_ptr","typeString":"struct RRUtils.DS memory"}},"id":2642,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7618:6:15","memberName":"digest","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"7613:11:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2645,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"7642:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2646,"name":"DS_DIGEST","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"7651:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7642:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2648,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"7662:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2649,"name":"DS_DIGEST","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"7671:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7662:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2643,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"7627:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7632:9:15","memberName":"substring","nodeType":"MemberAccess","referencedDeclaration":6261,"src":"7627:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7627:54:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"7613:68:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2653,"nodeType":"ExpressionStatement","src":"7613:68:15"}]},"id":2655,"implemented":true,"kind":"function","modifiers":[],"name":"readDS","nameLocation":"7285:6:15","nodeType":"FunctionDefinition","parameters":{"id":2602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2597,"mutability":"mutable","name":"data","nameLocation":"7314:4:15","nodeType":"VariableDeclaration","scope":2655,"src":"7301:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2596,"name":"bytes","nodeType":"ElementaryTypeName","src":"7301:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2599,"mutability":"mutable","name":"offset","nameLocation":"7336:6:15","nodeType":"VariableDeclaration","scope":2655,"src":"7328:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2598,"name":"uint256","nodeType":"ElementaryTypeName","src":"7328:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2601,"mutability":"mutable","name":"length","nameLocation":"7360:6:15","nodeType":"VariableDeclaration","scope":2655,"src":"7352:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2600,"name":"uint256","nodeType":"ElementaryTypeName","src":"7352:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7291:81:15"},"returnParameters":{"id":2606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2605,"mutability":"mutable","name":"self","nameLocation":"7406:4:15","nodeType":"VariableDeclaration","scope":2655,"src":"7396:14:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DS_$2595_memory_ptr","typeString":"struct RRUtils.DS"},"typeName":{"id":2604,"nodeType":"UserDefinedTypeName","pathNode":{"id":2603,"name":"DS","nameLocations":["7396:2:15"],"nodeType":"IdentifierPath","referencedDeclaration":2595,"src":"7396:2:15"},"referencedDeclaration":2595,"src":"7396:2:15","typeDescriptions":{"typeIdentifier":"t_struct$_DS_$2595_storage_ptr","typeString":"struct RRUtils.DS"}},"visibility":"internal"}],"src":"7395:16:15"},"scope":3088,"src":"7276:412:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2704,"nodeType":"Block","src":"7807:285:15","statements":[{"assignments":[2665],"declarations":[{"constant":false,"id":2665,"mutability":"mutable","name":"off","nameLocation":"7825:3:15","nodeType":"VariableDeclaration","scope":2704,"src":"7817:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2664,"name":"uint256","nodeType":"ElementaryTypeName","src":"7817:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2667,"initialValue":{"hexValue":"30","id":2666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7831:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7817:15:15"},{"assignments":[2669],"declarations":[{"constant":false,"id":2669,"mutability":"mutable","name":"counts","nameLocation":"7850:6:15","nodeType":"VariableDeclaration","scope":2704,"src":"7842:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2668,"name":"uint256","nodeType":"ElementaryTypeName","src":"7842:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2674,"initialValue":{"arguments":[{"id":2671,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"7870:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2670,"name":"labelCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"7859:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7859:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7842:36:15"},{"assignments":[2676],"declarations":[{"constant":false,"id":2676,"mutability":"mutable","name":"othercounts","nameLocation":"7896:11:15","nodeType":"VariableDeclaration","scope":2704,"src":"7888:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2675,"name":"uint256","nodeType":"ElementaryTypeName","src":"7888:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2681,"initialValue":{"arguments":[{"id":2678,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"7921:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7928:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2677,"name":"labelCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"7910:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7910:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7888:42:15"},{"body":{"id":2695,"nodeType":"Block","src":"7970:72:15","statements":[{"expression":{"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2685,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"7984:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2687,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"7999:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2688,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"8005:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2686,"name":"progress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"7990:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7990:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7984:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2691,"nodeType":"ExpressionStatement","src":"7984:25:15"},{"expression":{"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"8023:8:15","subExpression":{"id":2692,"name":"counts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"8023:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2694,"nodeType":"ExpressionStatement","src":"8023:8:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2682,"name":"counts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"7948:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2683,"name":"othercounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"7957:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2696,"nodeType":"WhileStatement","src":"7941:101:15"},{"expression":{"arguments":[{"id":2699,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"8071:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2700,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"8076:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8083:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":2697,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"8059:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8064:6:15","memberName":"equals","nodeType":"MemberAccess","referencedDeclaration":5997,"src":"8059:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,bytes memory,uint256) pure returns (bool)"}},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8059:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2663,"id":2703,"nodeType":"Return","src":"8052:33:15"}]},"id":2705,"implemented":true,"kind":"function","modifiers":[],"name":"isSubdomainOf","nameLocation":"7703:13:15","nodeType":"FunctionDefinition","parameters":{"id":2660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2657,"mutability":"mutable","name":"self","nameLocation":"7739:4:15","nodeType":"VariableDeclaration","scope":2705,"src":"7726:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2656,"name":"bytes","nodeType":"ElementaryTypeName","src":"7726:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2659,"mutability":"mutable","name":"other","nameLocation":"7766:5:15","nodeType":"VariableDeclaration","scope":2705,"src":"7753:18:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2658,"name":"bytes","nodeType":"ElementaryTypeName","src":"7753:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7716:61:15"},"returnParameters":{"id":2663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2662,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2705,"src":"7801:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2661,"name":"bool","nodeType":"ElementaryTypeName","src":"7801:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7800:6:15"},"scope":3088,"src":"7694:398:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2859,"nodeType":"Block","src":"8212:1332:15","statements":[{"condition":{"arguments":[{"id":2716,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"8238:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2714,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"8226:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8231:6:15","memberName":"equals","nodeType":"MemberAccess","referencedDeclaration":6051,"src":"8226:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,bytes memory) pure returns (bool)"}},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8226:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2721,"nodeType":"IfStatement","src":"8222:57:15","trueBody":{"id":2720,"nodeType":"Block","src":"8246:33:15","statements":[{"expression":{"hexValue":"30","id":2718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8267:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2713,"id":2719,"nodeType":"Return","src":"8260:8:15"}]}},{"assignments":[2723],"declarations":[{"constant":false,"id":2723,"mutability":"mutable","name":"off","nameLocation":"8297:3:15","nodeType":"VariableDeclaration","scope":2859,"src":"8289:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2722,"name":"uint256","nodeType":"ElementaryTypeName","src":"8289:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2724,"nodeType":"VariableDeclarationStatement","src":"8289:11:15"},{"assignments":[2726],"declarations":[{"constant":false,"id":2726,"mutability":"mutable","name":"otheroff","nameLocation":"8318:8:15","nodeType":"VariableDeclaration","scope":2859,"src":"8310:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2725,"name":"uint256","nodeType":"ElementaryTypeName","src":"8310:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2727,"nodeType":"VariableDeclarationStatement","src":"8310:16:15"},{"assignments":[2729],"declarations":[{"constant":false,"id":2729,"mutability":"mutable","name":"prevoff","nameLocation":"8344:7:15","nodeType":"VariableDeclaration","scope":2859,"src":"8336:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2728,"name":"uint256","nodeType":"ElementaryTypeName","src":"8336:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2730,"nodeType":"VariableDeclarationStatement","src":"8336:15:15"},{"assignments":[2732],"declarations":[{"constant":false,"id":2732,"mutability":"mutable","name":"otherprevoff","nameLocation":"8369:12:15","nodeType":"VariableDeclaration","scope":2859,"src":"8361:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"8361:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2733,"nodeType":"VariableDeclarationStatement","src":"8361:20:15"},{"assignments":[2735],"declarations":[{"constant":false,"id":2735,"mutability":"mutable","name":"counts","nameLocation":"8399:6:15","nodeType":"VariableDeclaration","scope":2859,"src":"8391:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2734,"name":"uint256","nodeType":"ElementaryTypeName","src":"8391:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2740,"initialValue":{"arguments":[{"id":2737,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"8419:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8425:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2736,"name":"labelCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"8408:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8408:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8391:36:15"},{"assignments":[2742],"declarations":[{"constant":false,"id":2742,"mutability":"mutable","name":"othercounts","nameLocation":"8445:11:15","nodeType":"VariableDeclaration","scope":2859,"src":"8437:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"8437:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2747,"initialValue":{"arguments":[{"id":2744,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"8470:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8477:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2743,"name":"labelCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"8459:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8459:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8437:42:15"},{"body":{"id":2765,"nodeType":"Block","src":"8612:99:15","statements":[{"expression":{"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2751,"name":"prevoff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"8626:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2752,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"8636:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8626:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2754,"nodeType":"ExpressionStatement","src":"8626:13:15"},{"expression":{"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2755,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"8653:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2757,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"8668:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2758,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"8674:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2756,"name":"progress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"8659:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8659:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8653:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2761,"nodeType":"ExpressionStatement","src":"8653:25:15"},{"expression":{"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"8692:8:15","subExpression":{"id":2762,"name":"counts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"8692:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2764,"nodeType":"ExpressionStatement","src":"8692:8:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2748,"name":"counts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"8590:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2749,"name":"othercounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"8599:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8590:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2766,"nodeType":"WhileStatement","src":"8583:128:15"},{"body":{"id":2784,"nodeType":"Block","src":"8750:125:15","statements":[{"expression":{"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2770,"name":"otherprevoff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"8764:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2771,"name":"otheroff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"8779:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8764:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2773,"nodeType":"ExpressionStatement","src":"8764:23:15"},{"expression":{"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2774,"name":"otheroff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"8801:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2776,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"8821:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2777,"name":"otheroff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"8828:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2775,"name":"progress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"8812:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8812:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8801:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2780,"nodeType":"ExpressionStatement","src":"8801:36:15"},{"expression":{"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"8851:13:15","subExpression":{"id":2781,"name":"othercounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"8851:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2783,"nodeType":"ExpressionStatement","src":"8851:13:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2767,"name":"othercounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"8728:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2768,"name":"counts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"8742:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8728:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2785,"nodeType":"WhileStatement","src":"8721:154:15"},{"body":{"id":2823,"nodeType":"Block","src":"9000:189:15","statements":[{"expression":{"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2797,"name":"prevoff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"9014:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2798,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"9024:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9014:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2800,"nodeType":"ExpressionStatement","src":"9014:13:15"},{"expression":{"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2801,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"9041:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2803,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"9056:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2804,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"9062:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2802,"name":"progress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"9047:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9047:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9041:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2807,"nodeType":"ExpressionStatement","src":"9041:25:15"},{"expression":{"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2808,"name":"otherprevoff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"9080:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2809,"name":"otheroff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"9095:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9080:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2811,"nodeType":"ExpressionStatement","src":"9080:23:15"},{"expression":{"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2812,"name":"otheroff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"9117:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2814,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"9137:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2815,"name":"otheroff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"9144:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2813,"name":"progress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"9128:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9128:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9117:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2818,"nodeType":"ExpressionStatement","src":"9117:36:15"},{"expression":{"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2819,"name":"counts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"9167:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9167:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2822,"nodeType":"ExpressionStatement","src":"9167:11:15"}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2786,"name":"counts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"8950:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8959:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8950:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8964:34:15","subExpression":{"arguments":[{"id":2791,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"8977:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2792,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"8982:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2793,"name":"otheroff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"8989:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2789,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"8965:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8970:6:15","memberName":"equals","nodeType":"MemberAccess","referencedDeclaration":5997,"src":"8965:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,bytes memory,uint256) pure returns (bool)"}},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8965:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8950:48:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2824,"nodeType":"WhileStatement","src":"8943:246:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2825,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"9203:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9210:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9203:8:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2832,"nodeType":"IfStatement","src":"9199:48:15","trueBody":{"id":2831,"nodeType":"Block","src":"9213:34:15","statements":[{"expression":{"id":2829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"9234:2:15","subExpression":{"hexValue":"31","id":2828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9235:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"functionReturnParameters":2713,"id":2830,"nodeType":"Return","src":"9227:9:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2833,"name":"otheroff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"9260:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9260:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2839,"nodeType":"IfStatement","src":"9256:52:15","trueBody":{"id":2838,"nodeType":"Block","src":"9275:33:15","statements":[{"expression":{"hexValue":"31","id":2836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9296:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"functionReturnParameters":2713,"id":2837,"nodeType":"Return","src":"9289:8:15"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2842,"name":"prevoff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"9367:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9377:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9367:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2847,"name":"prevoff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"9411:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2845,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"9396:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9401:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"9396:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9396:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2849,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"9437:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2850,"name":"otherprevoff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"9460:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9475:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9460:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2855,"name":"otherprevoff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"9510:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2853,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"9494:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9500:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"9494:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9494:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":2840,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"9337:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9342:7:15","memberName":"compare","nodeType":"MemberAccess","referencedDeclaration":5937,"src":"9337:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256,bytes memory,uint256,uint256) pure returns (int256)"}},"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9337:200:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2713,"id":2858,"nodeType":"Return","src":"9318:219:15"}]},"id":2860,"implemented":true,"kind":"function","modifiers":[],"name":"compareNames","nameLocation":"8107:12:15","nodeType":"FunctionDefinition","parameters":{"id":2710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2707,"mutability":"mutable","name":"self","nameLocation":"8142:4:15","nodeType":"VariableDeclaration","scope":2860,"src":"8129:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2706,"name":"bytes","nodeType":"ElementaryTypeName","src":"8129:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2709,"mutability":"mutable","name":"other","nameLocation":"8169:5:15","nodeType":"VariableDeclaration","scope":2860,"src":"8156:18:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2708,"name":"bytes","nodeType":"ElementaryTypeName","src":"8156:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8119:61:15"},"returnParameters":{"id":2713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2860,"src":"8204:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2711,"name":"int256","nodeType":"ElementaryTypeName","src":"8204:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"8203:8:15"},"scope":3088,"src":"8098:1446:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2883,"nodeType":"Block","src":"9738:84:15","statements":[{"id":2882,"nodeType":"UncheckedBlock","src":"9748:68:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int32","typeString":"int32"},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int32","typeString":"int32"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2872,"name":"i1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"9785:2:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":2871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9779:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":2870,"name":"int32","nodeType":"ElementaryTypeName","src":"9779:5:15","typeDescriptions":{}}},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9779:9:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":2876,"name":"i2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"9797:2:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":2875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9791:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":2874,"name":"int32","nodeType":"ElementaryTypeName","src":"9791:5:15","typeDescriptions":{}}},"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9791:9:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"9779:21:15","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9804:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9779:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2869,"id":2881,"nodeType":"Return","src":"9772:33:15"}]}]},"documentation":{"id":2861,"nodeType":"StructuredDocumentation","src":"9550:85:15","text":" @dev Compares two serial numbers using RFC1982 serial number math."},"id":2884,"implemented":true,"kind":"function","modifiers":[],"name":"serialNumberGte","nameLocation":"9649:15:15","nodeType":"FunctionDefinition","parameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2863,"mutability":"mutable","name":"i1","nameLocation":"9681:2:15","nodeType":"VariableDeclaration","scope":2884,"src":"9674:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2862,"name":"uint32","nodeType":"ElementaryTypeName","src":"9674:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"i2","nameLocation":"9700:2:15","nodeType":"VariableDeclaration","scope":2884,"src":"9693:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2864,"name":"uint32","nodeType":"ElementaryTypeName","src":"9693:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"9664:44:15"},"returnParameters":{"id":2869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2868,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2884,"src":"9732:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2867,"name":"bool","nodeType":"ElementaryTypeName","src":"9732:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9731:6:15"},"scope":3088,"src":"9640:182:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2902,"nodeType":"Block","src":"9932:53:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2893,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"9949:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9955:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9949:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"id":2898,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"9974:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2896,"name":"body","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"9959:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9964:9:15","memberName":"readUint8","nodeType":"MemberAccess","referencedDeclaration":6068,"src":"9959:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9959:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9949:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2892,"id":2901,"nodeType":"Return","src":"9942:36:15"}]},"id":2903,"implemented":true,"kind":"function","modifiers":[],"name":"progress","nameLocation":"9837:8:15","nodeType":"FunctionDefinition","parameters":{"id":2889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2886,"mutability":"mutable","name":"body","nameLocation":"9868:4:15","nodeType":"VariableDeclaration","scope":2903,"src":"9855:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2885,"name":"bytes","nodeType":"ElementaryTypeName","src":"9855:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2888,"mutability":"mutable","name":"off","nameLocation":"9890:3:15","nodeType":"VariableDeclaration","scope":2903,"src":"9882:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2887,"name":"uint256","nodeType":"ElementaryTypeName","src":"9882:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9845:54:15"},"returnParameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2903,"src":"9923:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2890,"name":"uint256","nodeType":"ElementaryTypeName","src":"9923:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9922:9:15"},"scope":3088,"src":"9828:157:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3086,"nodeType":"Block","src":"10223:3919:15","statements":[{"id":3085,"nodeType":"UncheckedBlock","src":"11959:2177:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2912,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"11991:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11996:6:15","memberName":"length","nodeType":"MemberAccess","src":"11991:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"38313932","id":2914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12006:4:15","typeDescriptions":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"},"value":"8192"},"src":"11991:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c6f6e67206b657973206e6f74207065726d6974746564","id":2916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12012:25:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e23270aecf7702fd4b1bd212912c277507361dc8248ebed5ad0286c9b051069","typeString":"literal_string \"Long keys not permitted\""},"value":"Long keys not permitted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e23270aecf7702fd4b1bd212912c277507361dc8248ebed5ad0286c9b051069","typeString":"literal_string \"Long keys not permitted\""}],"id":2911,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11983:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11983:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2918,"nodeType":"ExpressionStatement","src":"11983:55:15"},{"assignments":[2920],"declarations":[{"constant":false,"id":2920,"mutability":"mutable","name":"ac1","nameLocation":"12060:3:15","nodeType":"VariableDeclaration","scope":3085,"src":"12052:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2919,"name":"uint256","nodeType":"ElementaryTypeName","src":"12052:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2921,"nodeType":"VariableDeclarationStatement","src":"12052:11:15"},{"assignments":[2923],"declarations":[{"constant":false,"id":2923,"mutability":"mutable","name":"ac2","nameLocation":"12085:3:15","nodeType":"VariableDeclaration","scope":3085,"src":"12077:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2922,"name":"uint256","nodeType":"ElementaryTypeName","src":"12077:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2924,"nodeType":"VariableDeclarationStatement","src":"12077:11:15"},{"body":{"id":2988,"nodeType":"Block","src":"12153:619:15","statements":[{"assignments":[2940],"declarations":[{"constant":false,"id":2940,"mutability":"mutable","name":"word","nameLocation":"12179:4:15","nodeType":"VariableDeclaration","scope":2988,"src":"12171:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2939,"name":"uint256","nodeType":"ElementaryTypeName","src":"12171:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2941,"nodeType":"VariableDeclarationStatement","src":"12171:12:15"},{"AST":{"nodeType":"YulBlock","src":"12210:76:15","statements":[{"nodeType":"YulAssignment","src":"12232:36:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12254:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"12260:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12250:3:15"},"nodeType":"YulFunctionCall","src":"12250:13:15"},{"name":"i","nodeType":"YulIdentifier","src":"12265:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12246:3:15"},"nodeType":"YulFunctionCall","src":"12246:21:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12240:5:15"},"nodeType":"YulFunctionCall","src":"12240:28:15"},"variableNames":[{"name":"word","nodeType":"YulIdentifier","src":"12232:4:15"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2906,"isOffset":false,"isSlot":false,"src":"12254:4:15","valueSize":1},{"declaration":2926,"isOffset":false,"isSlot":false,"src":"12265:1:15","valueSize":1},{"declaration":2940,"isOffset":false,"isSlot":false,"src":"12232:4:15","valueSize":1}],"id":2942,"nodeType":"InlineAssembly","src":"12201:85:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2943,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"12307:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":2944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12311:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12307:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2946,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"12316:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12321:6:15","memberName":"length","nodeType":"MemberAccess","src":"12316:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12307:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2971,"nodeType":"IfStatement","src":"12303:166:15","trueBody":{"id":2970,"nodeType":"Block","src":"12329:140:15","statements":[{"assignments":[2950],"declarations":[{"constant":false,"id":2950,"mutability":"mutable","name":"unused","nameLocation":"12359:6:15","nodeType":"VariableDeclaration","scope":2970,"src":"12351:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2949,"name":"uint256","nodeType":"ElementaryTypeName","src":"12351:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2960,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":2951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12368:3:15","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2952,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"12375:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12380:6:15","memberName":"length","nodeType":"MemberAccess","src":"12375:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2954,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"12389:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12375:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2956,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12374:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12374:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12368:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12351:44:15"},{"expression":{"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2961,"name":"word","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"12417:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2962,"name":"word","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"12425:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":2963,"name":"unused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"12433:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12425:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2965,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12424:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2966,"name":"unused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"12444:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12424:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12417:33:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2969,"nodeType":"ExpressionStatement","src":"12417:33:15"}]}},{"expression":{"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2972,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"12486:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2973,"name":"word","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"12514:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307846463030464630304646303046463030464630304646303046463030464630304646303046463030464630304646303046463030464630304646303046463030","id":2974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12545:66:15","typeDescriptions":{"typeIdentifier":"t_rational_115341536360906404779899502576747487978354537254490211650198994186870666100480_by_1","typeString":"int_const 1153...(70 digits omitted)...0480"},"value":"0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00"},"src":"12514:97:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2976,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12513:99:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12636:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12513:124:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12486:151:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2980,"nodeType":"ExpressionStatement","src":"12486:151:15"},{"expression":{"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2981,"name":"ac2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"12655:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2982,"name":"word","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"12663:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830304646303046463030464630304646303046463030464630304646303046463030464630304646303046463030464630304646303046463030464630304646","id":2983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12690:66:15","typeDescriptions":{"typeIdentifier":"t_rational_450552876409790643671482431940419874915447411150352389258589821042463539455_by_1","typeString":"int_const 4505...(67 digits omitted)...9455"},"value":"0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF"},"src":"12663:93:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2985,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12662:95:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12655:102:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2987,"nodeType":"ExpressionStatement","src":"12655:102:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2929,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"12122:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2930,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"12126:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12131:6:15","memberName":"length","nodeType":"MemberAccess","src":"12126:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3331","id":2932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12140:2:15","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"12126:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12122:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2989,"initializationExpression":{"assignments":[2926],"declarations":[{"constant":false,"id":2926,"mutability":"mutable","name":"i","nameLocation":"12115:1:15","nodeType":"VariableDeclaration","scope":2989,"src":"12107:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2925,"name":"uint256","nodeType":"ElementaryTypeName","src":"12107:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2928,"initialValue":{"hexValue":"30","id":2927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12119:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12107:13:15"},"loopExpression":{"expression":{"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2935,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"12144:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12149:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12144:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2938,"nodeType":"ExpressionStatement","src":"12144:7:15"},"nodeType":"ForStatement","src":"12102:670:15"},{"expression":{"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2990,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"12785:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2991,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"12808:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030464646463030303046464646303030304646464630303030464646463030303046464646303030304646464630303030464646463030303046464646","id":2992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12834:66:15","typeDescriptions":{"typeIdentifier":"t_rational_1766820105243087041267848467410591083712559083657179364930612997358944255_by_1","typeString":"int_const 1766...(65 digits omitted)...4255"},"value":"0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF"},"src":"12808:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2994,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12807:94:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2995,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"12922:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307846464646303030304646464630303030464646463030303046464646303030304646464630303030464646463030303046464646303030304646464630303030","id":2996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12948:66:15","typeDescriptions":{"typeIdentifier":"t_rational_115790322417210952336529717160220497262186272106556906860092653394915770695680_by_1","typeString":"int_const 1157...(70 digits omitted)...5680"},"value":"0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000"},"src":"12922:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2998,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12921:94:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13039:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12921:120:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3001,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12920:122:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12807:235:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12785:257:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3004,"nodeType":"ExpressionStatement","src":"12785:257:15"},{"expression":{"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3005,"name":"ac2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"13056:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3006,"name":"ac2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"13079:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030464646463030303046464646303030304646464630303030464646463030303046464646303030304646464630303030464646463030303046464646","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13105:66:15","typeDescriptions":{"typeIdentifier":"t_rational_1766820105243087041267848467410591083712559083657179364930612997358944255_by_1","typeString":"int_const 1766...(65 digits omitted)...4255"},"value":"0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF"},"src":"13079:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3009,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13078:94:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3010,"name":"ac2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"13193:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307846464646303030304646464630303030464646463030303046464646303030304646464630303030464646463030303046464646303030304646464630303030","id":3011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13219:66:15","typeDescriptions":{"typeIdentifier":"t_rational_115790322417210952336529717160220497262186272106556906860092653394915770695680_by_1","typeString":"int_const 1157...(70 digits omitted)...5680"},"value":"0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000"},"src":"13193:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3013,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13192:94:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13310:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13192:120:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3016,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13191:122:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13078:235:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13056:257:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3019,"nodeType":"ExpressionStatement","src":"13056:257:15"},{"expression":{"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3020,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"13327:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3021,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"13334:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13341:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"13334:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3024,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13333:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3025,"name":"ac2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"13346:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13333:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13327:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3028,"nodeType":"ExpressionStatement","src":"13327:22:15"},{"expression":{"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3029,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"13363:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3030,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"13386:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030303030304646464646464646303030303030303046464646464646463030303030303030464646464646464630303030303030304646464646464646","id":3031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13412:66:15","typeDescriptions":{"typeIdentifier":"t_rational_26959946660873538060741835960174461801791452538186943042387869433855_by_1","typeString":"int_const 2695...(60 digits omitted)...3855"},"value":"0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF"},"src":"13386:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3033,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13385:94:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3034,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"13500:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307846464646464646463030303030303030464646464646464630303030303030304646464646464646303030303030303046464646464646463030303030303030","id":3035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13526:66:15","typeDescriptions":{"typeIdentifier":"t_rational_115792089210356248762697446947946071893095522863849111501270640965525260206080_by_1","typeString":"int_const 1157...(70 digits omitted)...6080"},"value":"0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000"},"src":"13500:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3037,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13499:94:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13617:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"13499:120:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3040,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13498:122:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13385:235:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13363:257:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3043,"nodeType":"ExpressionStatement","src":"13363:257:15"},{"expression":{"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3044,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"13634:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3045,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"13657:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030303030303030303030303030464646464646464646464646464646463030303030303030303030303030303046464646464646464646464646464646","id":3046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13683:66:15","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763495507056286727952657427581105975853055_by_1","typeString":"int_const 6277...(50 digits omitted)...3055"},"value":"0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF"},"src":"13657:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3048,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13656:94:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3049,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"13771:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307846464646464646464646464646464646303030303030303030303030303030304646464646464646464646464646464630303030303030303030303030303030","id":3050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13797:66:15","typeDescriptions":{"typeIdentifier":"t_rational_115792089237316195417293883273301227089774477609353836086800156426807153786880_by_1","typeString":"int_const 1157...(70 digits omitted)...6880"},"value":"0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000"},"src":"13771:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3052,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13770:94:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13888:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"13770:120:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3055,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13769:122:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13656:235:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13634:257:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3058,"nodeType":"ExpressionStatement","src":"13634:257:15"},{"expression":{"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3059,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"13905:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3060,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"13928:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030303030303030303030303030303030303030303030303030303030304646464646464646464646464646464646464646464646464646464646464646","id":3061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13954:66:15","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"},"value":"0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"},"src":"13928:92:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3063,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13927:94:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3064,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"14041:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14048:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"14041:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3067,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14040:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13927:125:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13905:147:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3070,"nodeType":"ExpressionStatement","src":"13905:147:15"},{"expression":{"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3071,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"14066:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3072,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"14074:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14081:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14074:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3075,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14073:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307846464646","id":3076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14087:6:15","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"value":"0xFFFF"},"src":"14073:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14066:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3079,"nodeType":"ExpressionStatement","src":"14066:27:15"},{"expression":{"arguments":[{"id":3082,"name":"ac1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"14121:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14114:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":3080,"name":"uint16","nodeType":"ElementaryTypeName","src":"14114:6:15","typeDescriptions":{}}},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14114:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":2910,"id":3084,"nodeType":"Return","src":"14107:18:15"}]}]},"documentation":{"id":2904,"nodeType":"StructuredDocumentation","src":"9991:154:15","text":" @dev Computes the keytag for a chunk of data.\n @param data The data to compute a keytag for.\n @return The computed key tag."},"id":3087,"implemented":true,"kind":"function","modifiers":[],"name":"computeKeytag","nameLocation":"10159:13:15","nodeType":"FunctionDefinition","parameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2906,"mutability":"mutable","name":"data","nameLocation":"10186:4:15","nodeType":"VariableDeclaration","scope":3087,"src":"10173:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2905,"name":"bytes","nodeType":"ElementaryTypeName","src":"10173:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10172:19:15"},"returnParameters":{"id":2910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3087,"src":"10215:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2908,"name":"uint16","nodeType":"ElementaryTypeName","src":"10215:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"10214:8:15"},"scope":3088,"src":"10150:3992:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3089,"src":"236:13908:15","usedErrors":[]}],"src":"31:14114:15"},"id":15},"contracts/ethregistrar/IBaseRegistrar.sol":{"ast":{"absolutePath":"contracts/ethregistrar/IBaseRegistrar.sol","exportedSymbols":{"ENS":[3320],"IBaseRegistrar":[3183],"IERC165":[1990],"IERC721":[1954]},"id":3184,"nodeType":"SourceUnit","nodes":[{"absolutePath":"contracts/registry/ENS.sol","file":"../registry/ENS.sol","id":3090,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3184,"sourceUnit":3321,"src":"0:29:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IBaseRegistrar.sol","file":"./IBaseRegistrar.sol","id":3091,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3184,"sourceUnit":3184,"src":"30:30:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":3092,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3184,"sourceUnit":1955,"src":"61:58:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3093,"name":"IERC721","nameLocations":["149:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":1954,"src":"149:7:16"},"id":3094,"nodeType":"InheritanceSpecifier","src":"149:7:16"}],"canonicalName":"IBaseRegistrar","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3183,"linearizedBaseContracts":[3183,1954,1990],"name":"IBaseRegistrar","nameLocation":"131:14:16","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"0a8bb31534c0ed46f380cb867bd5c803a189ced9a764e30b3a4991a9901d7474","id":3098,"name":"ControllerAdded","nameLocation":"169:15:16","nodeType":"EventDefinition","parameters":{"id":3097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3096,"indexed":true,"mutability":"mutable","name":"controller","nameLocation":"201:10:16","nodeType":"VariableDeclaration","scope":3098,"src":"185:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3095,"name":"address","nodeType":"ElementaryTypeName","src":"185:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"184:28:16"},"src":"163:50:16"},{"anonymous":false,"eventSelector":"33d83959be2573f5453b12eb9d43b3499bc57d96bd2f067ba44803c859e81113","id":3102,"name":"ControllerRemoved","nameLocation":"224:17:16","nodeType":"EventDefinition","parameters":{"id":3101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3100,"indexed":true,"mutability":"mutable","name":"controller","nameLocation":"258:10:16","nodeType":"VariableDeclaration","scope":3102,"src":"242:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3099,"name":"address","nodeType":"ElementaryTypeName","src":"242:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"241:28:16"},"src":"218:52:16"},{"anonymous":false,"eventSelector":"ea3d7e1195a15d2ddcd859b01abd4c6b960fa9f9264e499a70a90c7f0c64b717","id":3110,"name":"NameMigrated","nameLocation":"281:12:16","nodeType":"EventDefinition","parameters":{"id":3109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3104,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"319:2:16","nodeType":"VariableDeclaration","scope":3110,"src":"303:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3103,"name":"uint256","nodeType":"ElementaryTypeName","src":"303:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3106,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"347:5:16","nodeType":"VariableDeclaration","scope":3110,"src":"331:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3105,"name":"address","nodeType":"ElementaryTypeName","src":"331:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3108,"indexed":false,"mutability":"mutable","name":"expires","nameLocation":"370:7:16","nodeType":"VariableDeclaration","scope":3110,"src":"362:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3107,"name":"uint256","nodeType":"ElementaryTypeName","src":"362:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"293:90:16"},"src":"275:109:16"},{"anonymous":false,"eventSelector":"b3d987963d01b2f68493b4bdb130988f157ea43070d4ad840fee0466ed9370d9","id":3118,"name":"NameRegistered","nameLocation":"395:14:16","nodeType":"EventDefinition","parameters":{"id":3117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3112,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"435:2:16","nodeType":"VariableDeclaration","scope":3118,"src":"419:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3111,"name":"uint256","nodeType":"ElementaryTypeName","src":"419:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3114,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"463:5:16","nodeType":"VariableDeclaration","scope":3118,"src":"447:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3113,"name":"address","nodeType":"ElementaryTypeName","src":"447:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3116,"indexed":false,"mutability":"mutable","name":"expires","nameLocation":"486:7:16","nodeType":"VariableDeclaration","scope":3118,"src":"478:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3115,"name":"uint256","nodeType":"ElementaryTypeName","src":"478:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"409:90:16"},"src":"389:111:16"},{"anonymous":false,"eventSelector":"9b87a00e30f1ac65d898f070f8a3488fe60517182d0a2098e1b4b93a54aa9bd6","id":3124,"name":"NameRenewed","nameLocation":"511:11:16","nodeType":"EventDefinition","parameters":{"id":3123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3120,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"539:2:16","nodeType":"VariableDeclaration","scope":3124,"src":"523:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3119,"name":"uint256","nodeType":"ElementaryTypeName","src":"523:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3122,"indexed":false,"mutability":"mutable","name":"expires","nameLocation":"551:7:16","nodeType":"VariableDeclaration","scope":3124,"src":"543:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3121,"name":"uint256","nodeType":"ElementaryTypeName","src":"543:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"522:37:16"},"src":"505:55:16"},{"functionSelector":"a7fc7a07","id":3129,"implemented":false,"kind":"function","modifiers":[],"name":"addController","nameLocation":"643:13:16","nodeType":"FunctionDefinition","parameters":{"id":3127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3126,"mutability":"mutable","name":"controller","nameLocation":"665:10:16","nodeType":"VariableDeclaration","scope":3129,"src":"657:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3125,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"656:20:16"},"returnParameters":{"id":3128,"nodeType":"ParameterList","parameters":[],"src":"685:0:16"},"scope":3183,"src":"634:52:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f6a74ed7","id":3134,"implemented":false,"kind":"function","modifiers":[],"name":"removeController","nameLocation":"753:16:16","nodeType":"FunctionDefinition","parameters":{"id":3132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3131,"mutability":"mutable","name":"controller","nameLocation":"778:10:16","nodeType":"VariableDeclaration","scope":3134,"src":"770:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3130,"name":"address","nodeType":"ElementaryTypeName","src":"770:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"769:20:16"},"returnParameters":{"id":3133,"nodeType":"ParameterList","parameters":[],"src":"798:0:16"},"scope":3183,"src":"744:55:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4e543b26","id":3139,"implemented":false,"kind":"function","modifiers":[],"name":"setResolver","nameLocation":"874:11:16","nodeType":"FunctionDefinition","parameters":{"id":3137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3136,"mutability":"mutable","name":"resolver","nameLocation":"894:8:16","nodeType":"VariableDeclaration","scope":3139,"src":"886:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3135,"name":"address","nodeType":"ElementaryTypeName","src":"886:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"885:18:16"},"returnParameters":{"id":3138,"nodeType":"ParameterList","parameters":[],"src":"912:0:16"},"scope":3183,"src":"865:48:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d6e4fa86","id":3146,"implemented":false,"kind":"function","modifiers":[],"name":"nameExpires","nameLocation":"997:11:16","nodeType":"FunctionDefinition","parameters":{"id":3142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3141,"mutability":"mutable","name":"id","nameLocation":"1017:2:16","nodeType":"VariableDeclaration","scope":3146,"src":"1009:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3140,"name":"uint256","nodeType":"ElementaryTypeName","src":"1009:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1008:12:16"},"returnParameters":{"id":3145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3146,"src":"1044:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3143,"name":"uint256","nodeType":"ElementaryTypeName","src":"1044:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1043:9:16"},"scope":3183,"src":"988:65:16","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"96e494e8","id":3153,"implemented":false,"kind":"function","modifiers":[],"name":"available","nameLocation":"1141:9:16","nodeType":"FunctionDefinition","parameters":{"id":3149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3148,"mutability":"mutable","name":"id","nameLocation":"1159:2:16","nodeType":"VariableDeclaration","scope":3153,"src":"1151:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3147,"name":"uint256","nodeType":"ElementaryTypeName","src":"1151:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1150:12:16"},"returnParameters":{"id":3152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3151,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3153,"src":"1186:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3150,"name":"bool","nodeType":"ElementaryTypeName","src":"1186:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1185:6:16"},"scope":3183,"src":"1132:60:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3154,"nodeType":"StructuredDocumentation","src":"1198:40:16","text":" @dev Register a name."},"functionSelector":"fca247ac","id":3165,"implemented":false,"kind":"function","modifiers":[],"name":"register","nameLocation":"1252:8:16","nodeType":"FunctionDefinition","parameters":{"id":3161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3156,"mutability":"mutable","name":"id","nameLocation":"1278:2:16","nodeType":"VariableDeclaration","scope":3165,"src":"1270:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3155,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3158,"mutability":"mutable","name":"owner","nameLocation":"1298:5:16","nodeType":"VariableDeclaration","scope":3165,"src":"1290:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3157,"name":"address","nodeType":"ElementaryTypeName","src":"1290:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3160,"mutability":"mutable","name":"duration","nameLocation":"1321:8:16","nodeType":"VariableDeclaration","scope":3165,"src":"1313:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3159,"name":"uint256","nodeType":"ElementaryTypeName","src":"1313:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1260:75:16"},"returnParameters":{"id":3164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3165,"src":"1354:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3162,"name":"uint256","nodeType":"ElementaryTypeName","src":"1354:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1353:9:16"},"scope":3183,"src":"1243:120:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c475abff","id":3174,"implemented":false,"kind":"function","modifiers":[],"name":"renew","nameLocation":"1378:5:16","nodeType":"FunctionDefinition","parameters":{"id":3170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3167,"mutability":"mutable","name":"id","nameLocation":"1392:2:16","nodeType":"VariableDeclaration","scope":3174,"src":"1384:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3166,"name":"uint256","nodeType":"ElementaryTypeName","src":"1384:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3169,"mutability":"mutable","name":"duration","nameLocation":"1404:8:16","nodeType":"VariableDeclaration","scope":3174,"src":"1396:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3168,"name":"uint256","nodeType":"ElementaryTypeName","src":"1396:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1383:30:16"},"returnParameters":{"id":3173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3174,"src":"1432:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3171,"name":"uint256","nodeType":"ElementaryTypeName","src":"1432:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1431:9:16"},"scope":3183,"src":"1369:72:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3175,"nodeType":"StructuredDocumentation","src":"1447:91:16","text":" @dev Reclaim ownership of a name in ENS, if you own it in the registrar."},"functionSelector":"28ed4f6c","id":3182,"implemented":false,"kind":"function","modifiers":[],"name":"reclaim","nameLocation":"1552:7:16","nodeType":"FunctionDefinition","parameters":{"id":3180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3177,"mutability":"mutable","name":"id","nameLocation":"1568:2:16","nodeType":"VariableDeclaration","scope":3182,"src":"1560:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3176,"name":"uint256","nodeType":"ElementaryTypeName","src":"1560:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3179,"mutability":"mutable","name":"owner","nameLocation":"1580:5:16","nodeType":"VariableDeclaration","scope":3182,"src":"1572:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3178,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1559:27:16"},"returnParameters":{"id":3181,"nodeType":"ParameterList","parameters":[],"src":"1595:0:16"},"scope":3183,"src":"1543:53:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3184,"src":"121:1477:16","usedErrors":[]}],"src":"0:1599:16"},"id":16},"contracts/registry/ENS.sol":{"ast":{"absolutePath":"contracts/registry/ENS.sol","exportedSymbols":{"ENS":[3320]},"id":3321,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3185,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"31:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"ENS","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3320,"linearizedBaseContracts":[3320],"name":"ENS","nameLocation":"67:3:17","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"ce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82","id":3193,"name":"NewOwner","nameLocation":"156:8:17","nodeType":"EventDefinition","parameters":{"id":3192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3187,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"181:4:17","nodeType":"VariableDeclaration","scope":3193,"src":"165:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"165:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3189,"indexed":true,"mutability":"mutable","name":"label","nameLocation":"203:5:17","nodeType":"VariableDeclaration","scope":3193,"src":"187:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"187:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3191,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"218:5:17","nodeType":"VariableDeclaration","scope":3193,"src":"210:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3190,"name":"address","nodeType":"ElementaryTypeName","src":"210:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"164:60:17"},"src":"150:75:17"},{"anonymous":false,"eventSelector":"d4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d266","id":3199,"name":"Transfer","nameLocation":"314:8:17","nodeType":"EventDefinition","parameters":{"id":3198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3195,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"339:4:17","nodeType":"VariableDeclaration","scope":3199,"src":"323:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"323:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3197,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"353:5:17","nodeType":"VariableDeclaration","scope":3199,"src":"345:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3196,"name":"address","nodeType":"ElementaryTypeName","src":"345:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"322:37:17"},"src":"308:52:17"},{"anonymous":false,"eventSelector":"335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0","id":3205,"name":"NewResolver","nameLocation":"424:11:17","nodeType":"EventDefinition","parameters":{"id":3204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3201,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"452:4:17","nodeType":"VariableDeclaration","scope":3205,"src":"436:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3200,"name":"bytes32","nodeType":"ElementaryTypeName","src":"436:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3203,"indexed":false,"mutability":"mutable","name":"resolver","nameLocation":"466:8:17","nodeType":"VariableDeclaration","scope":3205,"src":"458:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3202,"name":"address","nodeType":"ElementaryTypeName","src":"458:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"435:40:17"},"src":"418:58:17"},{"anonymous":false,"eventSelector":"1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa68","id":3211,"name":"NewTTL","nameLocation":"533:6:17","nodeType":"EventDefinition","parameters":{"id":3210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3207,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"556:4:17","nodeType":"VariableDeclaration","scope":3211,"src":"540:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"540:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3209,"indexed":false,"mutability":"mutable","name":"ttl","nameLocation":"569:3:17","nodeType":"VariableDeclaration","scope":3211,"src":"562:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3208,"name":"uint64","nodeType":"ElementaryTypeName","src":"562:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"539:34:17"},"src":"527:47:17"},{"anonymous":false,"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":3219,"name":"ApprovalForAll","nameLocation":"638:14:17","nodeType":"EventDefinition","parameters":{"id":3218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3213,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"678:5:17","nodeType":"VariableDeclaration","scope":3219,"src":"662:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3212,"name":"address","nodeType":"ElementaryTypeName","src":"662:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3215,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"709:8:17","nodeType":"VariableDeclaration","scope":3219,"src":"693:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3214,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3217,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"732:8:17","nodeType":"VariableDeclaration","scope":3219,"src":"727:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3216,"name":"bool","nodeType":"ElementaryTypeName","src":"727:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"652:94:17"},"src":"632:115:17"},{"functionSelector":"cf408823","id":3230,"implemented":false,"kind":"function","modifiers":[],"name":"setRecord","nameLocation":"762:9:17","nodeType":"FunctionDefinition","parameters":{"id":3228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3221,"mutability":"mutable","name":"node","nameLocation":"789:4:17","nodeType":"VariableDeclaration","scope":3230,"src":"781:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3220,"name":"bytes32","nodeType":"ElementaryTypeName","src":"781:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3223,"mutability":"mutable","name":"owner","nameLocation":"811:5:17","nodeType":"VariableDeclaration","scope":3230,"src":"803:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3222,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3225,"mutability":"mutable","name":"resolver","nameLocation":"834:8:17","nodeType":"VariableDeclaration","scope":3230,"src":"826:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3224,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3227,"mutability":"mutable","name":"ttl","nameLocation":"859:3:17","nodeType":"VariableDeclaration","scope":3230,"src":"852:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3226,"name":"uint64","nodeType":"ElementaryTypeName","src":"852:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"771:97:17"},"returnParameters":{"id":3229,"nodeType":"ParameterList","parameters":[],"src":"877:0:17"},"scope":3320,"src":"753:125:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5ef2c7f0","id":3243,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeRecord","nameLocation":"893:16:17","nodeType":"FunctionDefinition","parameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3232,"mutability":"mutable","name":"node","nameLocation":"927:4:17","nodeType":"VariableDeclaration","scope":3243,"src":"919:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"919:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3234,"mutability":"mutable","name":"label","nameLocation":"949:5:17","nodeType":"VariableDeclaration","scope":3243,"src":"941:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3233,"name":"bytes32","nodeType":"ElementaryTypeName","src":"941:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3236,"mutability":"mutable","name":"owner","nameLocation":"972:5:17","nodeType":"VariableDeclaration","scope":3243,"src":"964:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3235,"name":"address","nodeType":"ElementaryTypeName","src":"964:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3238,"mutability":"mutable","name":"resolver","nameLocation":"995:8:17","nodeType":"VariableDeclaration","scope":3243,"src":"987:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3237,"name":"address","nodeType":"ElementaryTypeName","src":"987:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3240,"mutability":"mutable","name":"ttl","nameLocation":"1020:3:17","nodeType":"VariableDeclaration","scope":3243,"src":"1013:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3239,"name":"uint64","nodeType":"ElementaryTypeName","src":"1013:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"909:120:17"},"returnParameters":{"id":3242,"nodeType":"ParameterList","parameters":[],"src":"1038:0:17"},"scope":3320,"src":"884:155:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"06ab5923","id":3254,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeOwner","nameLocation":"1054:15:17","nodeType":"FunctionDefinition","parameters":{"id":3250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3245,"mutability":"mutable","name":"node","nameLocation":"1087:4:17","nodeType":"VariableDeclaration","scope":3254,"src":"1079:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1079:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3247,"mutability":"mutable","name":"label","nameLocation":"1109:5:17","nodeType":"VariableDeclaration","scope":3254,"src":"1101:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1101:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3249,"mutability":"mutable","name":"owner","nameLocation":"1132:5:17","nodeType":"VariableDeclaration","scope":3254,"src":"1124:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3248,"name":"address","nodeType":"ElementaryTypeName","src":"1124:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1069:74:17"},"returnParameters":{"id":3253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3254,"src":"1162:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1162:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1161:9:17"},"scope":3320,"src":"1045:126:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1896f70a","id":3261,"implemented":false,"kind":"function","modifiers":[],"name":"setResolver","nameLocation":"1186:11:17","nodeType":"FunctionDefinition","parameters":{"id":3259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3256,"mutability":"mutable","name":"node","nameLocation":"1206:4:17","nodeType":"VariableDeclaration","scope":3261,"src":"1198:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3255,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1198:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3258,"mutability":"mutable","name":"resolver","nameLocation":"1220:8:17","nodeType":"VariableDeclaration","scope":3261,"src":"1212:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3257,"name":"address","nodeType":"ElementaryTypeName","src":"1212:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1197:32:17"},"returnParameters":{"id":3260,"nodeType":"ParameterList","parameters":[],"src":"1238:0:17"},"scope":3320,"src":"1177:62:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5b0fc9c3","id":3268,"implemented":false,"kind":"function","modifiers":[],"name":"setOwner","nameLocation":"1254:8:17","nodeType":"FunctionDefinition","parameters":{"id":3266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3263,"mutability":"mutable","name":"node","nameLocation":"1271:4:17","nodeType":"VariableDeclaration","scope":3268,"src":"1263:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3262,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3265,"mutability":"mutable","name":"owner","nameLocation":"1285:5:17","nodeType":"VariableDeclaration","scope":3268,"src":"1277:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3264,"name":"address","nodeType":"ElementaryTypeName","src":"1277:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1262:29:17"},"returnParameters":{"id":3267,"nodeType":"ParameterList","parameters":[],"src":"1300:0:17"},"scope":3320,"src":"1245:56:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"14ab9038","id":3275,"implemented":false,"kind":"function","modifiers":[],"name":"setTTL","nameLocation":"1316:6:17","nodeType":"FunctionDefinition","parameters":{"id":3273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3270,"mutability":"mutable","name":"node","nameLocation":"1331:4:17","nodeType":"VariableDeclaration","scope":3275,"src":"1323:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3269,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1323:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3272,"mutability":"mutable","name":"ttl","nameLocation":"1344:3:17","nodeType":"VariableDeclaration","scope":3275,"src":"1337:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3271,"name":"uint64","nodeType":"ElementaryTypeName","src":"1337:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1322:26:17"},"returnParameters":{"id":3274,"nodeType":"ParameterList","parameters":[],"src":"1357:0:17"},"scope":3320,"src":"1307:51:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a22cb465","id":3282,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1373:17:17","nodeType":"FunctionDefinition","parameters":{"id":3280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3277,"mutability":"mutable","name":"operator","nameLocation":"1399:8:17","nodeType":"VariableDeclaration","scope":3282,"src":"1391:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3276,"name":"address","nodeType":"ElementaryTypeName","src":"1391:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3279,"mutability":"mutable","name":"approved","nameLocation":"1414:8:17","nodeType":"VariableDeclaration","scope":3282,"src":"1409:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3278,"name":"bool","nodeType":"ElementaryTypeName","src":"1409:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1390:33:17"},"returnParameters":{"id":3281,"nodeType":"ParameterList","parameters":[],"src":"1432:0:17"},"scope":3320,"src":"1364:69:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"02571be3","id":3289,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1448:5:17","nodeType":"FunctionDefinition","parameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"node","nameLocation":"1462:4:17","nodeType":"VariableDeclaration","scope":3289,"src":"1454:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3283,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1454:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1453:14:17"},"returnParameters":{"id":3288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3289,"src":"1491:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3286,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1490:9:17"},"scope":3320,"src":"1439:61:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0178b8bf","id":3296,"implemented":false,"kind":"function","modifiers":[],"name":"resolver","nameLocation":"1515:8:17","nodeType":"FunctionDefinition","parameters":{"id":3292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3291,"mutability":"mutable","name":"node","nameLocation":"1532:4:17","nodeType":"VariableDeclaration","scope":3296,"src":"1524:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3290,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1524:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1523:14:17"},"returnParameters":{"id":3295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3296,"src":"1561:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3293,"name":"address","nodeType":"ElementaryTypeName","src":"1561:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1560:9:17"},"scope":3320,"src":"1506:64:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"16a25cbd","id":3303,"implemented":false,"kind":"function","modifiers":[],"name":"ttl","nameLocation":"1585:3:17","nodeType":"FunctionDefinition","parameters":{"id":3299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3298,"mutability":"mutable","name":"node","nameLocation":"1597:4:17","nodeType":"VariableDeclaration","scope":3303,"src":"1589:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1589:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1588:14:17"},"returnParameters":{"id":3302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3303,"src":"1626:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3300,"name":"uint64","nodeType":"ElementaryTypeName","src":"1626:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1625:8:17"},"scope":3320,"src":"1576:58:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f79fe538","id":3310,"implemented":false,"kind":"function","modifiers":[],"name":"recordExists","nameLocation":"1649:12:17","nodeType":"FunctionDefinition","parameters":{"id":3306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3305,"mutability":"mutable","name":"node","nameLocation":"1670:4:17","nodeType":"VariableDeclaration","scope":3310,"src":"1662:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3304,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1662:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1661:14:17"},"returnParameters":{"id":3309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3310,"src":"1699:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3307,"name":"bool","nodeType":"ElementaryTypeName","src":"1699:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1698:6:17"},"scope":3320,"src":"1640:65:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e985e9c5","id":3319,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"1720:16:17","nodeType":"FunctionDefinition","parameters":{"id":3315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3312,"mutability":"mutable","name":"owner","nameLocation":"1754:5:17","nodeType":"VariableDeclaration","scope":3319,"src":"1746:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3311,"name":"address","nodeType":"ElementaryTypeName","src":"1746:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3314,"mutability":"mutable","name":"operator","nameLocation":"1777:8:17","nodeType":"VariableDeclaration","scope":3319,"src":"1769:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3313,"name":"address","nodeType":"ElementaryTypeName","src":"1769:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1736:55:17"},"returnParameters":{"id":3318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3319,"src":"1815:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3316,"name":"bool","nodeType":"ElementaryTypeName","src":"1815:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1814:6:17"},"scope":3320,"src":"1711:110:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3321,"src":"57:1766:17","usedErrors":[]}],"src":"31:1793:17"},"id":17},"contracts/resolvers/IMulticallable.sol":{"ast":{"absolutePath":"contracts/resolvers/IMulticallable.sol","exportedSymbols":{"IMulticallable":[3343]},"id":3344,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3322,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IMulticallable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3343,"linearizedBaseContracts":[3343],"name":"IMulticallable","nameLocation":"67:14:18","nodeType":"ContractDefinition","nodes":[{"functionSelector":"ac9650d8","id":3331,"implemented":false,"kind":"function","modifiers":[],"name":"multicall","nameLocation":"97:9:18","nodeType":"FunctionDefinition","parameters":{"id":3326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3325,"mutability":"mutable","name":"data","nameLocation":"133:4:18","nodeType":"VariableDeclaration","scope":3331,"src":"116:21:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3323,"name":"bytes","nodeType":"ElementaryTypeName","src":"116:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3324,"nodeType":"ArrayTypeName","src":"116:7:18","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"106:37:18"},"returnParameters":{"id":3330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3329,"mutability":"mutable","name":"results","nameLocation":"177:7:18","nodeType":"VariableDeclaration","scope":3331,"src":"162:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3327,"name":"bytes","nodeType":"ElementaryTypeName","src":"162:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3328,"nodeType":"ArrayTypeName","src":"162:7:18","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"161:24:18"},"scope":3343,"src":"88:98:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e32954eb","id":3342,"implemented":false,"kind":"function","modifiers":[],"name":"multicallWithNodeCheck","nameLocation":"201:22:18","nodeType":"FunctionDefinition","parameters":{"id":3337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3342,"src":"233:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3332,"name":"bytes32","nodeType":"ElementaryTypeName","src":"233:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3336,"mutability":"mutable","name":"data","nameLocation":"267:4:18","nodeType":"VariableDeclaration","scope":3342,"src":"250:21:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3334,"name":"bytes","nodeType":"ElementaryTypeName","src":"250:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3335,"nodeType":"ArrayTypeName","src":"250:7:18","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"223:54:18"},"returnParameters":{"id":3341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3340,"mutability":"mutable","name":"results","nameLocation":"311:7:18","nodeType":"VariableDeclaration","scope":3342,"src":"296:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3338,"name":"bytes","nodeType":"ElementaryTypeName","src":"296:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3339,"nodeType":"ArrayTypeName","src":"296:7:18","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"295:24:18"},"scope":3343,"src":"192:128:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3344,"src":"57:265:18","usedErrors":[]}],"src":"32:291:18"},"id":18},"contracts/resolvers/Multicallable.sol":{"ast":{"absolutePath":"contracts/resolvers/Multicallable.sol","exportedSymbols":{"ERC165":[1978],"IERC165":[1990],"IMulticallable":[3343],"Multicallable":[3496]},"id":3497,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3345,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:19"},{"absolutePath":"contracts/resolvers/IMulticallable.sol","file":"./IMulticallable.sol","id":3346,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3497,"sourceUnit":3344,"src":"57:30:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":3347,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3497,"sourceUnit":1979,"src":"88:64:19","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3348,"name":"IMulticallable","nameLocations":["189:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3343,"src":"189:14:19"},"id":3349,"nodeType":"InheritanceSpecifier","src":"189:14:19"},{"baseName":{"id":3350,"name":"ERC165","nameLocations":["205:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"205:6:19"},"id":3351,"nodeType":"InheritanceSpecifier","src":"205:6:19"}],"canonicalName":"Multicallable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3496,"linearizedBaseContracts":[3496,1978,1990,3343],"name":"Multicallable","nameLocation":"172:13:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":3437,"nodeType":"Block","src":"343:597:19","statements":[{"expression":{"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3362,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"353:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3366,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"375:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"380:6:19","memberName":"length","nodeType":"MemberAccess","src":"375:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"363:11:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":3363,"name":"bytes","nodeType":"ElementaryTypeName","src":"367:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3364,"nodeType":"ArrayTypeName","src":"367:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"363:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"353:34:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":3370,"nodeType":"ExpressionStatement","src":"353:34:19"},{"body":{"id":3433,"nodeType":"Block","src":"439:471:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3382,"name":"nodehash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"457:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"477:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"469:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"469:7:19","typeDescriptions":{}}},"id":3386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"469:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"457:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3408,"nodeType":"IfStatement","src":"453:267:19","trueBody":{"id":3407,"nodeType":"Block","src":"481:239:19","statements":[{"assignments":[3389],"declarations":[{"constant":false,"id":3389,"mutability":"mutable","name":"txNamehash","nameLocation":"507:10:19","nodeType":"VariableDeclaration","scope":3407,"src":"499:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"499:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3399,"initialValue":{"arguments":[{"baseExpression":{"baseExpression":{"id":3392,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"528:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":3394,"indexExpression":{"id":3393,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"533:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"528:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"hexValue":"3336","id":3396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"538:2:19","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"36"},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"528:13:19","startExpression":{"hexValue":"34","id":3395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"536:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}],"id":3391,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"520:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3390,"name":"bytes32","nodeType":"ElementaryTypeName","src":"520:7:19","typeDescriptions":{}}},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"520:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"499:43:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3401,"name":"txNamehash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"589:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3402,"name":"nodehash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"603:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"589:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6d756c746963616c6c3a20416c6c207265636f726473206d75737420686176652061206d61746368696e67206e616d6568617368","id":3404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"633:54:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_e0f8a6e7bdab31ebf5fea1195446f6f12fddc8619df8ea22a3ed3edf179dde30","typeString":"literal_string \"multicall: All records must have a matching namehash\""},"value":"multicall: All records must have a matching namehash"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e0f8a6e7bdab31ebf5fea1195446f6f12fddc8619df8ea22a3ed3edf179dde30","typeString":"literal_string \"multicall: All records must have a matching namehash\""}],"id":3400,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"560:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"560:145:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3406,"nodeType":"ExpressionStatement","src":"560:145:19"}]}},{"assignments":[3410,3412],"declarations":[{"constant":false,"id":3410,"mutability":"mutable","name":"success","nameLocation":"739:7:19","nodeType":"VariableDeclaration","scope":3433,"src":"734:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3409,"name":"bool","nodeType":"ElementaryTypeName","src":"734:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3412,"mutability":"mutable","name":"result","nameLocation":"761:6:19","nodeType":"VariableDeclaration","scope":3433,"src":"748:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3411,"name":"bytes","nodeType":"ElementaryTypeName","src":"748:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3422,"initialValue":{"arguments":[{"baseExpression":{"id":3418,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"815:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":3420,"indexExpression":{"id":3419,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"820:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"815:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":3415,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"779:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_Multicallable_$3496","typeString":"contract Multicallable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Multicallable_$3496","typeString":"contract Multicallable"}],"id":3414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"771:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3413,"name":"address","nodeType":"ElementaryTypeName","src":"771:7:19","typeDescriptions":{}}},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"771:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"785:12:19","memberName":"delegatecall","nodeType":"MemberAccess","src":"771:26:19","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"771:65:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"733:103:19"},{"expression":{"arguments":[{"id":3424,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3410,"src":"858:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3423,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"850:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"850:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3426,"nodeType":"ExpressionStatement","src":"850:16:19"},{"expression":{"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3427,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"880:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":3429,"indexExpression":{"id":3428,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"888:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"880:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3430,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3412,"src":"893:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"880:19:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3432,"nodeType":"ExpressionStatement","src":"880:19:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3375,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"417:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3376,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"421:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":3377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"426:6:19","memberName":"length","nodeType":"MemberAccess","src":"421:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"417:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3434,"initializationExpression":{"assignments":[3372],"declarations":[{"constant":false,"id":3372,"mutability":"mutable","name":"i","nameLocation":"410:1:19","nodeType":"VariableDeclaration","scope":3434,"src":"402:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3371,"name":"uint256","nodeType":"ElementaryTypeName","src":"402:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3374,"initialValue":{"hexValue":"30","id":3373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"414:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"402:13:19"},"loopExpression":{"expression":{"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"434:3:19","subExpression":{"id":3379,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"434:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3381,"nodeType":"ExpressionStatement","src":"434:3:19"},"nodeType":"ForStatement","src":"397:513:19"},{"expression":{"id":3435,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"926:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"functionReturnParameters":3361,"id":3436,"nodeType":"Return","src":"919:14:19"}]},"id":3438,"implemented":true,"kind":"function","modifiers":[],"name":"_multicall","nameLocation":"227:10:19","nodeType":"FunctionDefinition","parameters":{"id":3357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3353,"mutability":"mutable","name":"nodehash","nameLocation":"255:8:19","nodeType":"VariableDeclaration","scope":3438,"src":"247:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3352,"name":"bytes32","nodeType":"ElementaryTypeName","src":"247:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3356,"mutability":"mutable","name":"data","nameLocation":"290:4:19","nodeType":"VariableDeclaration","scope":3438,"src":"273:21:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3354,"name":"bytes","nodeType":"ElementaryTypeName","src":"273:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3355,"nodeType":"ArrayTypeName","src":"273:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"237:63:19"},"returnParameters":{"id":3361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3360,"mutability":"mutable","name":"results","nameLocation":"334:7:19","nodeType":"VariableDeclaration","scope":3438,"src":"319:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3358,"name":"bytes","nodeType":"ElementaryTypeName","src":"319:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3359,"nodeType":"ArrayTypeName","src":"319:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"318:24:19"},"scope":3496,"src":"218:722:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3342],"body":{"id":3454,"nodeType":"Block","src":"1273:50:19","statements":[{"expression":{"arguments":[{"id":3450,"name":"nodehash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"1301:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3451,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"1311:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}],"id":3449,"name":"_multicall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3438,"src":"1290:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (bytes32,bytes calldata[] calldata) returns (bytes memory[] memory)"}},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1290:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"functionReturnParameters":3448,"id":3453,"nodeType":"Return","src":"1283:33:19"}]},"functionSelector":"e32954eb","id":3455,"implemented":true,"kind":"function","modifiers":[],"name":"multicallWithNodeCheck","nameLocation":"1145:22:19","nodeType":"FunctionDefinition","parameters":{"id":3444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3440,"mutability":"mutable","name":"nodehash","nameLocation":"1185:8:19","nodeType":"VariableDeclaration","scope":3455,"src":"1177:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1177:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3443,"mutability":"mutable","name":"data","nameLocation":"1220:4:19","nodeType":"VariableDeclaration","scope":3455,"src":"1203:21:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3441,"name":"bytes","nodeType":"ElementaryTypeName","src":"1203:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3442,"nodeType":"ArrayTypeName","src":"1203:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1167:63:19"},"returnParameters":{"id":3448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3447,"mutability":"mutable","name":"results","nameLocation":"1264:7:19","nodeType":"VariableDeclaration","scope":3455,"src":"1249:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3445,"name":"bytes","nodeType":"ElementaryTypeName","src":"1249:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3446,"nodeType":"ArrayTypeName","src":"1249:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1248:24:19"},"scope":3496,"src":"1136:187:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3331],"body":{"id":3473,"nodeType":"Block","src":"1434:52:19","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1470:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1462:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3466,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1462:7:19","typeDescriptions":{}}},"id":3469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1462:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3470,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"1474:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}],"id":3465,"name":"_multicall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3438,"src":"1451:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (bytes32,bytes calldata[] calldata) returns (bytes memory[] memory)"}},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1451:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"functionReturnParameters":3464,"id":3472,"nodeType":"Return","src":"1444:35:19"}]},"functionSelector":"ac9650d8","id":3474,"implemented":true,"kind":"function","modifiers":[],"name":"multicall","nameLocation":"1338:9:19","nodeType":"FunctionDefinition","overrides":{"id":3460,"nodeType":"OverrideSpecifier","overrides":[],"src":"1392:8:19"},"parameters":{"id":3459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3458,"mutability":"mutable","name":"data","nameLocation":"1374:4:19","nodeType":"VariableDeclaration","scope":3474,"src":"1357:21:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3456,"name":"bytes","nodeType":"ElementaryTypeName","src":"1357:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3457,"nodeType":"ArrayTypeName","src":"1357:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1347:37:19"},"returnParameters":{"id":3464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3463,"mutability":"mutable","name":"results","nameLocation":"1425:7:19","nodeType":"VariableDeclaration","scope":3474,"src":"1410:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3461,"name":"bytes","nodeType":"ElementaryTypeName","src":"1410:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3462,"nodeType":"ArrayTypeName","src":"1410:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1409:24:19"},"scope":3496,"src":"1329:157:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1977],"body":{"id":3494,"nodeType":"Block","src":"1597:135:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3482,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"1626:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3484,"name":"IMulticallable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3343,"src":"1646:14:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMulticallable_$3343_$","typeString":"type(contract IMulticallable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IMulticallable_$3343_$","typeString":"type(contract IMulticallable)"}],"id":3483,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1641:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1641:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IMulticallable_$3343","typeString":"type(contract IMulticallable)"}},"id":3486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1662:11:19","memberName":"interfaceId","nodeType":"MemberAccess","src":"1641:32:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1626:47:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3490,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"1713:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3488,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1689:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_Multicallable_$3496_$","typeString":"type(contract super Multicallable)"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1695:17:19","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1977,"src":"1689:23:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1689:36:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1626:99:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3481,"id":3493,"nodeType":"Return","src":"1607:118:19"}]},"functionSelector":"01ffc9a7","id":3495,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1501:17:19","nodeType":"FunctionDefinition","overrides":{"id":3478,"nodeType":"OverrideSpecifier","overrides":[],"src":"1573:8:19"},"parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3476,"mutability":"mutable","name":"interfaceID","nameLocation":"1535:11:19","nodeType":"VariableDeclaration","scope":3495,"src":"1528:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3475,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1528:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1518:34:19"},"returnParameters":{"id":3481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3495,"src":"1591:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3479,"name":"bool","nodeType":"ElementaryTypeName","src":"1591:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1590:6:19"},"scope":3496,"src":"1492:240:19","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3497,"src":"154:1580:19","usedErrors":[]}],"src":"32:1703:19"},"id":19},"contracts/resolvers/PublicResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/PublicResolver.sol","exportedSymbols":{"ABIResolver":[4075],"AddrResolver":[4274],"AddressUpgradeable":[1555],"Buffer":[420],"BytesUtils":[6533],"ContentHashResolver":[4355],"ContextUpgradeable":[1606],"DNSResolver":[4831],"ENS":[3320],"ERC165":[1978],"ERC1967UpgradeUpgradeable":[909],"IABIResolver":[4852],"IAddrResolver":[4870],"IAddressResolver":[4891],"IBeaconUpgradeable":[919],"IContentHashResolver":[4908],"IDNSRecordResolver":[4941],"IDNSZoneResolver":[4960],"IERC165":[1990],"IERC1822ProxiableUpgradeable":[584],"IERC1967Upgradeable":[574],"IInterfaceResolver":[4981],"IMulticallable":[3343],"INameResolver":[4998],"INameWrapper":[6917],"IPubkeyResolver":[5019],"IReverseRegistrar":[5597],"ITextResolver":[5042],"IVersionableResolver":[5058],"Initializable":[1088],"InterfaceResolver":[5254],"Multicallable":[3496],"NameResolver":[5335],"OwnableUpgradeable":[553],"PubkeyResolver":[5442],"PublicResolver":[3852],"RRUtils":[3088],"ResolverBase":[3927],"StorageSlotUpgradeable":[1716],"TextResolver":[5535],"UUPSUpgradeable":[1225]},"id":3853,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3498,"literals":["solidity",">=","0.8",".17","<","0.9",".0"],"nodeType":"PragmaDirective","src":"31:32:20"},{"absolutePath":"contracts/registry/ENS.sol","file":"../registry/ENS.sol","id":3499,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":3321,"src":"65:29:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/ABIResolver.sol","file":"./profiles/ABIResolver.sol","id":3500,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":4076,"src":"95:36:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/AddrResolver.sol","file":"./profiles/AddrResolver.sol","id":3501,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":4275,"src":"132:37:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/ContentHashResolver.sol","file":"./profiles/ContentHashResolver.sol","id":3502,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":4356,"src":"170:44:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/DNSResolver.sol","file":"./profiles/DNSResolver.sol","id":3503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":4832,"src":"215:36:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/InterfaceResolver.sol","file":"./profiles/InterfaceResolver.sol","id":3504,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":5255,"src":"252:42:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/NameResolver.sol","file":"./profiles/NameResolver.sol","id":3505,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":5336,"src":"295:37:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/PubkeyResolver.sol","file":"./profiles/PubkeyResolver.sol","id":3506,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":5443,"src":"333:39:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/TextResolver.sol","file":"./profiles/TextResolver.sol","id":3507,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":5536,"src":"373:37:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/Multicallable.sol","file":"./Multicallable.sol","id":3508,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":3497,"src":"411:29:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/wrapper/INameWrapper.sol","file":"../wrapper/INameWrapper.sol","id":3510,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":6918,"src":"441:57:20","symbolAliases":[{"foreign":{"id":3509,"name":"INameWrapper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6917,"src":"449:12:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/reverseRegistrar/IReverseRegistrar.sol","file":"../reverseRegistrar/IReverseRegistrar.sol","id":3512,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":5598,"src":"499:76:20","symbolAliases":[{"foreign":{"id":3511,"name":"IReverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"507:17:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":3513,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":554,"src":"577:75:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":3514,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3853,"sourceUnit":1226,"src":"654:77:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3516,"name":"UUPSUpgradeable","nameLocations":["864:15:20"],"nodeType":"IdentifierPath","referencedDeclaration":1225,"src":"864:15:20"},"id":3517,"nodeType":"InheritanceSpecifier","src":"864:15:20"},{"baseName":{"id":3518,"name":"OwnableUpgradeable","nameLocations":["885:18:20"],"nodeType":"IdentifierPath","referencedDeclaration":553,"src":"885:18:20"},"id":3519,"nodeType":"InheritanceSpecifier","src":"885:18:20"},{"baseName":{"id":3520,"name":"Multicallable","nameLocations":["909:13:20"],"nodeType":"IdentifierPath","referencedDeclaration":3496,"src":"909:13:20"},"id":3521,"nodeType":"InheritanceSpecifier","src":"909:13:20"},{"baseName":{"id":3522,"name":"ABIResolver","nameLocations":["928:11:20"],"nodeType":"IdentifierPath","referencedDeclaration":4075,"src":"928:11:20"},"id":3523,"nodeType":"InheritanceSpecifier","src":"928:11:20"},{"baseName":{"id":3524,"name":"AddrResolver","nameLocations":["945:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":4274,"src":"945:12:20"},"id":3525,"nodeType":"InheritanceSpecifier","src":"945:12:20"},{"baseName":{"id":3526,"name":"ContentHashResolver","nameLocations":["963:19:20"],"nodeType":"IdentifierPath","referencedDeclaration":4355,"src":"963:19:20"},"id":3527,"nodeType":"InheritanceSpecifier","src":"963:19:20"},{"baseName":{"id":3528,"name":"DNSResolver","nameLocations":["988:11:20"],"nodeType":"IdentifierPath","referencedDeclaration":4831,"src":"988:11:20"},"id":3529,"nodeType":"InheritanceSpecifier","src":"988:11:20"},{"baseName":{"id":3530,"name":"InterfaceResolver","nameLocations":["1005:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":5254,"src":"1005:17:20"},"id":3531,"nodeType":"InheritanceSpecifier","src":"1005:17:20"},{"baseName":{"id":3532,"name":"NameResolver","nameLocations":["1028:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":5335,"src":"1028:12:20"},"id":3533,"nodeType":"InheritanceSpecifier","src":"1028:12:20"},{"baseName":{"id":3534,"name":"PubkeyResolver","nameLocations":["1046:14:20"],"nodeType":"IdentifierPath","referencedDeclaration":5442,"src":"1046:14:20"},"id":3535,"nodeType":"InheritanceSpecifier","src":"1046:14:20"},{"baseName":{"id":3536,"name":"TextResolver","nameLocations":["1066:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":5535,"src":"1066:12:20"},"id":3537,"nodeType":"InheritanceSpecifier","src":"1066:12:20"}],"canonicalName":"PublicResolver","contractDependencies":[],"contractKind":"contract","documentation":{"id":3515,"nodeType":"StructuredDocumentation","src":"733:99:20","text":" A simple resolver anyone can use; only allows the owner of a node to set its\n address."},"fullyImplemented":true,"id":3852,"linearizedBaseContracts":[3852,5535,5442,5335,5254,4831,4355,4274,4075,3927,5058,3496,1978,1990,5042,5019,4998,4891,4870,4981,4960,4941,4908,4852,3343,553,1606,1225,909,574,584,1088],"name":"PublicResolver","nameLocation":"842:14:20","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3540,"mutability":"constant","name":"ADDR_REVERSE_NODE","nameLocation":"1102:17:20","nodeType":"VariableDeclaration","scope":3852,"src":"1085:111:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3538,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1085:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839316431373737373831383834643033613637353761383033393936653338646532613432393637666233376565616361373237323932373130323561396532","id":3539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:66:20","typeDescriptions":{"typeIdentifier":"t_rational_65955458610802586644366824307633271870356699036341805474246458084352783133154_by_1","typeString":"int_const 6595...(69 digits omitted)...3154"},"value":"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2"},"visibility":"internal"},{"constant":false,"functionSelector":"3f15457f","id":3543,"mutability":"mutable","name":"ens","nameLocation":"1214:3:20","nodeType":"VariableDeclaration","scope":3852,"src":"1203:14:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"},"typeName":{"id":3542,"nodeType":"UserDefinedTypeName","pathNode":{"id":3541,"name":"ENS","nameLocations":["1203:3:20"],"nodeType":"IdentifierPath","referencedDeclaration":3320,"src":"1203:3:20"},"referencedDeclaration":3320,"src":"1203:3:20","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"}},"visibility":"public"},{"constant":false,"functionSelector":"a8e5fbc0","id":3546,"mutability":"mutable","name":"nameWrapper","nameLocation":"1243:11:20","nodeType":"VariableDeclaration","scope":3852,"src":"1223:31:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6917","typeString":"contract INameWrapper"},"typeName":{"id":3545,"nodeType":"UserDefinedTypeName","pathNode":{"id":3544,"name":"INameWrapper","nameLocations":["1223:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":6917,"src":"1223:12:20"},"referencedDeclaration":6917,"src":"1223:12:20","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6917","typeString":"contract INameWrapper"}},"visibility":"public"},{"constant":false,"functionSelector":"37bf7a2f","id":3548,"mutability":"mutable","name":"trustedETHController","nameLocation":"1275:20:20","nodeType":"VariableDeclaration","scope":3852,"src":"1260:35:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3547,"name":"address","nodeType":"ElementaryTypeName","src":"1260:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"62c50a13","id":3550,"mutability":"mutable","name":"trustedReverseRegistrar","nameLocation":"1316:23:20","nodeType":"VariableDeclaration","scope":3852,"src":"1301:38:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3549,"name":"address","nodeType":"ElementaryTypeName","src":"1301:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":3551,"nodeType":"StructuredDocumentation","src":"1346:239:20","text":" A mapping of operators. An address that is authorised for an address\n may make any changes to the name that the owner could, but may not update\n the set of authorisations.\n (owner, operator) => approved"},"id":3557,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1643:18:20","nodeType":"VariableDeclaration","scope":3852,"src":"1590:71:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":3556,"keyType":{"id":3552,"name":"address","nodeType":"ElementaryTypeName","src":"1598:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1590:44:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":3555,"keyType":{"id":3553,"name":"address","nodeType":"ElementaryTypeName","src":"1617:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1609:24:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":3554,"name":"bool","nodeType":"ElementaryTypeName","src":"1628:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"constant":false,"documentation":{"id":3558,"nodeType":"StructuredDocumentation","src":"1668:240:20","text":" A mapping of delegates. A delegate that is authorised by an owner\n for a name may make changes to the name's resolver, but may not update\n the set of token approvals.\n (owner, name, delegate) => approved"},"id":3566,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1994:15:20","nodeType":"VariableDeclaration","scope":3852,"src":"1913:96:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$_$","typeString":"mapping(address => mapping(bytes32 => mapping(address => bool)))"},"typeName":{"id":3565,"keyType":{"id":3559,"name":"address","nodeType":"ElementaryTypeName","src":"1921:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1913:64:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$_$","typeString":"mapping(address => mapping(bytes32 => mapping(address => bool)))"},"valueType":{"id":3564,"keyType":{"id":3560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1940:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1932:44:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"valueType":{"id":3563,"keyType":{"id":3561,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1951:24:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":3562,"name":"bool","nodeType":"ElementaryTypeName","src":"1970:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}}},"visibility":"private"},{"anonymous":false,"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":3574,"name":"ApprovalForAll","nameLocation":"2074:14:20","nodeType":"EventDefinition","parameters":{"id":3573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3568,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"2114:5:20","nodeType":"VariableDeclaration","scope":3574,"src":"2098:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3567,"name":"address","nodeType":"ElementaryTypeName","src":"2098:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3570,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"2145:8:20","nodeType":"VariableDeclaration","scope":3574,"src":"2129:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3569,"name":"address","nodeType":"ElementaryTypeName","src":"2129:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3572,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"2168:8:20","nodeType":"VariableDeclaration","scope":3574,"src":"2163:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3571,"name":"bool","nodeType":"ElementaryTypeName","src":"2163:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2088:94:20"},"src":"2068:115:20"},{"anonymous":false,"eventSelector":"f0ddb3b04746704017f9aa8bd728fcc2c1d11675041205350018915f5e4750a0","id":3584,"name":"Approved","nameLocation":"2265:8:20","nodeType":"EventDefinition","parameters":{"id":3583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3576,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"2291:5:20","nodeType":"VariableDeclaration","scope":3584,"src":"2283:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3575,"name":"address","nodeType":"ElementaryTypeName","src":"2283:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3578,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"2322:4:20","nodeType":"VariableDeclaration","scope":3584,"src":"2306:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2306:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3580,"indexed":true,"mutability":"mutable","name":"delegate","nameLocation":"2352:8:20","nodeType":"VariableDeclaration","scope":3584,"src":"2336:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3579,"name":"address","nodeType":"ElementaryTypeName","src":"2336:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3582,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"2383:8:20","nodeType":"VariableDeclaration","scope":3584,"src":"2370:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3581,"name":"bool","nodeType":"ElementaryTypeName","src":"2370:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2273:124:20"},"src":"2259:139:20"},{"body":{"id":3591,"nodeType":"Block","src":"2471:39:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3588,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"2481:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2481:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3590,"nodeType":"ExpressionStatement","src":"2481:22:20"}]},"documentation":{"id":3585,"nodeType":"StructuredDocumentation","src":"2404:48:20","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":3592,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3586,"nodeType":"ParameterList","parameters":[],"src":"2468:2:20"},"returnParameters":{"id":3587,"nodeType":"ParameterList","parameters":[],"src":"2471:0:20"},"scope":3852,"src":"2457:53:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3643,"nodeType":"Block","src":"2697:366:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3607,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"2707:14:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2707:16:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3609,"nodeType":"ExpressionStatement","src":"2707:16:20"},{"expression":{"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3610,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"2733:3:20","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3611,"name":"_ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"2739:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"}},"src":"2733:10:20","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"}},"id":3613,"nodeType":"ExpressionStatement","src":"2733:10:20"},{"expression":{"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3614,"name":"nameWrapper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"2753:11:20","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6917","typeString":"contract INameWrapper"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3615,"name":"wrapperAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"2767:14:20","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6917","typeString":"contract INameWrapper"}},"src":"2753:28:20","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6917","typeString":"contract INameWrapper"}},"id":3617,"nodeType":"ExpressionStatement","src":"2753:28:20"},{"expression":{"id":3620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3618,"name":"trustedETHController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"2791:20:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3619,"name":"_trustedETHController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"2814:21:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2791:44:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3621,"nodeType":"ExpressionStatement","src":"2791:44:20"},{"expression":{"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3622,"name":"trustedReverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"2845:23:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3623,"name":"_trustedReverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"2871:24:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2845:50:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3625,"nodeType":"ExpressionStatement","src":"2845:50:20"},{"assignments":[3628],"declarations":[{"constant":false,"id":3628,"mutability":"mutable","name":"reverseRegistrar","nameLocation":"2924:16:20","nodeType":"VariableDeclaration","scope":3643,"src":"2906:34:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IReverseRegistrar_$5597","typeString":"contract IReverseRegistrar"},"typeName":{"id":3627,"nodeType":"UserDefinedTypeName","pathNode":{"id":3626,"name":"IReverseRegistrar","nameLocations":["2906:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":5597,"src":"2906:17:20"},"referencedDeclaration":5597,"src":"2906:17:20","typeDescriptions":{"typeIdentifier":"t_contract$_IReverseRegistrar_$5597","typeString":"contract IReverseRegistrar"}},"visibility":"internal"}],"id":3635,"initialValue":{"arguments":[{"arguments":[{"id":3632,"name":"ADDR_REVERSE_NODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"2984:17:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3630,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"2974:3:20","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"}},"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2978:5:20","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":3289,"src":"2974:9:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2974:28:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3629,"name":"IReverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"2943:17:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IReverseRegistrar_$5597_$","typeString":"type(contract IReverseRegistrar)"}},"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2943:69:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IReverseRegistrar_$5597","typeString":"contract IReverseRegistrar"}},"nodeType":"VariableDeclarationStatement","src":"2906:106:20"},{"expression":{"arguments":[{"expression":{"id":3639,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3045:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3049:6:20","memberName":"sender","nodeType":"MemberAccess","src":"3045:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3636,"name":"reverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3628,"src":"3022:16:20","typeDescriptions":{"typeIdentifier":"t_contract$_IReverseRegistrar_$5597","typeString":"contract IReverseRegistrar"}},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3039:5:20","memberName":"claim","nodeType":"MemberAccess","referencedDeclaration":5549,"src":"3022:22:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$_t_bytes32_$","typeString":"function (address) external returns (bytes32)"}},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3022:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3642,"nodeType":"ExpressionStatement","src":"3022:34:20"}]},"functionSelector":"f8c8765e","id":3644,"implemented":true,"kind":"function","modifiers":[{"id":3605,"kind":"modifierInvocation","modifierName":{"id":3604,"name":"initializer","nameLocations":["2685:11:20"],"nodeType":"IdentifierPath","referencedDeclaration":990,"src":"2685:11:20"},"nodeType":"ModifierInvocation","src":"2685:11:20"}],"name":"initialize","nameLocation":"2525:10:20","nodeType":"FunctionDefinition","parameters":{"id":3603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3595,"mutability":"mutable","name":"_ens","nameLocation":"2549:4:20","nodeType":"VariableDeclaration","scope":3644,"src":"2545:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"},"typeName":{"id":3594,"nodeType":"UserDefinedTypeName","pathNode":{"id":3593,"name":"ENS","nameLocations":["2545:3:20"],"nodeType":"IdentifierPath","referencedDeclaration":3320,"src":"2545:3:20"},"referencedDeclaration":3320,"src":"2545:3:20","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"}},"visibility":"internal"},{"constant":false,"id":3598,"mutability":"mutable","name":"wrapperAddress","nameLocation":"2576:14:20","nodeType":"VariableDeclaration","scope":3644,"src":"2563:27:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6917","typeString":"contract INameWrapper"},"typeName":{"id":3597,"nodeType":"UserDefinedTypeName","pathNode":{"id":3596,"name":"INameWrapper","nameLocations":["2563:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":6917,"src":"2563:12:20"},"referencedDeclaration":6917,"src":"2563:12:20","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6917","typeString":"contract INameWrapper"}},"visibility":"internal"},{"constant":false,"id":3600,"mutability":"mutable","name":"_trustedETHController","nameLocation":"2608:21:20","nodeType":"VariableDeclaration","scope":3644,"src":"2600:29:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3599,"name":"address","nodeType":"ElementaryTypeName","src":"2600:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3602,"mutability":"mutable","name":"_trustedReverseRegistrar","nameLocation":"2647:24:20","nodeType":"VariableDeclaration","scope":3644,"src":"2639:32:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3601,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2535:142:20"},"returnParameters":{"id":3606,"nodeType":"ParameterList","parameters":[],"src":"2697:0:20"},"scope":3852,"src":"2516:547:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1219],"body":{"id":3653,"nodeType":"Block","src":"3176:2:20","statements":[]},"documentation":{"id":3645,"nodeType":"StructuredDocumentation","src":"3069:38:20","text":"@dev required by the OZ UUPS module"},"id":3654,"implemented":true,"kind":"function","modifiers":[{"id":3651,"kind":"modifierInvocation","modifierName":{"id":3650,"name":"onlyOwner","nameLocations":["3166:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":467,"src":"3166:9:20"},"nodeType":"ModifierInvocation","src":"3166:9:20"}],"name":"_authorizeUpgrade","nameLocation":"3121:17:20","nodeType":"FunctionDefinition","overrides":{"id":3649,"nodeType":"OverrideSpecifier","overrides":[],"src":"3157:8:20"},"parameters":{"id":3648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3647,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3654,"src":"3139:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3646,"name":"address","nodeType":"ElementaryTypeName","src":"3139:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3138:9:20"},"returnParameters":{"id":3652,"nodeType":"ParameterList","parameters":[],"src":"3176:0:20"},"scope":3852,"src":"3112:66:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3686,"nodeType":"Block","src":"3315:250:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3663,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3346:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3350:6:20","memberName":"sender","nodeType":"MemberAccess","src":"3346:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3665,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"3360:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3346:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3382:43:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""},"value":"ERC1155: setting approval status for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""}],"id":3662,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:110:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3669,"nodeType":"ExpressionStatement","src":"3325:110:20"},{"expression":{"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3670,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3557,"src":"3446:18:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3674,"indexExpression":{"expression":{"id":3671,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3465:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3469:6:20","memberName":"sender","nodeType":"MemberAccess","src":"3465:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3446:30:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3675,"indexExpression":{"id":3673,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"3477:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3446:40:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3676,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"3489:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3446:51:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3678,"nodeType":"ExpressionStatement","src":"3446:51:20"},{"eventCall":{"arguments":[{"expression":{"id":3680,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3527:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3531:6:20","memberName":"sender","nodeType":"MemberAccess","src":"3527:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3682,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"3539:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3683,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"3549:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3679,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"3512:14:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3512:46:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3685,"nodeType":"EmitStatement","src":"3507:51:20"}]},"documentation":{"id":3655,"nodeType":"StructuredDocumentation","src":"3184:57:20","text":" @dev See {IERC1155-setApprovalForAll}."},"functionSelector":"a22cb465","id":3687,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3255:17:20","nodeType":"FunctionDefinition","parameters":{"id":3660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3657,"mutability":"mutable","name":"operator","nameLocation":"3281:8:20","nodeType":"VariableDeclaration","scope":3687,"src":"3273:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3656,"name":"address","nodeType":"ElementaryTypeName","src":"3273:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3659,"mutability":"mutable","name":"approved","nameLocation":"3296:8:20","nodeType":"VariableDeclaration","scope":3687,"src":"3291:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3658,"name":"bool","nodeType":"ElementaryTypeName","src":"3291:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3272:33:20"},"returnParameters":{"id":3661,"nodeType":"ParameterList","parameters":[],"src":"3315:0:20"},"scope":3852,"src":"3246:319:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3703,"nodeType":"Block","src":"3742:61:20","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":3697,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3557,"src":"3759:18:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3699,"indexExpression":{"id":3698,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3690,"src":"3778:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3759:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3701,"indexExpression":{"id":3700,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3692,"src":"3787:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3759:37:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3696,"id":3702,"nodeType":"Return","src":"3752:44:20"}]},"documentation":{"id":3688,"nodeType":"StructuredDocumentation","src":"3571:56:20","text":" @dev See {IERC1155-isApprovedForAll}."},"functionSelector":"e985e9c5","id":3704,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3641:16:20","nodeType":"FunctionDefinition","parameters":{"id":3693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3690,"mutability":"mutable","name":"account","nameLocation":"3675:7:20","nodeType":"VariableDeclaration","scope":3704,"src":"3667:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3689,"name":"address","nodeType":"ElementaryTypeName","src":"3667:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3692,"mutability":"mutable","name":"operator","nameLocation":"3700:8:20","nodeType":"VariableDeclaration","scope":3704,"src":"3692:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3691,"name":"address","nodeType":"ElementaryTypeName","src":"3692:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3657:57:20"},"returnParameters":{"id":3696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3695,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3704,"src":"3736:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3694,"name":"bool","nodeType":"ElementaryTypeName","src":"3736:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3735:6:20"},"scope":3852,"src":"3632:171:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3741,"nodeType":"Block","src":"3970:210:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3715,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3988:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3992:6:20","memberName":"sender","nodeType":"MemberAccess","src":"3988:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3717,"name":"delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"4002:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3988:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53657474696e672064656c65676174652073746174757320666f722073656c66","id":3719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4012:34:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb190b006810059edc9ead724b9a58ef6d76fdad1e4f0c7d2965b67f98b3914a","typeString":"literal_string \"Setting delegate status for self\""},"value":"Setting delegate status for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb190b006810059edc9ead724b9a58ef6d76fdad1e4f0c7d2965b67f98b3914a","typeString":"literal_string \"Setting delegate status for self\""}],"id":3714,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3980:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3980:67:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3721,"nodeType":"ExpressionStatement","src":"3980:67:20"},{"expression":{"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3722,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3566,"src":"4058:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$_$","typeString":"mapping(address => mapping(bytes32 => mapping(address => bool)))"}},"id":3727,"indexExpression":{"expression":{"id":3723,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4074:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4078:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4074:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4058:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":3728,"indexExpression":{"id":3725,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3707,"src":"4086:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4058:33:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3729,"indexExpression":{"id":3726,"name":"delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"4092:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4058:43:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3730,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"4104:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4058:54:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3732,"nodeType":"ExpressionStatement","src":"4058:54:20"},{"eventCall":{"arguments":[{"expression":{"id":3734,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4136:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4140:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4136:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3736,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3707,"src":"4148:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3737,"name":"delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"4154:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3738,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"4164:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3733,"name":"Approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"4127:8:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bytes32,address,bool)"}},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4127:46:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3740,"nodeType":"EmitStatement","src":"4122:51:20"}]},"documentation":{"id":3705,"nodeType":"StructuredDocumentation","src":"3809:83:20","text":" @dev Approve a delegate to be able to updated records on a node."},"functionSelector":"a4b91a01","id":3742,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3906:7:20","nodeType":"FunctionDefinition","parameters":{"id":3712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3707,"mutability":"mutable","name":"node","nameLocation":"3922:4:20","nodeType":"VariableDeclaration","scope":3742,"src":"3914:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3706,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3914:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3709,"mutability":"mutable","name":"delegate","nameLocation":"3936:8:20","nodeType":"VariableDeclaration","scope":3742,"src":"3928:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3708,"name":"address","nodeType":"ElementaryTypeName","src":"3928:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3711,"mutability":"mutable","name":"approved","nameLocation":"3951:8:20","nodeType":"VariableDeclaration","scope":3742,"src":"3946:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3710,"name":"bool","nodeType":"ElementaryTypeName","src":"3946:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3913:47:20"},"returnParameters":{"id":3713,"nodeType":"ParameterList","parameters":[],"src":"3970:0:20"},"scope":3852,"src":"3897:283:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3762,"nodeType":"Block","src":"4415:62:20","statements":[{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3754,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3566,"src":"4432:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$_$","typeString":"mapping(address => mapping(bytes32 => mapping(address => bool)))"}},"id":3756,"indexExpression":{"id":3755,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"4448:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4432:22:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":3758,"indexExpression":{"id":3757,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3747,"src":"4455:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4432:28:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3760,"indexExpression":{"id":3759,"name":"delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3749,"src":"4461:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4432:38:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3753,"id":3761,"nodeType":"Return","src":"4425:45:20"}]},"documentation":{"id":3743,"nodeType":"StructuredDocumentation","src":"4186:97:20","text":" @dev Check to see if the delegate has been approved by the owner for the node."},"functionSelector":"a9784b3e","id":3763,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedFor","nameLocation":"4297:13:20","nodeType":"FunctionDefinition","parameters":{"id":3750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3745,"mutability":"mutable","name":"owner","nameLocation":"4328:5:20","nodeType":"VariableDeclaration","scope":3763,"src":"4320:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3744,"name":"address","nodeType":"ElementaryTypeName","src":"4320:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3747,"mutability":"mutable","name":"node","nameLocation":"4351:4:20","nodeType":"VariableDeclaration","scope":3763,"src":"4343:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3746,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4343:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3749,"mutability":"mutable","name":"delegate","nameLocation":"4373:8:20","nodeType":"VariableDeclaration","scope":3763,"src":"4365:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3748,"name":"address","nodeType":"ElementaryTypeName","src":"4365:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4310:77:20"},"returnParameters":{"id":3753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3763,"src":"4409:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3751,"name":"bool","nodeType":"ElementaryTypeName","src":"4409:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4408:6:20"},"scope":3852,"src":"4288:189:20","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[3871],"body":{"id":3827,"nodeType":"Block","src":"4557:472:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3771,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4584:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4588:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4584:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3773,"name":"trustedETHController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"4598:20:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4584:34:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3775,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4634:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4638:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4634:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3777,"name":"trustedReverseRegistrar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"4648:23:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4634:37:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4584:87:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3783,"nodeType":"IfStatement","src":"4567:151:20","trueBody":{"id":3782,"nodeType":"Block","src":"4682:36:20","statements":[{"expression":{"hexValue":"74727565","id":3780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4703:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3770,"id":3781,"nodeType":"Return","src":"4696:11:20"}]}},{"assignments":[3785],"declarations":[{"constant":false,"id":3785,"mutability":"mutable","name":"owner","nameLocation":"4735:5:20","nodeType":"VariableDeclaration","scope":3827,"src":"4727:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3784,"name":"address","nodeType":"ElementaryTypeName","src":"4727:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3790,"initialValue":{"arguments":[{"id":3788,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"4753:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3786,"name":"ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"4743:3:20","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"}},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4747:5:20","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":3289,"src":"4743:9:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4743:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4727:31:20"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3791,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"4772:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3794,"name":"nameWrapper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"4789:11:20","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6917","typeString":"contract INameWrapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_INameWrapper_$6917","typeString":"contract INameWrapper"}],"id":3793,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4781:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3792,"name":"address","nodeType":"ElementaryTypeName","src":"4781:7:20","typeDescriptions":{}}},"id":3795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4781:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4772:29:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3808,"nodeType":"IfStatement","src":"4768:102:20","trueBody":{"id":3807,"nodeType":"Block","src":"4803:67:20","statements":[{"expression":{"id":3805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3797,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"4817:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3802,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"4853:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4845:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3800,"name":"uint256","nodeType":"ElementaryTypeName","src":"4845:7:20","typeDescriptions":{}}},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4845:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3798,"name":"nameWrapper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"4825:11:20","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapper_$6917","typeString":"contract INameWrapper"}},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4837:7:20","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":6847,"src":"4825:19:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4825:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4817:42:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3806,"nodeType":"ExpressionStatement","src":"4817:42:20"}]}},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3809,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"4898:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3810,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4907:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4911:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4907:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4898:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3814,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"4950:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3815,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4957:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4961:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4957:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3813,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3704,"src":"4933:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4933:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4898:70:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3820,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"4998:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3821,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"5005:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3822,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5011:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5015:6:20","memberName":"sender","nodeType":"MemberAccess","src":"5011:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3819,"name":"isApprovedFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"4984:13:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (address,bytes32,address) view returns (bool)"}},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4984:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4898:124:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3770,"id":3826,"nodeType":"Return","src":"4879:143:20"}]},"id":3828,"implemented":true,"kind":"function","modifiers":[],"name":"isAuthorised","nameLocation":"4492:12:20","nodeType":"FunctionDefinition","overrides":{"id":3767,"nodeType":"OverrideSpecifier","overrides":[],"src":"4533:8:20"},"parameters":{"id":3766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3765,"mutability":"mutable","name":"node","nameLocation":"4513:4:20","nodeType":"VariableDeclaration","scope":3828,"src":"4505:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3764,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4505:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4504:14:20"},"returnParameters":{"id":3770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3828,"src":"4551:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3768,"name":"bool","nodeType":"ElementaryTypeName","src":"4551:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4550:6:20"},"scope":3852,"src":"4483:546:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[3495,4074,4241,4354,4709,5253,5334,5441,5534],"body":{"id":3850,"nodeType":"Block","src":"5425:60:20","statements":[{"expression":{"arguments":[{"id":3847,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"5466:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3845,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5442:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PublicResolver_$3852_$","typeString":"type(contract super PublicResolver)"}},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5448:17:20","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":5534,"src":"5442:23:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":3848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5442:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3844,"id":3849,"nodeType":"Return","src":"5435:43:20"}]},"functionSelector":"01ffc9a7","id":3851,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"5044:17:20","nodeType":"FunctionDefinition","overrides":{"id":3841,"nodeType":"OverrideSpecifier","overrides":[{"id":3832,"name":"Multicallable","nameLocations":["5154:13:20"],"nodeType":"IdentifierPath","referencedDeclaration":3496,"src":"5154:13:20"},{"id":3833,"name":"ABIResolver","nameLocations":["5181:11:20"],"nodeType":"IdentifierPath","referencedDeclaration":4075,"src":"5181:11:20"},{"id":3834,"name":"AddrResolver","nameLocations":["5206:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":4274,"src":"5206:12:20"},{"id":3835,"name":"ContentHashResolver","nameLocations":["5232:19:20"],"nodeType":"IdentifierPath","referencedDeclaration":4355,"src":"5232:19:20"},{"id":3836,"name":"DNSResolver","nameLocations":["5265:11:20"],"nodeType":"IdentifierPath","referencedDeclaration":4831,"src":"5265:11:20"},{"id":3837,"name":"InterfaceResolver","nameLocations":["5290:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":5254,"src":"5290:17:20"},{"id":3838,"name":"NameResolver","nameLocations":["5321:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":5335,"src":"5321:12:20"},{"id":3839,"name":"PubkeyResolver","nameLocations":["5347:14:20"],"nodeType":"IdentifierPath","referencedDeclaration":5442,"src":"5347:14:20"},{"id":3840,"name":"TextResolver","nameLocations":["5375:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":5535,"src":"5375:12:20"}],"src":"5132:265:20"},"parameters":{"id":3831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3830,"mutability":"mutable","name":"interfaceID","nameLocation":"5078:11:20","nodeType":"VariableDeclaration","scope":3851,"src":"5071:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3829,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5071:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5061:34:20"},"returnParameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3851,"src":"5415:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3842,"name":"bool","nodeType":"ElementaryTypeName","src":"5415:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5414:6:20"},"scope":3852,"src":"5035:450:20","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3853,"src":"833:4654:20","usedErrors":[]}],"src":"31:5457:20"},"id":20},"contracts/resolvers/ResolverBase.sol":{"ast":{"absolutePath":"contracts/resolvers/ResolverBase.sol","exportedSymbols":{"ERC165":[1978],"IERC165":[1990],"IVersionableResolver":[5058],"ResolverBase":[3927]},"id":3928,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3854,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:21"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":3855,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3928,"sourceUnit":1979,"src":"58:64:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IVersionableResolver.sol","file":"./profiles/IVersionableResolver.sol","id":3856,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3928,"sourceUnit":5059,"src":"123:45:21","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3857,"name":"ERC165","nameLocations":["204:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"204:6:21"},"id":3858,"nodeType":"InheritanceSpecifier","src":"204:6:21"},{"baseName":{"id":3859,"name":"IVersionableResolver","nameLocations":["212:20:21"],"nodeType":"IdentifierPath","referencedDeclaration":5058,"src":"212:20:21"},"id":3860,"nodeType":"InheritanceSpecifier","src":"212:20:21"}],"canonicalName":"ResolverBase","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":3927,"linearizedBaseContracts":[3927,5058,1978,1990],"name":"ResolverBase","nameLocation":"188:12:21","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[5057],"constant":false,"functionSelector":"d700ff33","id":3864,"mutability":"mutable","name":"recordVersions","nameLocation":"273:14:21","nodeType":"VariableDeclaration","scope":3927,"src":"239:48:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"},"typeName":{"id":3863,"keyType":{"id":3861,"name":"bytes32","nodeType":"ElementaryTypeName","src":"247:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"239:26:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"},"valueType":{"id":3862,"name":"uint64","nodeType":"ElementaryTypeName","src":"258:6:21","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}},"visibility":"public"},{"id":3871,"implemented":false,"kind":"function","modifiers":[],"name":"isAuthorised","nameLocation":"303:12:21","nodeType":"FunctionDefinition","parameters":{"id":3867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3866,"mutability":"mutable","name":"node","nameLocation":"324:4:21","nodeType":"VariableDeclaration","scope":3871,"src":"316:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3865,"name":"bytes32","nodeType":"ElementaryTypeName","src":"316:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"315:14:21"},"returnParameters":{"id":3870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3871,"src":"361:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3868,"name":"bool","nodeType":"ElementaryTypeName","src":"361:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"360:6:21"},"scope":3927,"src":"294:73:21","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3882,"nodeType":"Block","src":"407:55:21","statements":[{"expression":{"arguments":[{"arguments":[{"id":3877,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"438:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3876,"name":"isAuthorised","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"425:12:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view returns (bool)"}},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"425:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3875,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"417:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"417:27:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3880,"nodeType":"ExpressionStatement","src":"417:27:21"},{"id":3881,"nodeType":"PlaceholderStatement","src":"454:1:21"}]},"id":3883,"name":"authorised","nameLocation":"382:10:21","nodeType":"ModifierDefinition","parameters":{"id":3874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3873,"mutability":"mutable","name":"node","nameLocation":"401:4:21","nodeType":"VariableDeclaration","scope":3883,"src":"393:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"393:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"392:14:21"},"src":"373:89:21","virtual":false,"visibility":"internal"},{"body":{"id":3904,"nodeType":"Block","src":"730:96:21","statements":[{"expression":{"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"740:22:21","subExpression":{"baseExpression":{"id":3892,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"740:14:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":3894,"indexExpression":{"id":3893,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"755:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"740:20:21","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":3896,"nodeType":"ExpressionStatement","src":"740:22:21"},{"eventCall":{"arguments":[{"id":3898,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"792:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":3899,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"798:14:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":3901,"indexExpression":{"id":3900,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"813:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"798:20:21","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":3897,"name":"VersionChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"777:14:21","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint64_$returns$__$","typeString":"function (bytes32,uint64)"}},"id":3902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"777:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3903,"nodeType":"EmitStatement","src":"772:47:21"}]},"documentation":{"id":3884,"nodeType":"StructuredDocumentation","src":"468:189:21","text":" Increments the record version associated with an ENS node.\n May only be called by the owner of that node in the ENS registry.\n @param node The node to update."},"functionSelector":"3603d758","id":3905,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3889,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"724:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3890,"kind":"modifierInvocation","modifierName":{"id":3888,"name":"authorised","nameLocations":["713:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"713:10:21"},"nodeType":"ModifierInvocation","src":"713:16:21"}],"name":"clearRecords","nameLocation":"671:12:21","nodeType":"FunctionDefinition","parameters":{"id":3887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3886,"mutability":"mutable","name":"node","nameLocation":"692:4:21","nodeType":"VariableDeclaration","scope":3905,"src":"684:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3885,"name":"bytes32","nodeType":"ElementaryTypeName","src":"684:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"683:14:21"},"returnParameters":{"id":3891,"nodeType":"ParameterList","parameters":[],"src":"730:0:21"},"scope":3927,"src":"662:164:21","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1977],"body":{"id":3925,"nodeType":"Block","src":"937:141:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3913,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3907,"src":"966:11:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3915,"name":"IVersionableResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5058,"src":"986:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVersionableResolver_$5058_$","typeString":"type(contract IVersionableResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IVersionableResolver_$5058_$","typeString":"type(contract IVersionableResolver)"}],"id":3914,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"981:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"981:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IVersionableResolver_$5058","typeString":"type(contract IVersionableResolver)"}},"id":3917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1008:11:21","memberName":"interfaceId","nodeType":"MemberAccess","src":"981:38:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"966:53:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3921,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3907,"src":"1059:11:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3919,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1035:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ResolverBase_$3927_$","typeString":"type(contract super ResolverBase)"}},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1041:17:21","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1977,"src":"1035:23:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1035:36:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"966:105:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3912,"id":3924,"nodeType":"Return","src":"947:124:21"}]},"functionSelector":"01ffc9a7","id":3926,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"841:17:21","nodeType":"FunctionDefinition","overrides":{"id":3909,"nodeType":"OverrideSpecifier","overrides":[],"src":"913:8:21"},"parameters":{"id":3908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3907,"mutability":"mutable","name":"interfaceID","nameLocation":"875:11:21","nodeType":"VariableDeclaration","scope":3926,"src":"868:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3906,"name":"bytes4","nodeType":"ElementaryTypeName","src":"868:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"858:34:21"},"returnParameters":{"id":3912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3911,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3926,"src":"931:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3910,"name":"bool","nodeType":"ElementaryTypeName","src":"931:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"930:6:21"},"scope":3927,"src":"832:246:21","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3928,"src":"170:910:21","usedErrors":[]}],"src":"32:1049:21"},"id":21},"contracts/resolvers/profiles/ABIResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/ABIResolver.sol","exportedSymbols":{"ABIResolver":[4075],"ERC165":[1978],"IABIResolver":[4852],"IERC165":[1990],"IVersionableResolver":[5058],"ResolverBase":[3927]},"id":4076,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3929,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:22"},{"absolutePath":"contracts/resolvers/profiles/IABIResolver.sol","file":"./IABIResolver.sol","id":3930,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4076,"sourceUnit":4853,"src":"58:28:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/ResolverBase.sol","file":"../ResolverBase.sol","id":3931,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4076,"sourceUnit":3928,"src":"87:29:22","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3932,"name":"IABIResolver","nameLocations":["151:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":4852,"src":"151:12:22"},"id":3933,"nodeType":"InheritanceSpecifier","src":"151:12:22"},{"baseName":{"id":3934,"name":"ResolverBase","nameLocations":["165:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":3927,"src":"165:12:22"},"id":3935,"nodeType":"InheritanceSpecifier","src":"165:12:22"}],"canonicalName":"ABIResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":4075,"linearizedBaseContracts":[4075,3927,5058,1978,1990,4852],"name":"ABIResolver","nameLocation":"136:11:22","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3943,"mutability":"mutable","name":"versionable_abis","nameLocation":"249:16:22","nodeType":"VariableDeclaration","scope":4075,"src":"184:81:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))"},"typeName":{"id":3942,"keyType":{"id":3936,"name":"uint64","nodeType":"ElementaryTypeName","src":"192:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"184:64:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))"},"valueType":{"id":3941,"keyType":{"id":3937,"name":"bytes32","nodeType":"ElementaryTypeName","src":"210:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"202:45:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint256 => bytes))"},"valueType":{"id":3940,"keyType":{"id":3938,"name":"uint256","nodeType":"ElementaryTypeName","src":"229:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"221:25:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes)"},"valueType":{"id":3939,"name":"bytes","nodeType":"ElementaryTypeName","src":"240:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}}}},"visibility":"internal"},{"body":{"id":3985,"nodeType":"Block","src":"704:228:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3957,"name":"contentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"769:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"783:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"769:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"768:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3961,"name":"contentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"788:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"768:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3963,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"767:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"804:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"767:38:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3956,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"759:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3967,"nodeType":"ExpressionStatement","src":"759:47:22"},{"expression":{"id":3978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3968,"name":"versionable_abis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"817:16:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes storage ref)))"}},"id":3974,"indexExpression":{"baseExpression":{"id":3969,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"834:14:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":3971,"indexExpression":{"id":3970,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"849:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"834:20:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"817:38:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint256 => bytes storage ref))"}},"id":3975,"indexExpression":{"id":3972,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"856:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"817:44:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":3976,"indexExpression":{"id":3973,"name":"contentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"862:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"817:57:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3977,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"877:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"src":"817:64:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3979,"nodeType":"ExpressionStatement","src":"817:64:22"},{"eventCall":{"arguments":[{"id":3981,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"907:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3982,"name":"contentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"913:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3980,"name":"ABIChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4839,"src":"896:10:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"896:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3984,"nodeType":"EmitStatement","src":"891:34:22"}]},"documentation":{"id":3944,"nodeType":"StructuredDocumentation","src":"272:291:22","text":" Sets the ABI associated with an ENS node.\n Nodes may have one ABI of each content type. To remove an ABI, set it to\n the empty string.\n @param node The node to update.\n @param contentType The content type of the ABI\n @param data The ABI data."},"functionSelector":"623195b0","id":3986,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3953,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"698:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3954,"kind":"modifierInvocation","modifierName":{"id":3952,"name":"authorised","nameLocations":["687:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"687:10:22"},"nodeType":"ModifierInvocation","src":"687:16:22"}],"name":"setABI","nameLocation":"577:6:22","nodeType":"FunctionDefinition","parameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3946,"mutability":"mutable","name":"node","nameLocation":"601:4:22","nodeType":"VariableDeclaration","scope":3986,"src":"593:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3945,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3948,"mutability":"mutable","name":"contentType","nameLocation":"623:11:22","nodeType":"VariableDeclaration","scope":3986,"src":"615:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3947,"name":"uint256","nodeType":"ElementaryTypeName","src":"615:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"data","nameLocation":"659:4:22","nodeType":"VariableDeclaration","scope":3986,"src":"644:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3949,"name":"bytes","nodeType":"ElementaryTypeName","src":"644:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"583:86:22"},"returnParameters":{"id":3955,"nodeType":"ParameterList","parameters":[],"src":"704:0:22"},"scope":4075,"src":"568:364:22","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[4851],"body":{"id":4052,"nodeType":"Block","src":"1387:509:22","statements":[{"assignments":[4002],"declarations":[{"constant":false,"id":4002,"mutability":"mutable","name":"abiset","nameLocation":"1431:6:22","nodeType":"VariableDeclaration","scope":4052,"src":"1397:40:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes)"},"typeName":{"id":4001,"keyType":{"id":3999,"name":"uint256","nodeType":"ElementaryTypeName","src":"1405:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1397:25:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes)"},"valueType":{"id":4000,"name":"bytes","nodeType":"ElementaryTypeName","src":"1416:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"internal"}],"id":4010,"initialValue":{"baseExpression":{"baseExpression":{"id":4003,"name":"versionable_abis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"1440:16:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes storage ref)))"}},"id":4007,"indexExpression":{"baseExpression":{"id":4004,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1470:14:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":4006,"indexExpression":{"id":4005,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"1485:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1470:20:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1440:60:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint256 => bytes storage ref))"}},"id":4009,"indexExpression":{"id":4008,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"1501:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1440:66:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"nodeType":"VariableDeclarationStatement","src":"1397:109:22"},{"body":{"id":4043,"nodeType":"Block","src":"1641:217:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4022,"name":"contentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"1677:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4023,"name":"contentTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3991,"src":"1691:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1677:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4025,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1676:28:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1708:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1676:33:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":4028,"name":"abiset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"1729:6:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":4030,"indexExpression":{"id":4029,"name":"contentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"1736:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1729:19:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1749:6:22","memberName":"length","nodeType":"MemberAccess","src":"1729:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1758:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1729:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1676:83:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4042,"nodeType":"IfStatement","src":"1655:193:22","trueBody":{"id":4041,"nodeType":"Block","src":"1774:74:22","statements":[{"expression":{"components":[{"id":4035,"name":"contentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"1800:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":4036,"name":"abiset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"1813:6:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":4038,"indexExpression":{"id":4037,"name":"contentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"1820:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1813:19:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"id":4039,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1799:34:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_bytes_storage_$","typeString":"tuple(uint256,bytes storage ref)"}},"functionReturnParameters":3998,"id":4040,"nodeType":"Return","src":"1792:41:22"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4015,"name":"contentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"1572:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4016,"name":"contentTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3991,"src":"1587:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1572:27:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4044,"initializationExpression":{"assignments":[4012],"declarations":[{"constant":false,"id":4012,"mutability":"mutable","name":"contentType","nameLocation":"1543:11:22","nodeType":"VariableDeclaration","scope":4044,"src":"1535:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4011,"name":"uint256","nodeType":"ElementaryTypeName","src":"1535:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4014,"initialValue":{"hexValue":"31","id":4013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1557:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"1535:23:22"},"loopExpression":{"expression":{"id":4020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4018,"name":"contentType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"1613:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"31","id":4019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1629:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1613:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4021,"nodeType":"ExpressionStatement","src":"1613:17:22"},"nodeType":"ForStatement","src":"1517:341:22"},{"expression":{"components":[{"hexValue":"30","id":4045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1876:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"hexValue":"","id":4048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1885:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1879:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4046,"name":"bytes","nodeType":"ElementaryTypeName","src":"1879:5:22","typeDescriptions":{}}},"id":4049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1879:9:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":4050,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1875:14:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_0_by_1_$_t_bytes_memory_ptr_$","typeString":"tuple(int_const 0,bytes memory)"}},"functionReturnParameters":3998,"id":4051,"nodeType":"Return","src":"1868:21:22"}]},"documentation":{"id":3987,"nodeType":"StructuredDocumentation","src":"938:310:22","text":" Returns the ABI associated with an ENS node.\n Defined in EIP205.\n @param node The ENS node to query\n @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n @return contentType The content type of the return value\n @return data The ABI data"},"functionSelector":"2203ab56","id":4053,"implemented":true,"kind":"function","modifiers":[],"name":"ABI","nameLocation":"1262:3:22","nodeType":"FunctionDefinition","overrides":{"id":3993,"nodeType":"OverrideSpecifier","overrides":[],"src":"1346:8:22"},"parameters":{"id":3992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3989,"mutability":"mutable","name":"node","nameLocation":"1283:4:22","nodeType":"VariableDeclaration","scope":4053,"src":"1275:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3988,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1275:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3991,"mutability":"mutable","name":"contentTypes","nameLocation":"1305:12:22","nodeType":"VariableDeclaration","scope":4053,"src":"1297:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3990,"name":"uint256","nodeType":"ElementaryTypeName","src":"1297:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1265:58:22"},"returnParameters":{"id":3998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4053,"src":"1364:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3994,"name":"uint256","nodeType":"ElementaryTypeName","src":"1364:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4053,"src":"1373:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3996,"name":"bytes","nodeType":"ElementaryTypeName","src":"1373:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1363:23:22"},"scope":4075,"src":"1253:643:22","stateMutability":"view","virtual":true,"visibility":"external"},{"baseFunctions":[3926],"body":{"id":4073,"nodeType":"Block","src":"2007:133:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4061,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"2036:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4063,"name":"IABIResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4852,"src":"2056:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IABIResolver_$4852_$","typeString":"type(contract IABIResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IABIResolver_$4852_$","typeString":"type(contract IABIResolver)"}],"id":4062,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2051:4:22","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2051:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IABIResolver_$4852","typeString":"type(contract IABIResolver)"}},"id":4065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2070:11:22","memberName":"interfaceId","nodeType":"MemberAccess","src":"2051:30:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2036:45:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4069,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"2121:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4067,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2097:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ABIResolver_$4075_$","typeString":"type(contract super ABIResolver)"}},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2103:17:22","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3926,"src":"2097:23:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2097:36:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2036:97:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4060,"id":4072,"nodeType":"Return","src":"2017:116:22"}]},"functionSelector":"01ffc9a7","id":4074,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1911:17:22","nodeType":"FunctionDefinition","overrides":{"id":4057,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:22"},"parameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4055,"mutability":"mutable","name":"interfaceID","nameLocation":"1945:11:22","nodeType":"VariableDeclaration","scope":4074,"src":"1938:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4054,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1938:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1928:34:22"},"returnParameters":{"id":4060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4074,"src":"2001:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4058,"name":"bool","nodeType":"ElementaryTypeName","src":"2001:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2000:6:22"},"scope":4075,"src":"1902:238:22","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":4076,"src":"118:2024:22","usedErrors":[]}],"src":"32:2111:22"},"id":22},"contracts/resolvers/profiles/AddrResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/AddrResolver.sol","exportedSymbols":{"AddrResolver":[4274],"ERC165":[1978],"IAddrResolver":[4870],"IAddressResolver":[4891],"IERC165":[1990],"IVersionableResolver":[5058],"ResolverBase":[3927]},"id":4275,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4077,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:23"},{"absolutePath":"contracts/resolvers/ResolverBase.sol","file":"../ResolverBase.sol","id":4078,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4275,"sourceUnit":3928,"src":"58:29:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IAddrResolver.sol","file":"./IAddrResolver.sol","id":4079,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4275,"sourceUnit":4871,"src":"88:29:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IAddressResolver.sol","file":"./IAddressResolver.sol","id":4080,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4275,"sourceUnit":4892,"src":"118:32:23","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4081,"name":"IAddrResolver","nameLocations":["190:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":4870,"src":"190:13:23"},"id":4082,"nodeType":"InheritanceSpecifier","src":"190:13:23"},{"baseName":{"id":4083,"name":"IAddressResolver","nameLocations":["209:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":4891,"src":"209:16:23"},"id":4084,"nodeType":"InheritanceSpecifier","src":"209:16:23"},{"baseName":{"id":4085,"name":"ResolverBase","nameLocations":["231:12:23"],"nodeType":"IdentifierPath","referencedDeclaration":3927,"src":"231:12:23"},"id":4086,"nodeType":"InheritanceSpecifier","src":"231:12:23"}],"canonicalName":"AddrResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":4274,"linearizedBaseContracts":[4274,3927,5058,1978,1990,4891,4870],"name":"AddrResolver","nameLocation":"170:12:23","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":4089,"mutability":"constant","name":"COIN_TYPE_ETH","nameLocation":"275:13:23","nodeType":"VariableDeclaration","scope":4274,"src":"250:43:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4087,"name":"uint256","nodeType":"ElementaryTypeName","src":"250:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3630","id":4088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"291:2:23","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"},"visibility":"private"},{"constant":false,"id":4097,"mutability":"mutable","name":"versionable_addresses","nameLocation":"365:21:23","nodeType":"VariableDeclaration","scope":4274,"src":"300:86:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))"},"typeName":{"id":4096,"keyType":{"id":4090,"name":"uint64","nodeType":"ElementaryTypeName","src":"308:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"300:64:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))"},"valueType":{"id":4095,"keyType":{"id":4091,"name":"bytes32","nodeType":"ElementaryTypeName","src":"326:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"318:45:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint256 => bytes))"},"valueType":{"id":4094,"keyType":{"id":4092,"name":"uint256","nodeType":"ElementaryTypeName","src":"345:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"337:25:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes)"},"valueType":{"id":4093,"name":"bytes","nodeType":"ElementaryTypeName","src":"356:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}}}},"visibility":"internal"},{"body":{"id":4116,"nodeType":"Block","src":"708:64:23","statements":[{"expression":{"arguments":[{"id":4109,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4100,"src":"726:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4110,"name":"COIN_TYPE_ETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"732:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4112,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"762:1:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4111,"name":"addressToBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4273,"src":"747:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes_memory_ptr_$","typeString":"function (address) pure returns (bytes memory)"}},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"747:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4108,"name":"setAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"718:7:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,uint256,bytes memory)"}},"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"718:47:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4115,"nodeType":"ExpressionStatement","src":"718:47:23"}]},"documentation":{"id":4098,"nodeType":"StructuredDocumentation","src":"393:212:23","text":" Sets the address associated with an ENS node.\n May only be called by the owner of that node in the ENS registry.\n @param node The node to update.\n @param a The address to set."},"functionSelector":"d5fa2b00","id":4117,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4105,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4100,"src":"702:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4106,"kind":"modifierInvocation","modifierName":{"id":4104,"name":"authorised","nameLocations":["691:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"691:10:23"},"nodeType":"ModifierInvocation","src":"691:16:23"}],"name":"setAddr","nameLocation":"619:7:23","nodeType":"FunctionDefinition","parameters":{"id":4103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4100,"mutability":"mutable","name":"node","nameLocation":"644:4:23","nodeType":"VariableDeclaration","scope":4117,"src":"636:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4099,"name":"bytes32","nodeType":"ElementaryTypeName","src":"636:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4102,"mutability":"mutable","name":"a","nameLocation":"666:1:23","nodeType":"VariableDeclaration","scope":4117,"src":"658:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4101,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"626:47:23"},"returnParameters":{"id":4107,"nodeType":"ParameterList","parameters":[],"src":"708:0:23"},"scope":4274,"src":"610:162:23","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[4869],"body":{"id":4148,"nodeType":"Block","src":"1028:163:23","statements":[{"assignments":[4127],"declarations":[{"constant":false,"id":4127,"mutability":"mutable","name":"a","nameLocation":"1051:1:23","nodeType":"VariableDeclaration","scope":4148,"src":"1038:14:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4126,"name":"bytes","nodeType":"ElementaryTypeName","src":"1038:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4132,"initialValue":{"arguments":[{"id":4129,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4120,"src":"1060:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4130,"name":"COIN_TYPE_ETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"1066:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4128,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[4149,4213],"referencedDeclaration":4213,"src":"1055:4:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32,uint256) view returns (bytes memory)"}},"id":4131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1055:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1038:42:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4133,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"1094:1:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1096:6:23","memberName":"length","nodeType":"MemberAccess","src":"1094:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1106:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1094:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4143,"nodeType":"IfStatement","src":"1090:61:23","trueBody":{"id":4142,"nodeType":"Block","src":"1109:42:23","statements":[{"expression":{"arguments":[{"hexValue":"30","id":4139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1130:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4137,"name":"address","nodeType":"ElementaryTypeName","src":"1130:8:23","stateMutability":"payable","typeDescriptions":{}}},"id":4140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1130:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":4125,"id":4141,"nodeType":"Return","src":"1123:17:23"}]}},{"expression":{"arguments":[{"id":4145,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"1182:1:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4144,"name":"bytesToAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"1167:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_payable_$","typeString":"function (bytes memory) pure returns (address payable)"}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1167:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":4125,"id":4147,"nodeType":"Return","src":"1160:24:23"}]},"documentation":{"id":4118,"nodeType":"StructuredDocumentation","src":"778:148:23","text":" Returns the address associated with an ENS node.\n @param node The ENS node to query.\n @return The associated address."},"functionSelector":"3b3b57de","id":4149,"implemented":true,"kind":"function","modifiers":[],"name":"addr","nameLocation":"940:4:23","nodeType":"FunctionDefinition","overrides":{"id":4122,"nodeType":"OverrideSpecifier","overrides":[],"src":"993:8:23"},"parameters":{"id":4121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4120,"mutability":"mutable","name":"node","nameLocation":"962:4:23","nodeType":"VariableDeclaration","scope":4149,"src":"954:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4119,"name":"bytes32","nodeType":"ElementaryTypeName","src":"954:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"944:28:23"},"returnParameters":{"id":4125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4149,"src":"1011:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4123,"name":"address","nodeType":"ElementaryTypeName","src":"1011:15:23","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"1010:17:23"},"scope":4274,"src":"931:260:23","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4191,"nodeType":"Block","src":"1324:234:23","statements":[{"eventCall":{"arguments":[{"id":4162,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"1354:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4163,"name":"coinType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"1360:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4164,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"1370:1:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4161,"name":"AddressChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"1339:14:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,uint256,bytes memory)"}},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1339:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4166,"nodeType":"EmitStatement","src":"1334:38:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4167,"name":"coinType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"1386:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4168,"name":"COIN_TYPE_ETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"1398:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1386:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4178,"nodeType":"IfStatement","src":"1382:97:23","trueBody":{"id":4177,"nodeType":"Block","src":"1413:66:23","statements":[{"eventCall":{"arguments":[{"id":4171,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"1444:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":4173,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"1465:1:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4172,"name":"bytesToAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"1450:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_payable_$","typeString":"function (bytes memory) pure returns (address payable)"}},"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1450:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4170,"name":"AddrChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"1432:11:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1432:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4176,"nodeType":"EmitStatement","src":"1427:41:23"}]}},{"expression":{"id":4189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4179,"name":"versionable_addresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"1488:21:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes storage ref)))"}},"id":4185,"indexExpression":{"baseExpression":{"id":4180,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1510:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":4182,"indexExpression":{"id":4181,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"1525:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1510:20:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1488:43:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint256 => bytes storage ref))"}},"id":4186,"indexExpression":{"id":4183,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"1532:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1488:49:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":4187,"indexExpression":{"id":4184,"name":"coinType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"1538:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1488:59:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4188,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"1550:1:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1488:63:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4190,"nodeType":"ExpressionStatement","src":"1488:63:23"}]},"functionSelector":"8b95dd71","id":4192,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4158,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"1318:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4159,"kind":"modifierInvocation","modifierName":{"id":4157,"name":"authorised","nameLocations":["1307:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"1307:10:23"},"nodeType":"ModifierInvocation","src":"1307:16:23"}],"name":"setAddr","nameLocation":"1206:7:23","nodeType":"FunctionDefinition","parameters":{"id":4156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4151,"mutability":"mutable","name":"node","nameLocation":"1231:4:23","nodeType":"VariableDeclaration","scope":4192,"src":"1223:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1223:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4153,"mutability":"mutable","name":"coinType","nameLocation":"1253:8:23","nodeType":"VariableDeclaration","scope":4192,"src":"1245:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4152,"name":"uint256","nodeType":"ElementaryTypeName","src":"1245:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4155,"mutability":"mutable","name":"a","nameLocation":"1284:1:23","nodeType":"VariableDeclaration","scope":4192,"src":"1271:14:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4154,"name":"bytes","nodeType":"ElementaryTypeName","src":"1271:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1213:78:23"},"returnParameters":{"id":4160,"nodeType":"ParameterList","parameters":[],"src":"1324:0:23"},"scope":4274,"src":"1197:361:23","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[4890],"body":{"id":4212,"nodeType":"Block","src":"1684:83:23","statements":[{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4202,"name":"versionable_addresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"1701:21:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes storage ref)))"}},"id":4206,"indexExpression":{"baseExpression":{"id":4203,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1723:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":4205,"indexExpression":{"id":4204,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"1738:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1723:20:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1701:43:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint256 => bytes storage ref))"}},"id":4208,"indexExpression":{"id":4207,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"1745:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1701:49:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":4210,"indexExpression":{"id":4209,"name":"coinType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4196,"src":"1751:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1701:59:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":4201,"id":4211,"nodeType":"Return","src":"1694:66:23"}]},"functionSelector":"f1cb7e06","id":4213,"implemented":true,"kind":"function","modifiers":[],"name":"addr","nameLocation":"1573:4:23","nodeType":"FunctionDefinition","overrides":{"id":4198,"nodeType":"OverrideSpecifier","overrides":[],"src":"1652:8:23"},"parameters":{"id":4197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4194,"mutability":"mutable","name":"node","nameLocation":"1595:4:23","nodeType":"VariableDeclaration","scope":4213,"src":"1587:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1587:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4196,"mutability":"mutable","name":"coinType","nameLocation":"1617:8:23","nodeType":"VariableDeclaration","scope":4213,"src":"1609:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4195,"name":"uint256","nodeType":"ElementaryTypeName","src":"1609:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1577:54:23"},"returnParameters":{"id":4201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4213,"src":"1670:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4199,"name":"bytes","nodeType":"ElementaryTypeName","src":"1670:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1669:14:23"},"scope":4274,"src":"1564:203:23","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3926],"body":{"id":4240,"nodeType":"Block","src":"1878:199:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4221,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4215,"src":"1907:11:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4223,"name":"IAddrResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"1927:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAddrResolver_$4870_$","typeString":"type(contract IAddrResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAddrResolver_$4870_$","typeString":"type(contract IAddrResolver)"}],"id":4222,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1922:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1922:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAddrResolver_$4870","typeString":"type(contract IAddrResolver)"}},"id":4225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1942:11:23","memberName":"interfaceId","nodeType":"MemberAccess","src":"1922:31:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1907:46:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4227,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4215,"src":"1969:11:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4229,"name":"IAddressResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"1989:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAddressResolver_$4891_$","typeString":"type(contract IAddressResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAddressResolver_$4891_$","typeString":"type(contract IAddressResolver)"}],"id":4228,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1984:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1984:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAddressResolver_$4891","typeString":"type(contract IAddressResolver)"}},"id":4231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2007:11:23","memberName":"interfaceId","nodeType":"MemberAccess","src":"1984:34:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1969:49:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1907:111:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4236,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4215,"src":"2058:11:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4234,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2034:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AddrResolver_$4274_$","typeString":"type(contract super AddrResolver)"}},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2040:17:23","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3926,"src":"2034:23:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2034:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1907:163:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4220,"id":4239,"nodeType":"Return","src":"1888:182:23"}]},"functionSelector":"01ffc9a7","id":4241,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1782:17:23","nodeType":"FunctionDefinition","overrides":{"id":4217,"nodeType":"OverrideSpecifier","overrides":[],"src":"1854:8:23"},"parameters":{"id":4216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4215,"mutability":"mutable","name":"interfaceID","nameLocation":"1816:11:23","nodeType":"VariableDeclaration","scope":4241,"src":"1809:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4214,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1809:6:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1799:34:23"},"returnParameters":{"id":4220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4219,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4241,"src":"1872:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4218,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1871:6:23"},"scope":4274,"src":"1773:304:23","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4256,"nodeType":"Block","src":"2179:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4249,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"2197:1:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2199:6:23","memberName":"length","nodeType":"MemberAccess","src":"2197:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3230","id":4251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2209:2:23","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"2197:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4248,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2189:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2189:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4254,"nodeType":"ExpressionStatement","src":"2189:23:23"},{"AST":{"nodeType":"YulBlock","src":"2231:65:23","statements":[{"nodeType":"YulAssignment","src":"2245:41:23","value":{"arguments":[{"arguments":[{"arguments":[{"name":"b","nodeType":"YulIdentifier","src":"2264:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"2267:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2260:3:23"},"nodeType":"YulFunctionCall","src":"2260:10:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2254:5:23"},"nodeType":"YulFunctionCall","src":"2254:17:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2277:3:23","type":"","value":"256"},{"kind":"number","nodeType":"YulLiteral","src":"2282:2:23","type":"","value":"12"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"2273:3:23"},"nodeType":"YulFunctionCall","src":"2273:12:23"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2250:3:23"},"nodeType":"YulFunctionCall","src":"2250:36:23"},"variableNames":[{"name":"a","nodeType":"YulIdentifier","src":"2245:1:23"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4246,"isOffset":false,"isSlot":false,"src":"2245:1:23","valueSize":1},{"declaration":4243,"isOffset":false,"isSlot":false,"src":"2264:1:23","valueSize":1}],"id":4255,"nodeType":"InlineAssembly","src":"2222:74:23"}]},"id":4257,"implemented":true,"kind":"function","modifiers":[],"name":"bytesToAddress","nameLocation":"2092:14:23","nodeType":"FunctionDefinition","parameters":{"id":4244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4243,"mutability":"mutable","name":"b","nameLocation":"2129:1:23","nodeType":"VariableDeclaration","scope":4257,"src":"2116:14:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4242,"name":"bytes","nodeType":"ElementaryTypeName","src":"2116:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2106:30:23"},"returnParameters":{"id":4247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4246,"mutability":"mutable","name":"a","nameLocation":"2176:1:23","nodeType":"VariableDeclaration","scope":4257,"src":"2160:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4245,"name":"address","nodeType":"ElementaryTypeName","src":"2160:15:23","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"2159:19:23"},"scope":4274,"src":"2083:219:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4272,"nodeType":"Block","src":"2382:116:23","statements":[{"expression":{"id":4269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4264,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"2392:1:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"3230","id":4267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2406:2:23","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"id":4266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2396:9:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":4265,"name":"bytes","nodeType":"ElementaryTypeName","src":"2400:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":4268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2396:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2392:17:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4270,"nodeType":"ExpressionStatement","src":"2392:17:23"},{"AST":{"nodeType":"YulBlock","src":"2428:64:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"b","nodeType":"YulIdentifier","src":"2453:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"2456:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2449:3:23"},"nodeType":"YulFunctionCall","src":"2449:10:23"},{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"2465:1:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2472:3:23","type":"","value":"256"},{"kind":"number","nodeType":"YulLiteral","src":"2477:2:23","type":"","value":"12"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"2468:3:23"},"nodeType":"YulFunctionCall","src":"2468:12:23"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2461:3:23"},"nodeType":"YulFunctionCall","src":"2461:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2442:6:23"},"nodeType":"YulFunctionCall","src":"2442:40:23"},"nodeType":"YulExpressionStatement","src":"2442:40:23"}]},"evmVersion":"london","externalReferences":[{"declaration":4259,"isOffset":false,"isSlot":false,"src":"2465:1:23","valueSize":1},{"declaration":4262,"isOffset":false,"isSlot":false,"src":"2453:1:23","valueSize":1}],"id":4271,"nodeType":"InlineAssembly","src":"2419:73:23"}]},"id":4273,"implemented":true,"kind":"function","modifiers":[],"name":"addressToBytes","nameLocation":"2317:14:23","nodeType":"FunctionDefinition","parameters":{"id":4260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4259,"mutability":"mutable","name":"a","nameLocation":"2340:1:23","nodeType":"VariableDeclaration","scope":4273,"src":"2332:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4258,"name":"address","nodeType":"ElementaryTypeName","src":"2332:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2331:11:23"},"returnParameters":{"id":4263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4262,"mutability":"mutable","name":"b","nameLocation":"2379:1:23","nodeType":"VariableDeclaration","scope":4273,"src":"2366:14:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4261,"name":"bytes","nodeType":"ElementaryTypeName","src":"2366:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2365:16:23"},"scope":4274,"src":"2308:190:23","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4275,"src":"152:2348:23","usedErrors":[]}],"src":"32:2469:23"},"id":23},"contracts/resolvers/profiles/ContentHashResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/ContentHashResolver.sol","exportedSymbols":{"ContentHashResolver":[4355],"ERC165":[1978],"IContentHashResolver":[4908],"IERC165":[1990],"IVersionableResolver":[5058],"ResolverBase":[3927]},"id":4356,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4276,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:24"},{"absolutePath":"contracts/resolvers/ResolverBase.sol","file":"../ResolverBase.sol","id":4277,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4356,"sourceUnit":3928,"src":"58:29:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IContentHashResolver.sol","file":"./IContentHashResolver.sol","id":4278,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4356,"sourceUnit":4909,"src":"88:36:24","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4279,"name":"IContentHashResolver","nameLocations":["167:20:24"],"nodeType":"IdentifierPath","referencedDeclaration":4908,"src":"167:20:24"},"id":4280,"nodeType":"InheritanceSpecifier","src":"167:20:24"},{"baseName":{"id":4281,"name":"ResolverBase","nameLocations":["189:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":3927,"src":"189:12:24"},"id":4282,"nodeType":"InheritanceSpecifier","src":"189:12:24"}],"canonicalName":"ContentHashResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":4355,"linearizedBaseContracts":[4355,3927,5058,1978,1990,4908],"name":"ContentHashResolver","nameLocation":"144:19:24","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4288,"mutability":"mutable","name":"versionable_hashes","nameLocation":"253:18:24","nodeType":"VariableDeclaration","scope":4355,"src":"208:63:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => bytes))"},"typeName":{"id":4287,"keyType":{"id":4283,"name":"uint64","nodeType":"ElementaryTypeName","src":"216:6:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"208:44:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => bytes))"},"valueType":{"id":4286,"keyType":{"id":4284,"name":"bytes32","nodeType":"ElementaryTypeName","src":"234:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"226:25:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"valueType":{"id":4285,"name":"bytes","nodeType":"ElementaryTypeName","src":"245:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}}},"visibility":"internal"},{"body":{"id":4314,"nodeType":"Block","src":"620:115:24","statements":[{"expression":{"id":4307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4299,"name":"versionable_hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"630:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => bytes storage ref))"}},"id":4304,"indexExpression":{"baseExpression":{"id":4300,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"649:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":4302,"indexExpression":{"id":4301,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"664:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"649:20:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"630:40:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":4305,"indexExpression":{"id":4303,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"671:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"630:46:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4306,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"679:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"src":"630:53:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4308,"nodeType":"ExpressionStatement","src":"630:53:24"},{"eventCall":{"arguments":[{"id":4310,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"717:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4311,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"723:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4309,"name":"ContenthashChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"698:18:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"698:30:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4313,"nodeType":"EmitStatement","src":"693:35:24"}]},"documentation":{"id":4289,"nodeType":"StructuredDocumentation","src":"278:222:24","text":" Sets the contenthash associated with an ENS node.\n May only be called by the owner of that node in the ENS registry.\n @param node The node to update.\n @param hash The contenthash to set"},"functionSelector":"304e6ade","id":4315,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4296,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"614:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4297,"kind":"modifierInvocation","modifierName":{"id":4295,"name":"authorised","nameLocations":["603:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"603:10:24"},"nodeType":"ModifierInvocation","src":"603:16:24"}],"name":"setContenthash","nameLocation":"514:14:24","nodeType":"FunctionDefinition","parameters":{"id":4294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4291,"mutability":"mutable","name":"node","nameLocation":"546:4:24","nodeType":"VariableDeclaration","scope":4315,"src":"538:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4290,"name":"bytes32","nodeType":"ElementaryTypeName","src":"538:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4293,"mutability":"mutable","name":"hash","nameLocation":"575:4:24","nodeType":"VariableDeclaration","scope":4315,"src":"560:19:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4292,"name":"bytes","nodeType":"ElementaryTypeName","src":"560:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"528:57:24"},"returnParameters":{"id":4298,"nodeType":"ParameterList","parameters":[],"src":"620:0:24"},"scope":4355,"src":"505:230:24","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[4907],"body":{"id":4332,"nodeType":"Block","src":"1005:70:24","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":4324,"name":"versionable_hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"1022:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => bytes storage ref))"}},"id":4328,"indexExpression":{"baseExpression":{"id":4325,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1041:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":4327,"indexExpression":{"id":4326,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4318,"src":"1056:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1041:20:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1022:40:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":4330,"indexExpression":{"id":4329,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4318,"src":"1063:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1022:46:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":4323,"id":4331,"nodeType":"Return","src":"1015:53:24"}]},"documentation":{"id":4316,"nodeType":"StructuredDocumentation","src":"741:156:24","text":" Returns the contenthash associated with an ENS node.\n @param node The ENS node to query.\n @return The associated contenthash."},"functionSelector":"bc1c58d1","id":4333,"implemented":true,"kind":"function","modifiers":[],"name":"contenthash","nameLocation":"911:11:24","nodeType":"FunctionDefinition","overrides":{"id":4320,"nodeType":"OverrideSpecifier","overrides":[],"src":"973:8:24"},"parameters":{"id":4319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4318,"mutability":"mutable","name":"node","nameLocation":"940:4:24","nodeType":"VariableDeclaration","scope":4333,"src":"932:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4317,"name":"bytes32","nodeType":"ElementaryTypeName","src":"932:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"922:28:24"},"returnParameters":{"id":4323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4322,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4333,"src":"991:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4321,"name":"bytes","nodeType":"ElementaryTypeName","src":"991:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"990:14:24"},"scope":4355,"src":"902:173:24","stateMutability":"view","virtual":true,"visibility":"external"},{"baseFunctions":[3926],"body":{"id":4353,"nodeType":"Block","src":"1186:141:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4341,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4335,"src":"1215:11:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4343,"name":"IContentHashResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4908,"src":"1235:20:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IContentHashResolver_$4908_$","typeString":"type(contract IContentHashResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IContentHashResolver_$4908_$","typeString":"type(contract IContentHashResolver)"}],"id":4342,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1230:4:24","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IContentHashResolver_$4908","typeString":"type(contract IContentHashResolver)"}},"id":4345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1257:11:24","memberName":"interfaceId","nodeType":"MemberAccess","src":"1230:38:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1215:53:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4349,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4335,"src":"1308:11:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4347,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1284:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ContentHashResolver_$4355_$","typeString":"type(contract super ContentHashResolver)"}},"id":4348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1290:17:24","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3926,"src":"1284:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1284:36:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1215:105:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4340,"id":4352,"nodeType":"Return","src":"1196:124:24"}]},"functionSelector":"01ffc9a7","id":4354,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1090:17:24","nodeType":"FunctionDefinition","overrides":{"id":4337,"nodeType":"OverrideSpecifier","overrides":[],"src":"1162:8:24"},"parameters":{"id":4336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4335,"mutability":"mutable","name":"interfaceID","nameLocation":"1124:11:24","nodeType":"VariableDeclaration","scope":4354,"src":"1117:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4334,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1117:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1107:34:24"},"returnParameters":{"id":4340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4354,"src":"1180:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4338,"name":"bool","nodeType":"ElementaryTypeName","src":"1180:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1179:6:24"},"scope":4355,"src":"1081:246:24","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":4356,"src":"126:1203:24","usedErrors":[]}],"src":"32:1298:24"},"id":24},"contracts/resolvers/profiles/DNSResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/DNSResolver.sol","exportedSymbols":{"Buffer":[420],"BytesUtils":[6533],"DNSResolver":[4831],"ERC165":[1978],"IDNSRecordResolver":[4941],"IDNSZoneResolver":[4960],"IERC165":[1990],"IVersionableResolver":[5058],"RRUtils":[3088],"ResolverBase":[3927]},"id":4832,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4357,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:25"},{"absolutePath":"contracts/resolvers/ResolverBase.sol","file":"../ResolverBase.sol","id":4358,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4832,"sourceUnit":3928,"src":"58:29:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/dnssec-oracle/RRUtils.sol","file":"../../dnssec-oracle/RRUtils.sol","id":4359,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4832,"sourceUnit":3089,"src":"88:41:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IDNSRecordResolver.sol","file":"./IDNSRecordResolver.sol","id":4360,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4832,"sourceUnit":4942,"src":"130:34:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IDNSZoneResolver.sol","file":"./IDNSZoneResolver.sol","id":4361,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4832,"sourceUnit":4961,"src":"165:32:25","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4362,"name":"IDNSRecordResolver","nameLocations":["236:18:25"],"nodeType":"IdentifierPath","referencedDeclaration":4941,"src":"236:18:25"},"id":4363,"nodeType":"InheritanceSpecifier","src":"236:18:25"},{"baseName":{"id":4364,"name":"IDNSZoneResolver","nameLocations":["260:16:25"],"nodeType":"IdentifierPath","referencedDeclaration":4960,"src":"260:16:25"},"id":4365,"nodeType":"InheritanceSpecifier","src":"260:16:25"},{"baseName":{"id":4366,"name":"ResolverBase","nameLocations":["282:12:25"],"nodeType":"IdentifierPath","referencedDeclaration":3927,"src":"282:12:25"},"id":4367,"nodeType":"InheritanceSpecifier","src":"282:12:25"}],"canonicalName":"DNSResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":4831,"linearizedBaseContracts":[4831,3927,5058,1978,1990,4960,4941],"name":"DNSResolver","nameLocation":"217:11:25","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4369,"libraryName":{"id":4368,"name":"RRUtils","nameLocations":["307:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":3088,"src":"307:7:25"},"nodeType":"UsingForDirective","src":"301:20:25"},{"global":false,"id":4372,"libraryName":{"id":4370,"name":"BytesUtils","nameLocations":["332:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":6533,"src":"332:10:25"},"nodeType":"UsingForDirective","src":"326:27:25","typeName":{"id":4371,"name":"bytes","nodeType":"ElementaryTypeName","src":"347:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":false,"id":4378,"mutability":"mutable","name":"versionable_zonehashes","nameLocation":"608:22:25","nodeType":"VariableDeclaration","scope":4831,"src":"555:75:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => bytes))"},"typeName":{"id":4377,"keyType":{"id":4373,"name":"uint64","nodeType":"ElementaryTypeName","src":"563:6:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"555:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => bytes))"},"valueType":{"id":4376,"keyType":{"id":4374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"581:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"573:25:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"valueType":{"id":4375,"name":"bytes","nodeType":"ElementaryTypeName","src":"592:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}}},"visibility":"private"},{"constant":false,"id":4388,"mutability":"mutable","name":"versionable_records","nameLocation":"844:19:25","nodeType":"VariableDeclaration","scope":4831,"src":"744:119:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))"},"typeName":{"id":4387,"keyType":{"id":4379,"name":"uint64","nodeType":"ElementaryTypeName","src":"752:6:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"744:83:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))"},"valueType":{"id":4386,"keyType":{"id":4380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"770:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"762:64:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes)))"},"valueType":{"id":4385,"keyType":{"id":4381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"789:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"781:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint16 => bytes))"},"valueType":{"id":4384,"keyType":{"id":4382,"name":"uint16","nodeType":"ElementaryTypeName","src":"808:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"800:24:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes)"},"valueType":{"id":4383,"name":"bytes","nodeType":"ElementaryTypeName","src":"818:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}}}}},"visibility":"private"},{"constant":false,"id":4396,"mutability":"mutable","name":"versionable_nameEntriesCount","nameLocation":"1117:28:25","nodeType":"VariableDeclaration","scope":4831,"src":"1035:110:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_uint16_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))"},"typeName":{"id":4395,"keyType":{"id":4389,"name":"uint64","nodeType":"ElementaryTypeName","src":"1043:6:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"1035:65:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_uint16_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))"},"valueType":{"id":4394,"keyType":{"id":4390,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1061:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1053:46:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_uint16_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => uint16))"},"valueType":{"id":4393,"keyType":{"id":4391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1080:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1072:26:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint16_$","typeString":"mapping(bytes32 => uint16)"},"valueType":{"id":4392,"name":"uint16","nodeType":"ElementaryTypeName","src":"1091:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}}}},"visibility":"private"},{"body":{"id":4572,"nodeType":"Block","src":"2183:1646:25","statements":[{"assignments":[4408],"declarations":[{"constant":false,"id":4408,"mutability":"mutable","name":"resource","nameLocation":"2200:8:25","nodeType":"VariableDeclaration","scope":4572,"src":"2193:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4407,"name":"uint16","nodeType":"ElementaryTypeName","src":"2193:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":4410,"initialValue":{"hexValue":"30","id":4409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2211:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2193:19:25"},{"assignments":[4412],"declarations":[{"constant":false,"id":4412,"mutability":"mutable","name":"offset","nameLocation":"2230:6:25","nodeType":"VariableDeclaration","scope":4572,"src":"2222:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4411,"name":"uint256","nodeType":"ElementaryTypeName","src":"2222:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4414,"initialValue":{"hexValue":"30","id":4413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2239:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2222:18:25"},{"assignments":[4416],"declarations":[{"constant":false,"id":4416,"mutability":"mutable","name":"name","nameLocation":"2263:4:25","nodeType":"VariableDeclaration","scope":4572,"src":"2250:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4415,"name":"bytes","nodeType":"ElementaryTypeName","src":"2250:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4417,"nodeType":"VariableDeclarationStatement","src":"2250:17:25"},{"assignments":[4419],"declarations":[{"constant":false,"id":4419,"mutability":"mutable","name":"value","nameLocation":"2290:5:25","nodeType":"VariableDeclaration","scope":4572,"src":"2277:18:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4418,"name":"bytes","nodeType":"ElementaryTypeName","src":"2277:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4420,"nodeType":"VariableDeclarationStatement","src":"2277:18:25"},{"assignments":[4422],"declarations":[{"constant":false,"id":4422,"mutability":"mutable","name":"nameHash","nameLocation":"2313:8:25","nodeType":"VariableDeclaration","scope":4572,"src":"2305:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4421,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2305:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4423,"nodeType":"VariableDeclarationStatement","src":"2305:16:25"},{"assignments":[4425],"declarations":[{"constant":false,"id":4425,"mutability":"mutable","name":"version","nameLocation":"2338:7:25","nodeType":"VariableDeclaration","scope":4572,"src":"2331:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4424,"name":"uint64","nodeType":"ElementaryTypeName","src":"2331:6:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":4429,"initialValue":{"baseExpression":{"id":4426,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"2348:14:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":4428,"indexExpression":{"id":4427,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4399,"src":"2363:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2348:20:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"2331:37:25"},{"body":{"id":4547,"nodeType":"Block","src":"2570:959:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4448,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"2588:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2600:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2588:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4545,"nodeType":"Block","src":"2808:711:25","statements":[{"assignments":[4482],"declarations":[{"constant":false,"id":4482,"mutability":"mutable","name":"newName","nameLocation":"2839:7:25","nodeType":"VariableDeclaration","scope":4545,"src":"2826:20:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4481,"name":"bytes","nodeType":"ElementaryTypeName","src":"2826:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4486,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4483,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"2849:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2854:4:25","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"2849:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_RRIterator_$2299_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_RRIterator_$2299_memory_ptr_$","typeString":"function (struct RRUtils.RRIterator memory) pure returns (bytes memory)"}},"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2849:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2826:34:25"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4487,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"2882:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4488,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"2894:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4489,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2899:7:25","memberName":"dnstype","nodeType":"MemberAccess","referencedDeclaration":2290,"src":"2894:12:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2882:24:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":4495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2910:21:25","subExpression":{"arguments":[{"id":4493,"name":"newName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4482,"src":"2923:7:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4491,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"2911:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2916:6:25","memberName":"equals","nodeType":"MemberAccess","referencedDeclaration":6051,"src":"2911:11:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,bytes memory) pure returns (bool)"}},"id":4494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2911:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2882:49:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4544,"nodeType":"IfStatement","src":"2878:627:25","trueBody":{"id":4543,"nodeType":"Block","src":"2933:572:25","statements":[{"expression":{"arguments":[{"id":4498,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4399,"src":"2992:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4499,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"3022:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4500,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"3052:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4501,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"3086:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":4502,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"3116:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4503,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"3148:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4504,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3153:6:25","memberName":"offset","nodeType":"MemberAccess","referencedDeclaration":2288,"src":"3148:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4505,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"3162:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3148:20:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4507,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"3194:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3200:6:25","memberName":"length","nodeType":"MemberAccess","src":"3194:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3210:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3194:17:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4511,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4425,"src":"3237:7:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":4497,"name":"setDNSRRSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"2955:11:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint16_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint64_$returns$__$","typeString":"function (bytes32,bytes memory,uint16,bytes memory,uint256,uint256,bool,uint64)"}},"id":4512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2955:311:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4513,"nodeType":"ExpressionStatement","src":"2955:311:25"},{"expression":{"id":4517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4514,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"3288:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4515,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"3299:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4516,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3304:7:25","memberName":"dnstype","nodeType":"MemberAccess","referencedDeclaration":2290,"src":"3299:12:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"3288:23:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4518,"nodeType":"ExpressionStatement","src":"3288:23:25"},{"expression":{"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4519,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"3333:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4520,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"3342:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4521,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3347:6:25","memberName":"offset","nodeType":"MemberAccess","referencedDeclaration":2288,"src":"3342:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3333:20:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4523,"nodeType":"ExpressionStatement","src":"3333:20:25"},{"expression":{"id":4526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4524,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"3375:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4525,"name":"newName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4482,"src":"3382:7:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3375:14:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4527,"nodeType":"ExpressionStatement","src":"3375:14:25"},{"expression":{"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4528,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4422,"src":"3411:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4530,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"3432:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4529,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3422:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3422:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3411:26:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4533,"nodeType":"ExpressionStatement","src":"3411:26:25"},{"expression":{"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4534,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"3459:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4537,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"3473:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4538,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3478:5:25","memberName":"rdata","nodeType":"MemberAccess","referencedDeclaration":2493,"src":"3473:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_RRIterator_$2299_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_RRIterator_$2299_memory_ptr_$","typeString":"function (struct RRUtils.RRIterator memory) pure returns (bytes memory)"}},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3473:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3467:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4535,"name":"bytes","nodeType":"ElementaryTypeName","src":"3467:5:25","typeDescriptions":{}}},"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3467:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3459:27:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4542,"nodeType":"ExpressionStatement","src":"3459:27:25"}]}}]},"id":4546,"nodeType":"IfStatement","src":"2584:935:25","trueBody":{"id":4480,"nodeType":"Block","src":"2603:199:25","statements":[{"expression":{"id":4454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4451,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"2621:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4452,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"2632:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4453,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2637:7:25","memberName":"dnstype","nodeType":"MemberAccess","referencedDeclaration":2290,"src":"2632:12:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2621:23:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4455,"nodeType":"ExpressionStatement","src":"2621:23:25"},{"expression":{"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4456,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"2662:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4457,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"2669:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2674:4:25","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"2669:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_RRIterator_$2299_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_RRIterator_$2299_memory_ptr_$","typeString":"function (struct RRUtils.RRIterator memory) pure returns (bytes memory)"}},"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2669:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2662:18:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4461,"nodeType":"ExpressionStatement","src":"2662:18:25"},{"expression":{"id":4469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4462,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4422,"src":"2698:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":4466,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"2736:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4464,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2719:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4465,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2723:12:25","memberName":"encodePacked","nodeType":"MemberAccess","src":"2719:16:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2719:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4463,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2709:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2709:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2698:44:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4470,"nodeType":"ExpressionStatement","src":"2698:44:25"},{"expression":{"id":4478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"2760:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4474,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"2774:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4475,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2779:5:25","memberName":"rdata","nodeType":"MemberAccess","referencedDeclaration":2493,"src":"2774:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_RRIterator_$2299_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_RRIterator_$2299_memory_ptr_$","typeString":"function (struct RRUtils.RRIterator memory) pure returns (bytes memory)"}},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2774:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2768:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4472,"name":"bytes","nodeType":"ElementaryTypeName","src":"2768:5:25","typeDescriptions":{}}},"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2760:27:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4479,"nodeType":"ExpressionStatement","src":"2760:27:25"}]}}]},"condition":{"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2522:12:25","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4440,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"2523:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4441,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2528:4:25","memberName":"done","nodeType":"MemberAccess","referencedDeclaration":2344,"src":"2523:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_RRIterator_$2299_memory_ptr_$returns$_t_bool_$bound_to$_t_struct$_RRIterator_$2299_memory_ptr_$","typeString":"function (struct RRUtils.RRIterator memory) pure returns (bool)"}},"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2523:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4548,"initializationExpression":{"assignments":[4434],"declarations":[{"constant":false,"id":4434,"mutability":"mutable","name":"iter","nameLocation":"2483:4:25","nodeType":"VariableDeclaration","scope":4548,"src":"2457:30:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator"},"typeName":{"id":4433,"nodeType":"UserDefinedTypeName","pathNode":{"id":4432,"name":"RRUtils.RRIterator","nameLocations":["2457:7:25","2465:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":2299,"src":"2457:18:25"},"referencedDeclaration":2299,"src":"2457:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_storage_ptr","typeString":"struct RRUtils.RRIterator"}},"visibility":"internal"}],"id":4439,"initialValue":{"arguments":[{"hexValue":"30","id":4437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":4435,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"2490:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2495:10:25","memberName":"iterateRRs","nodeType":"MemberAccess","referencedDeclaration":2327,"src":"2490:15:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_RRIterator_$2299_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (struct RRUtils.RRIterator memory)"}},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2490:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"nodeType":"VariableDeclarationStatement","src":"2457:51:25"},"loopExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4444,"name":"iter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"2548:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_RRIterator_$2299_memory_ptr","typeString":"struct RRUtils.RRIterator memory"}},"id":4445,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2553:4:25","memberName":"next","nodeType":"MemberAccess","referencedDeclaration":2448,"src":"2548:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_RRIterator_$2299_memory_ptr_$returns$__$bound_to$_t_struct$_RRIterator_$2299_memory_ptr_$","typeString":"function (struct RRUtils.RRIterator memory) pure"}},"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2548:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4447,"nodeType":"ExpressionStatement","src":"2548:11:25"},"nodeType":"ForStatement","src":"2439:1090:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4549,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"3542:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3547:6:25","memberName":"length","nodeType":"MemberAccess","src":"3542:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3556:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3542:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4571,"nodeType":"IfStatement","src":"3538:285:25","trueBody":{"id":4570,"nodeType":"Block","src":"3559:264:25","statements":[{"expression":{"arguments":[{"id":4554,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4399,"src":"3602:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4555,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"3624:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4556,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"3646:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4557,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"3672:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":4558,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"3694:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4559,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"3718:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3723:6:25","memberName":"length","nodeType":"MemberAccess","src":"3718:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4561,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"3732:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3718:20:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"3756:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3762:6:25","memberName":"length","nodeType":"MemberAccess","src":"3756:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3772:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3756:17:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4567,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4425,"src":"3791:7:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":4553,"name":"setDNSRRSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"3573:11:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint16_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint64_$returns$__$","typeString":"function (bytes32,bytes memory,uint16,bytes memory,uint256,uint256,bool,uint64)"}},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3573:239:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4569,"nodeType":"ExpressionStatement","src":"3573:239:25"}]}}]},"documentation":{"id":4397,"nodeType":"StructuredDocumentation","src":"1152:912:25","text":" Set one or more DNS records.  Records are supplied in wire-format.\n Records with the same node/name/resource must be supplied one after the\n other to ensure the data is updated correctly. For example, if the data\n was supplied:\n     a.example.com IN A 1.2.3.4\n     a.example.com IN A 5.6.7.8\n     www.example.com IN CNAME a.example.com.\n then this would store the two A records for a.example.com correctly as a\n single RRSET, however if the data was supplied:\n     a.example.com IN A 1.2.3.4\n     www.example.com IN CNAME a.example.com.\n     a.example.com IN A 5.6.7.8\n then this would store the first A record, the CNAME, then the second A\n record which would overwrite the first.\n @param node the namehash of the node for which to set the records\n @param data the DNS wire format records to set"},"functionSelector":"0af179d7","id":4573,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4404,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4399,"src":"2177:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4405,"kind":"modifierInvocation","modifierName":{"id":4403,"name":"authorised","nameLocations":["2166:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"2166:10:25"},"nodeType":"ModifierInvocation","src":"2166:16:25"}],"name":"setDNSRecords","nameLocation":"2078:13:25","nodeType":"FunctionDefinition","parameters":{"id":4402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4399,"mutability":"mutable","name":"node","nameLocation":"2109:4:25","nodeType":"VariableDeclaration","scope":4573,"src":"2101:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2101:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4401,"mutability":"mutable","name":"data","nameLocation":"2138:4:25","nodeType":"VariableDeclaration","scope":4573,"src":"2123:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4400,"name":"bytes","nodeType":"ElementaryTypeName","src":"2123:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2091:57:25"},"returnParameters":{"id":4406,"nodeType":"ParameterList","parameters":[],"src":"2183:0:25"},"scope":4831,"src":"2069:1760:25","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[4940],"body":{"id":4598,"nodeType":"Block","src":"4377:87:25","statements":[{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4586,"name":"versionable_records","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"4394:19:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes storage ref))))"}},"id":4590,"indexExpression":{"baseExpression":{"id":4587,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"4414:14:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":4589,"indexExpression":{"id":4588,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"4429:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4414:20:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4394:41:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes storage ref)))"}},"id":4592,"indexExpression":{"id":4591,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"4436:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4394:47:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint16 => bytes storage ref))"}},"id":4594,"indexExpression":{"id":4593,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"4442:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4394:53:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":4596,"indexExpression":{"id":4595,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4580,"src":"4448:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4394:63:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":4585,"id":4597,"nodeType":"Return","src":"4387:70:25"}]},"documentation":{"id":4574,"nodeType":"StructuredDocumentation","src":"3835:391:25","text":" Obtain a DNS record.\n @param node the namehash of the node for which to fetch the record\n @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n @return the DNS record in wire format if present, otherwise empty"},"functionSelector":"a8fa5682","id":4599,"implemented":true,"kind":"function","modifiers":[],"name":"dnsRecord","nameLocation":"4240:9:25","nodeType":"FunctionDefinition","overrides":{"id":4582,"nodeType":"OverrideSpecifier","overrides":[],"src":"4345:8:25"},"parameters":{"id":4581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4576,"mutability":"mutable","name":"node","nameLocation":"4267:4:25","nodeType":"VariableDeclaration","scope":4599,"src":"4259:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4259:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4578,"mutability":"mutable","name":"name","nameLocation":"4289:4:25","nodeType":"VariableDeclaration","scope":4599,"src":"4281:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4281:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4580,"mutability":"mutable","name":"resource","nameLocation":"4310:8:25","nodeType":"VariableDeclaration","scope":4599,"src":"4303:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4579,"name":"uint16","nodeType":"ElementaryTypeName","src":"4303:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4249:75:25"},"returnParameters":{"id":4585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4584,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4599,"src":"4363:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4583,"name":"bytes","nodeType":"ElementaryTypeName","src":"4363:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4362:14:25"},"scope":4831,"src":"4231:233:25","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4622,"nodeType":"Block","src":"4786:115:25","statements":[{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4609,"name":"versionable_nameEntriesCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"4804:28:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_uint16_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))"}},"id":4613,"indexExpression":{"baseExpression":{"id":4610,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"4833:14:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":4612,"indexExpression":{"id":4611,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4602,"src":"4848:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4833:20:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4804:50:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_uint16_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => uint16))"}},"id":4615,"indexExpression":{"id":4614,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4602,"src":"4855:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4804:56:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint16_$","typeString":"mapping(bytes32 => uint16)"}},"id":4617,"indexExpression":{"id":4616,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4604,"src":"4874:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4804:84:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4892:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4804:89:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4620,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4803:91:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4608,"id":4621,"nodeType":"Return","src":"4796:98:25"}]},"documentation":{"id":4600,"nodeType":"StructuredDocumentation","src":"4470:203:25","text":" Check if a given node has records.\n @param node the namehash of the node for which to check the records\n @param name the namehash of the node for which to check the records"},"functionSelector":"4cbf6ba4","id":4623,"implemented":true,"kind":"function","modifiers":[],"name":"hasDNSRecords","nameLocation":"4687:13:25","nodeType":"FunctionDefinition","parameters":{"id":4605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4602,"mutability":"mutable","name":"node","nameLocation":"4718:4:25","nodeType":"VariableDeclaration","scope":4623,"src":"4710:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4710:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4604,"mutability":"mutable","name":"name","nameLocation":"4740:4:25","nodeType":"VariableDeclaration","scope":4623,"src":"4732:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4603,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4732:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4700:50:25"},"returnParameters":{"id":4608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4623,"src":"4780:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4606,"name":"bool","nodeType":"ElementaryTypeName","src":"4780:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4779:6:25"},"scope":4831,"src":"4678:223:25","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4662,"nodeType":"Block","src":"5233:293:25","statements":[{"assignments":[4635],"declarations":[{"constant":false,"id":4635,"mutability":"mutable","name":"currentRecordVersion","nameLocation":"5250:20:25","nodeType":"VariableDeclaration","scope":4662,"src":"5243:27:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4634,"name":"uint64","nodeType":"ElementaryTypeName","src":"5243:6:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":4639,"initialValue":{"baseExpression":{"id":4636,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"5273:14:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":4638,"indexExpression":{"id":4637,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"5288:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5273:20:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"5243:50:25"},{"assignments":[4641],"declarations":[{"constant":false,"id":4641,"mutability":"mutable","name":"oldhash","nameLocation":"5316:7:25","nodeType":"VariableDeclaration","scope":4662,"src":"5303:20:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4640,"name":"bytes","nodeType":"ElementaryTypeName","src":"5303:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4647,"initialValue":{"baseExpression":{"baseExpression":{"id":4642,"name":"versionable_zonehashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"5326:22:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => bytes storage ref))"}},"id":4644,"indexExpression":{"id":4643,"name":"currentRecordVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"5349:20:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5326:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":4646,"indexExpression":{"id":4645,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"5384:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5326:72:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5303:95:25"},{"expression":{"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4648,"name":"versionable_zonehashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"5408:22:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => bytes storage ref))"}},"id":4651,"indexExpression":{"id":4649,"name":"currentRecordVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"5431:20:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5408:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":4652,"indexExpression":{"id":4650,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"5453:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5408:50:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4653,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"5461:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"src":"5408:57:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4655,"nodeType":"ExpressionStatement","src":"5408:57:25"},{"eventCall":{"arguments":[{"id":4657,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"5499:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4658,"name":"oldhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4641,"src":"5505:7:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4659,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"5514:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4656,"name":"DNSZonehashChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"5480:18:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory,bytes memory)"}},"id":4660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5480:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4661,"nodeType":"EmitStatement","src":"5475:44:25"}]},"documentation":{"id":4624,"nodeType":"StructuredDocumentation","src":"4907:209:25","text":" setZonehash sets the hash for the zone.\n May only be called by the owner of that node in the ENS registry.\n @param node The node to update.\n @param hash The zonehash to set"},"functionSelector":"ce3decdc","id":4663,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4631,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"5227:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4632,"kind":"modifierInvocation","modifierName":{"id":4630,"name":"authorised","nameLocations":["5216:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"5216:10:25"},"nodeType":"ModifierInvocation","src":"5216:16:25"}],"name":"setZonehash","nameLocation":"5130:11:25","nodeType":"FunctionDefinition","parameters":{"id":4629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4626,"mutability":"mutable","name":"node","nameLocation":"5159:4:25","nodeType":"VariableDeclaration","scope":4663,"src":"5151:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4625,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5151:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4628,"mutability":"mutable","name":"hash","nameLocation":"5188:4:25","nodeType":"VariableDeclaration","scope":4663,"src":"5173:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4627,"name":"bytes","nodeType":"ElementaryTypeName","src":"5173:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5141:57:25"},"returnParameters":{"id":4633,"nodeType":"ParameterList","parameters":[],"src":"5233:0:25"},"scope":4831,"src":"5121:405:25","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[4959],"body":{"id":4680,"nodeType":"Block","src":"5780:74:25","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":4672,"name":"versionable_zonehashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"5797:22:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => bytes storage ref))"}},"id":4676,"indexExpression":{"baseExpression":{"id":4673,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"5820:14:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":4675,"indexExpression":{"id":4674,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"5835:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5820:20:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5797:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":4678,"indexExpression":{"id":4677,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"5842:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5797:50:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":4671,"id":4679,"nodeType":"Return","src":"5790:57:25"}]},"documentation":{"id":4664,"nodeType":"StructuredDocumentation","src":"5532:143:25","text":" zonehash obtains the hash for the zone.\n @param node The ENS node to query.\n @return The associated contenthash."},"functionSelector":"5c98042b","id":4681,"implemented":true,"kind":"function","modifiers":[],"name":"zonehash","nameLocation":"5689:8:25","nodeType":"FunctionDefinition","overrides":{"id":4668,"nodeType":"OverrideSpecifier","overrides":[],"src":"5748:8:25"},"parameters":{"id":4667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4666,"mutability":"mutable","name":"node","nameLocation":"5715:4:25","nodeType":"VariableDeclaration","scope":4681,"src":"5707:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5707:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5697:28:25"},"returnParameters":{"id":4671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4681,"src":"5766:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4669,"name":"bytes","nodeType":"ElementaryTypeName","src":"5766:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5765:14:25"},"scope":4831,"src":"5680:174:25","stateMutability":"view","virtual":true,"visibility":"external"},{"baseFunctions":[3926],"body":{"id":4708,"nodeType":"Block","src":"5965:204:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4689,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"5994:11:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4691,"name":"IDNSRecordResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4941,"src":"6014:18:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDNSRecordResolver_$4941_$","typeString":"type(contract IDNSRecordResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IDNSRecordResolver_$4941_$","typeString":"type(contract IDNSRecordResolver)"}],"id":4690,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6009:4:25","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6009:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IDNSRecordResolver_$4941","typeString":"type(contract IDNSRecordResolver)"}},"id":4693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6034:11:25","memberName":"interfaceId","nodeType":"MemberAccess","src":"6009:36:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"5994:51:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4695,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"6061:11:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4697,"name":"IDNSZoneResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"6081:16:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDNSZoneResolver_$4960_$","typeString":"type(contract IDNSZoneResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IDNSZoneResolver_$4960_$","typeString":"type(contract IDNSZoneResolver)"}],"id":4696,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6076:4:25","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6076:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IDNSZoneResolver_$4960","typeString":"type(contract IDNSZoneResolver)"}},"id":4699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6099:11:25","memberName":"interfaceId","nodeType":"MemberAccess","src":"6076:34:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"6061:49:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5994:116:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4704,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"6150:11:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4702,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"6126:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_DNSResolver_$4831_$","typeString":"type(contract super DNSResolver)"}},"id":4703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6132:17:25","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3926,"src":"6126:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6126:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5994:168:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4688,"id":4707,"nodeType":"Return","src":"5975:187:25"}]},"functionSelector":"01ffc9a7","id":4709,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"5869:17:25","nodeType":"FunctionDefinition","overrides":{"id":4685,"nodeType":"OverrideSpecifier","overrides":[],"src":"5941:8:25"},"parameters":{"id":4684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4683,"mutability":"mutable","name":"interfaceID","nameLocation":"5903:11:25","nodeType":"VariableDeclaration","scope":4709,"src":"5896:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4682,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5896:6:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5886:34:25"},"returnParameters":{"id":4688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4709,"src":"5959:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4686,"name":"bool","nodeType":"ElementaryTypeName","src":"5959:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5958:6:25"},"scope":4831,"src":"5860:309:25","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4829,"nodeType":"Block","src":"6408:880:25","statements":[{"assignments":[4729],"declarations":[{"constant":false,"id":4729,"mutability":"mutable","name":"nameHash","nameLocation":"6426:8:25","nodeType":"VariableDeclaration","scope":4829,"src":"6418:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4728,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6418:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4733,"initialValue":{"arguments":[{"id":4731,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"6447:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4730,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6437:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6437:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6418:34:25"},{"assignments":[4735],"declarations":[{"constant":false,"id":4735,"mutability":"mutable","name":"rrData","nameLocation":"6475:6:25","nodeType":"VariableDeclaration","scope":4829,"src":"6462:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4734,"name":"bytes","nodeType":"ElementaryTypeName","src":"6462:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4741,"initialValue":{"arguments":[{"id":4738,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"6499:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4739,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"6507:4:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4736,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4717,"src":"6484:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6489:9:25","memberName":"substring","nodeType":"MemberAccess","referencedDeclaration":6261,"src":"6484:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6484:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6462:50:25"},{"condition":{"id":4742,"name":"deleteRecord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"6526:12:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4827,"nodeType":"Block","src":"6910:372:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4785,"name":"versionable_records","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"6945:19:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes storage ref))))"}},"id":4787,"indexExpression":{"id":4786,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4725,"src":"6965:7:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6945:28:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes storage ref)))"}},"id":4789,"indexExpression":{"id":4788,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"6974:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6945:34:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint16 => bytes storage ref))"}},"id":4791,"indexExpression":{"id":4790,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"6980:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6945:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":4793,"indexExpression":{"id":4792,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"6990:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6945:54:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7000:6:25","memberName":"length","nodeType":"MemberAccess","src":"6945:61:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7026:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6945:82:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4807,"nodeType":"IfStatement","src":"6924:206:25","trueBody":{"id":4806,"nodeType":"Block","src":"7042:88:25","statements":[{"expression":{"id":4804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7060:55:25","subExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4797,"name":"versionable_nameEntriesCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"7060:28:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_uint16_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))"}},"id":4801,"indexExpression":{"id":4798,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4725,"src":"7089:7:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7060:37:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_uint16_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => uint16))"}},"id":4802,"indexExpression":{"id":4799,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"7098:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7060:43:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint16_$","typeString":"mapping(bytes32 => uint16)"}},"id":4803,"indexExpression":{"id":4800,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"7104:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7060:53:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4805,"nodeType":"ExpressionStatement","src":"7060:55:25"}]}},{"expression":{"id":4818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4808,"name":"versionable_records","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"7143:19:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes storage ref))))"}},"id":4813,"indexExpression":{"id":4809,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4725,"src":"7163:7:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7143:28:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes storage ref)))"}},"id":4814,"indexExpression":{"id":4810,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"7172:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7143:34:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint16 => bytes storage ref))"}},"id":4815,"indexExpression":{"id":4811,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"7178:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7143:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":4816,"indexExpression":{"id":4812,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"7188:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7143:54:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4817,"name":"rrData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4735,"src":"7200:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"7143:63:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4819,"nodeType":"ExpressionStatement","src":"7143:63:25"},{"eventCall":{"arguments":[{"id":4821,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"7242:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4822,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"7248:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4823,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"7254:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4824,"name":"rrData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4735,"src":"7264:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4820,"name":"DNSRecordChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"7225:16:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint16_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory,uint16,bytes memory)"}},"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7225:46:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4826,"nodeType":"EmitStatement","src":"7220:51:25"}]},"id":4828,"nodeType":"IfStatement","src":"6522:760:25","trueBody":{"id":4784,"nodeType":"Block","src":"6540:364:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4743,"name":"versionable_records","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"6575:19:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes storage ref))))"}},"id":4745,"indexExpression":{"id":4744,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4725,"src":"6595:7:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6575:28:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes storage ref)))"}},"id":4747,"indexExpression":{"id":4746,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"6604:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6575:34:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint16 => bytes storage ref))"}},"id":4749,"indexExpression":{"id":4748,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"6610:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6575:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":4751,"indexExpression":{"id":4750,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"6620:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6575:54:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6630:6:25","memberName":"length","nodeType":"MemberAccess","src":"6575:61:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6656:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6575:82:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4765,"nodeType":"IfStatement","src":"6554:206:25","trueBody":{"id":4764,"nodeType":"Block","src":"6672:88:25","statements":[{"expression":{"id":4762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"6690:55:25","subExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4755,"name":"versionable_nameEntriesCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"6690:28:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_uint16_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))"}},"id":4759,"indexExpression":{"id":4756,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4725,"src":"6719:7:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6690:37:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_uint16_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => uint16))"}},"id":4760,"indexExpression":{"id":4757,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"6728:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6690:43:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint16_$","typeString":"mapping(bytes32 => uint16)"}},"id":4761,"indexExpression":{"id":4758,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"6734:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6690:53:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4763,"nodeType":"ExpressionStatement","src":"6690:55:25"}]}},{"expression":{"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"6773:63:25","subExpression":{"components":[{"baseExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4766,"name":"versionable_records","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"6781:19:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes storage ref))))"}},"id":4768,"indexExpression":{"id":4767,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4725,"src":"6801:7:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6781:28:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes storage ref)))"}},"id":4770,"indexExpression":{"id":4769,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"6810:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6781:34:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(uint16 => bytes storage ref))"}},"id":4772,"indexExpression":{"id":4771,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"6816:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6781:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":4774,"indexExpression":{"id":4773,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"6826:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6781:54:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"id":4775,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"6780:56:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4777,"nodeType":"ExpressionStatement","src":"6773:63:25"},{"eventCall":{"arguments":[{"id":4779,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"6872:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4780,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"6878:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4781,"name":"resource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"6884:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":4778,"name":"DNSRecordDeleted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"6855:16:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint16_$returns$__$","typeString":"function (bytes32,bytes memory,uint16)"}},"id":4782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6855:38:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4783,"nodeType":"EmitStatement","src":"6850:43:25"}]}}]},"id":4830,"implemented":true,"kind":"function","modifiers":[],"name":"setDNSRRSet","nameLocation":"6184:11:25","nodeType":"FunctionDefinition","parameters":{"id":4726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4711,"mutability":"mutable","name":"node","nameLocation":"6213:4:25","nodeType":"VariableDeclaration","scope":4830,"src":"6205:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6205:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4713,"mutability":"mutable","name":"name","nameLocation":"6240:4:25","nodeType":"VariableDeclaration","scope":4830,"src":"6227:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4712,"name":"bytes","nodeType":"ElementaryTypeName","src":"6227:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4715,"mutability":"mutable","name":"resource","nameLocation":"6261:8:25","nodeType":"VariableDeclaration","scope":4830,"src":"6254:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4714,"name":"uint16","nodeType":"ElementaryTypeName","src":"6254:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4717,"mutability":"mutable","name":"data","nameLocation":"6292:4:25","nodeType":"VariableDeclaration","scope":4830,"src":"6279:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4716,"name":"bytes","nodeType":"ElementaryTypeName","src":"6279:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4719,"mutability":"mutable","name":"offset","nameLocation":"6314:6:25","nodeType":"VariableDeclaration","scope":4830,"src":"6306:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4718,"name":"uint256","nodeType":"ElementaryTypeName","src":"6306:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4721,"mutability":"mutable","name":"size","nameLocation":"6338:4:25","nodeType":"VariableDeclaration","scope":4830,"src":"6330:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4720,"name":"uint256","nodeType":"ElementaryTypeName","src":"6330:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4723,"mutability":"mutable","name":"deleteRecord","nameLocation":"6357:12:25","nodeType":"VariableDeclaration","scope":4830,"src":"6352:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4722,"name":"bool","nodeType":"ElementaryTypeName","src":"6352:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4725,"mutability":"mutable","name":"version","nameLocation":"6386:7:25","nodeType":"VariableDeclaration","scope":4830,"src":"6379:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4724,"name":"uint64","nodeType":"ElementaryTypeName","src":"6379:6:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6195:204:25"},"returnParameters":{"id":4727,"nodeType":"ParameterList","parameters":[],"src":"6408:0:25"},"scope":4831,"src":"6175:1113:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":4832,"src":"199:7091:25","usedErrors":[]}],"src":"32:7259:25"},"id":25},"contracts/resolvers/profiles/IABIResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IABIResolver.sol","exportedSymbols":{"IABIResolver":[4852]},"id":4853,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4833,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IABIResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4852,"linearizedBaseContracts":[4852],"name":"IABIResolver","nameLocation":"68:12:26","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"aa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3","id":4839,"name":"ABIChanged","nameLocation":"93:10:26","nodeType":"EventDefinition","parameters":{"id":4838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4835,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"120:4:26","nodeType":"VariableDeclaration","scope":4839,"src":"104:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4834,"name":"bytes32","nodeType":"ElementaryTypeName","src":"104:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4837,"indexed":true,"mutability":"mutable","name":"contentType","nameLocation":"142:11:26","nodeType":"VariableDeclaration","scope":4839,"src":"126:27:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4836,"name":"uint256","nodeType":"ElementaryTypeName","src":"126:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"103:51:26"},"src":"87:68:26"},{"documentation":{"id":4840,"nodeType":"StructuredDocumentation","src":"161:310:26","text":" Returns the ABI associated with an ENS node.\n Defined in EIP205.\n @param node The ENS node to query\n @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n @return contentType The content type of the return value\n @return data The ABI data"},"functionSelector":"2203ab56","id":4851,"implemented":false,"kind":"function","modifiers":[],"name":"ABI","nameLocation":"485:3:26","nodeType":"FunctionDefinition","parameters":{"id":4845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4842,"mutability":"mutable","name":"node","nameLocation":"506:4:26","nodeType":"VariableDeclaration","scope":4851,"src":"498:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4841,"name":"bytes32","nodeType":"ElementaryTypeName","src":"498:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4844,"mutability":"mutable","name":"contentTypes","nameLocation":"528:12:26","nodeType":"VariableDeclaration","scope":4851,"src":"520:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4843,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"488:58:26"},"returnParameters":{"id":4850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4847,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4851,"src":"570:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4846,"name":"uint256","nodeType":"ElementaryTypeName","src":"570:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4849,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4851,"src":"579:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4848,"name":"bytes","nodeType":"ElementaryTypeName","src":"579:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"569:23:26"},"scope":4852,"src":"476:117:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4853,"src":"58:537:26","usedErrors":[]}],"src":"32:564:26"},"id":26},"contracts/resolvers/profiles/IAddrResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IAddrResolver.sol","exportedSymbols":{"IAddrResolver":[4870]},"id":4871,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4854,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"IAddrResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":4855,"nodeType":"StructuredDocumentation","src":"58:61:27","text":" Interface for the legacy (ETH-only) addr function."},"fullyImplemented":false,"id":4870,"linearizedBaseContracts":[4870],"name":"IAddrResolver","nameLocation":"130:13:27","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2","id":4861,"name":"AddrChanged","nameLocation":"156:11:27","nodeType":"EventDefinition","parameters":{"id":4860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4857,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"184:4:27","nodeType":"VariableDeclaration","scope":4861,"src":"168:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4856,"name":"bytes32","nodeType":"ElementaryTypeName","src":"168:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4859,"indexed":false,"mutability":"mutable","name":"a","nameLocation":"198:1:27","nodeType":"VariableDeclaration","scope":4861,"src":"190:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4858,"name":"address","nodeType":"ElementaryTypeName","src":"190:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"167:33:27"},"src":"150:51:27"},{"documentation":{"id":4862,"nodeType":"StructuredDocumentation","src":"207:148:27","text":" Returns the address associated with an ENS node.\n @param node The ENS node to query.\n @return The associated address."},"functionSelector":"3b3b57de","id":4869,"implemented":false,"kind":"function","modifiers":[],"name":"addr","nameLocation":"369:4:27","nodeType":"FunctionDefinition","parameters":{"id":4865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4864,"mutability":"mutable","name":"node","nameLocation":"382:4:27","nodeType":"VariableDeclaration","scope":4869,"src":"374:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4863,"name":"bytes32","nodeType":"ElementaryTypeName","src":"374:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"373:14:27"},"returnParameters":{"id":4868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4869,"src":"411:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4866,"name":"address","nodeType":"ElementaryTypeName","src":"411:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"410:17:27"},"scope":4870,"src":"360:68:27","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4871,"src":"120:310:27","usedErrors":[]}],"src":"32:399:27"},"id":27},"contracts/resolvers/profiles/IAddressResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IAddressResolver.sol","exportedSymbols":{"IAddressResolver":[4891]},"id":4892,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4872,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IAddressResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":4873,"nodeType":"StructuredDocumentation","src":"58:59:28","text":" Interface for the new (multicoin) addr function."},"fullyImplemented":false,"id":4891,"linearizedBaseContracts":[4891],"name":"IAddressResolver","nameLocation":"128:16:28","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752","id":4881,"name":"AddressChanged","nameLocation":"157:14:28","nodeType":"EventDefinition","parameters":{"id":4880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4875,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"197:4:28","nodeType":"VariableDeclaration","scope":4881,"src":"181:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4874,"name":"bytes32","nodeType":"ElementaryTypeName","src":"181:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4877,"indexed":false,"mutability":"mutable","name":"coinType","nameLocation":"219:8:28","nodeType":"VariableDeclaration","scope":4881,"src":"211:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4876,"name":"uint256","nodeType":"ElementaryTypeName","src":"211:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4879,"indexed":false,"mutability":"mutable","name":"newAddress","nameLocation":"243:10:28","nodeType":"VariableDeclaration","scope":4881,"src":"237:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4878,"name":"bytes","nodeType":"ElementaryTypeName","src":"237:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"171:88:28"},"src":"151:109:28"},{"functionSelector":"f1cb7e06","id":4890,"implemented":false,"kind":"function","modifiers":[],"name":"addr","nameLocation":"275:4:28","nodeType":"FunctionDefinition","parameters":{"id":4886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4883,"mutability":"mutable","name":"node","nameLocation":"297:4:28","nodeType":"VariableDeclaration","scope":4890,"src":"289:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4882,"name":"bytes32","nodeType":"ElementaryTypeName","src":"289:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4885,"mutability":"mutable","name":"coinType","nameLocation":"319:8:28","nodeType":"VariableDeclaration","scope":4890,"src":"311:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4884,"name":"uint256","nodeType":"ElementaryTypeName","src":"311:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"279:54:28"},"returnParameters":{"id":4889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4890,"src":"357:12:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4887,"name":"bytes","nodeType":"ElementaryTypeName","src":"357:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"356:14:28"},"scope":4891,"src":"266:105:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4892,"src":"118:255:28","usedErrors":[]}],"src":"32:342:28"},"id":28},"contracts/resolvers/profiles/IContentHashResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IContentHashResolver.sol","exportedSymbols":{"IContentHashResolver":[4908]},"id":4909,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4893,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:29"},{"abstract":false,"baseContracts":[],"canonicalName":"IContentHashResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4908,"linearizedBaseContracts":[4908],"name":"IContentHashResolver","nameLocation":"68:20:29","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"e379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578","id":4899,"name":"ContenthashChanged","nameLocation":"101:18:29","nodeType":"EventDefinition","parameters":{"id":4898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4895,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"136:4:29","nodeType":"VariableDeclaration","scope":4899,"src":"120:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4894,"name":"bytes32","nodeType":"ElementaryTypeName","src":"120:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4897,"indexed":false,"mutability":"mutable","name":"hash","nameLocation":"148:4:29","nodeType":"VariableDeclaration","scope":4899,"src":"142:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4896,"name":"bytes","nodeType":"ElementaryTypeName","src":"142:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"119:34:29"},"src":"95:59:29"},{"documentation":{"id":4900,"nodeType":"StructuredDocumentation","src":"160:156:29","text":" Returns the contenthash associated with an ENS node.\n @param node The ENS node to query.\n @return The associated contenthash."},"functionSelector":"bc1c58d1","id":4907,"implemented":false,"kind":"function","modifiers":[],"name":"contenthash","nameLocation":"330:11:29","nodeType":"FunctionDefinition","parameters":{"id":4903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4902,"mutability":"mutable","name":"node","nameLocation":"350:4:29","nodeType":"VariableDeclaration","scope":4907,"src":"342:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"342:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"341:14:29"},"returnParameters":{"id":4906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4905,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4907,"src":"379:12:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4904,"name":"bytes","nodeType":"ElementaryTypeName","src":"379:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"378:14:29"},"scope":4908,"src":"321:72:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4909,"src":"58:337:29","usedErrors":[]}],"src":"32:364:29"},"id":29},"contracts/resolvers/profiles/IDNSRecordResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IDNSRecordResolver.sol","exportedSymbols":{"IDNSRecordResolver":[4941]},"id":4942,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4910,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:30"},{"abstract":false,"baseContracts":[],"canonicalName":"IDNSRecordResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4941,"linearizedBaseContracts":[4941],"name":"IDNSRecordResolver","nameLocation":"68:18:30","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b","id":4920,"name":"DNSRecordChanged","nameLocation":"190:16:30","nodeType":"EventDefinition","parameters":{"id":4919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4912,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"232:4:30","nodeType":"VariableDeclaration","scope":4920,"src":"216:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"216:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4914,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"252:4:30","nodeType":"VariableDeclaration","scope":4920,"src":"246:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4913,"name":"bytes","nodeType":"ElementaryTypeName","src":"246:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4916,"indexed":false,"mutability":"mutable","name":"resource","nameLocation":"273:8:30","nodeType":"VariableDeclaration","scope":4920,"src":"266:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4915,"name":"uint16","nodeType":"ElementaryTypeName","src":"266:6:30","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4918,"indexed":false,"mutability":"mutable","name":"record","nameLocation":"297:6:30","nodeType":"VariableDeclaration","scope":4920,"src":"291:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4917,"name":"bytes","nodeType":"ElementaryTypeName","src":"291:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"206:103:30"},"src":"184:126:30"},{"anonymous":false,"eventSelector":"03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a1207","id":4928,"name":"DNSRecordDeleted","nameLocation":"412:16:30","nodeType":"EventDefinition","parameters":{"id":4927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4922,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"445:4:30","nodeType":"VariableDeclaration","scope":4928,"src":"429:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"429:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4924,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"457:4:30","nodeType":"VariableDeclaration","scope":4928,"src":"451:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4923,"name":"bytes","nodeType":"ElementaryTypeName","src":"451:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4926,"indexed":false,"mutability":"mutable","name":"resource","nameLocation":"470:8:30","nodeType":"VariableDeclaration","scope":4928,"src":"463:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4925,"name":"uint16","nodeType":"ElementaryTypeName","src":"463:6:30","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"428:51:30"},"src":"406:74:30"},{"documentation":{"id":4929,"nodeType":"StructuredDocumentation","src":"486:391:30","text":" Obtain a DNS record.\n @param node the namehash of the node for which to fetch the record\n @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n @return the DNS record in wire format if present, otherwise empty"},"functionSelector":"a8fa5682","id":4940,"implemented":false,"kind":"function","modifiers":[],"name":"dnsRecord","nameLocation":"891:9:30","nodeType":"FunctionDefinition","parameters":{"id":4936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4931,"mutability":"mutable","name":"node","nameLocation":"918:4:30","nodeType":"VariableDeclaration","scope":4940,"src":"910:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4930,"name":"bytes32","nodeType":"ElementaryTypeName","src":"910:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4933,"mutability":"mutable","name":"name","nameLocation":"940:4:30","nodeType":"VariableDeclaration","scope":4940,"src":"932:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4932,"name":"bytes32","nodeType":"ElementaryTypeName","src":"932:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4935,"mutability":"mutable","name":"resource","nameLocation":"961:8:30","nodeType":"VariableDeclaration","scope":4940,"src":"954:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4934,"name":"uint16","nodeType":"ElementaryTypeName","src":"954:6:30","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"900:75:30"},"returnParameters":{"id":4939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4940,"src":"999:12:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4937,"name":"bytes","nodeType":"ElementaryTypeName","src":"999:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"998:14:30"},"scope":4941,"src":"882:131:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4942,"src":"58:957:30","usedErrors":[]}],"src":"32:984:30"},"id":30},"contracts/resolvers/profiles/IDNSZoneResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IDNSZoneResolver.sol","exportedSymbols":{"IDNSZoneResolver":[4960]},"id":4961,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4943,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:31"},{"abstract":false,"baseContracts":[],"canonicalName":"IDNSZoneResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4960,"linearizedBaseContracts":[4960],"name":"IDNSZoneResolver","nameLocation":"68:16:31","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f85","id":4951,"name":"DNSZonehashChanged","nameLocation":"180:18:31","nodeType":"EventDefinition","parameters":{"id":4950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4945,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"224:4:31","nodeType":"VariableDeclaration","scope":4951,"src":"208:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4944,"name":"bytes32","nodeType":"ElementaryTypeName","src":"208:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4947,"indexed":false,"mutability":"mutable","name":"lastzonehash","nameLocation":"244:12:31","nodeType":"VariableDeclaration","scope":4951,"src":"238:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4946,"name":"bytes","nodeType":"ElementaryTypeName","src":"238:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4949,"indexed":false,"mutability":"mutable","name":"zonehash","nameLocation":"272:8:31","nodeType":"VariableDeclaration","scope":4951,"src":"266:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4948,"name":"bytes","nodeType":"ElementaryTypeName","src":"266:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"198:88:31"},"src":"174:113:31"},{"documentation":{"id":4952,"nodeType":"StructuredDocumentation","src":"293:143:31","text":" zonehash obtains the hash for the zone.\n @param node The ENS node to query.\n @return The associated contenthash."},"functionSelector":"5c98042b","id":4959,"implemented":false,"kind":"function","modifiers":[],"name":"zonehash","nameLocation":"450:8:31","nodeType":"FunctionDefinition","parameters":{"id":4955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4954,"mutability":"mutable","name":"node","nameLocation":"467:4:31","nodeType":"VariableDeclaration","scope":4959,"src":"459:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4953,"name":"bytes32","nodeType":"ElementaryTypeName","src":"459:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"458:14:31"},"returnParameters":{"id":4958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4957,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4959,"src":"496:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4956,"name":"bytes","nodeType":"ElementaryTypeName","src":"496:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"495:14:31"},"scope":4960,"src":"441:69:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4961,"src":"58:454:31","usedErrors":[]}],"src":"32:481:31"},"id":31},"contracts/resolvers/profiles/IInterfaceResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IInterfaceResolver.sol","exportedSymbols":{"IInterfaceResolver":[4981]},"id":4982,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4962,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:32"},{"abstract":false,"baseContracts":[],"canonicalName":"IInterfaceResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4981,"linearizedBaseContracts":[4981],"name":"IInterfaceResolver","nameLocation":"68:18:32","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa","id":4970,"name":"InterfaceChanged","nameLocation":"99:16:32","nodeType":"EventDefinition","parameters":{"id":4969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4964,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"141:4:32","nodeType":"VariableDeclaration","scope":4970,"src":"125:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"125:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4966,"indexed":true,"mutability":"mutable","name":"interfaceID","nameLocation":"170:11:32","nodeType":"VariableDeclaration","scope":4970,"src":"155:26:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4965,"name":"bytes4","nodeType":"ElementaryTypeName","src":"155:6:32","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":4968,"indexed":false,"mutability":"mutable","name":"implementer","nameLocation":"199:11:32","nodeType":"VariableDeclaration","scope":4970,"src":"191:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4967,"name":"address","nodeType":"ElementaryTypeName","src":"191:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"115:101:32"},"src":"93:124:32"},{"documentation":{"id":4971,"nodeType":"StructuredDocumentation","src":"223:626:32","text":" Returns the address of a contract that implements the specified interface for this name.\n If an implementer has not been set for this interfaceID and name, the resolver will query\n the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\n contract implements EIP165 and returns `true` for the specified interfaceID, its address\n will be returned.\n @param node The ENS node to query.\n @param interfaceID The EIP 165 interface ID to check for.\n @return The address that implements this interface, or 0 if the interface is unsupported."},"functionSelector":"124a319c","id":4980,"implemented":false,"kind":"function","modifiers":[],"name":"interfaceImplementer","nameLocation":"863:20:32","nodeType":"FunctionDefinition","parameters":{"id":4976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4973,"mutability":"mutable","name":"node","nameLocation":"901:4:32","nodeType":"VariableDeclaration","scope":4980,"src":"893:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4972,"name":"bytes32","nodeType":"ElementaryTypeName","src":"893:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4975,"mutability":"mutable","name":"interfaceID","nameLocation":"922:11:32","nodeType":"VariableDeclaration","scope":4980,"src":"915:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4974,"name":"bytes4","nodeType":"ElementaryTypeName","src":"915:6:32","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"883:56:32"},"returnParameters":{"id":4979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4980,"src":"963:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4977,"name":"address","nodeType":"ElementaryTypeName","src":"963:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"962:9:32"},"scope":4981,"src":"854:118:32","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4982,"src":"58:916:32","usedErrors":[]}],"src":"32:943:32"},"id":32},"contracts/resolvers/profiles/INameResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/INameResolver.sol","exportedSymbols":{"INameResolver":[4998]},"id":4999,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4983,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:33"},{"abstract":false,"baseContracts":[],"canonicalName":"INameResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4998,"linearizedBaseContracts":[4998],"name":"INameResolver","nameLocation":"68:13:33","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"b7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7","id":4989,"name":"NameChanged","nameLocation":"94:11:33","nodeType":"EventDefinition","parameters":{"id":4988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4985,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"122:4:33","nodeType":"VariableDeclaration","scope":4989,"src":"106:20:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4984,"name":"bytes32","nodeType":"ElementaryTypeName","src":"106:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4987,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"135:4:33","nodeType":"VariableDeclaration","scope":4989,"src":"128:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4986,"name":"string","nodeType":"ElementaryTypeName","src":"128:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"105:35:33"},"src":"88:53:33"},{"documentation":{"id":4990,"nodeType":"StructuredDocumentation","src":"147:189:33","text":" Returns the name associated with an ENS node, for reverse records.\n Defined in EIP181.\n @param node The ENS node to query.\n @return The associated name."},"functionSelector":"691f3431","id":4997,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"350:4:33","nodeType":"FunctionDefinition","parameters":{"id":4993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4992,"mutability":"mutable","name":"node","nameLocation":"363:4:33","nodeType":"VariableDeclaration","scope":4997,"src":"355:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4991,"name":"bytes32","nodeType":"ElementaryTypeName","src":"355:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"354:14:33"},"returnParameters":{"id":4996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4997,"src":"392:13:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4994,"name":"string","nodeType":"ElementaryTypeName","src":"392:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"391:15:33"},"scope":4998,"src":"341:66:33","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4999,"src":"58:351:33","usedErrors":[]}],"src":"32:378:33"},"id":33},"contracts/resolvers/profiles/IPubkeyResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IPubkeyResolver.sol","exportedSymbols":{"IPubkeyResolver":[5019]},"id":5020,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5000,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:34"},{"abstract":false,"baseContracts":[],"canonicalName":"IPubkeyResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5019,"linearizedBaseContracts":[5019],"name":"IPubkeyResolver","nameLocation":"68:15:34","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46","id":5008,"name":"PubkeyChanged","nameLocation":"96:13:34","nodeType":"EventDefinition","parameters":{"id":5007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5002,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"126:4:34","nodeType":"VariableDeclaration","scope":5008,"src":"110:20:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5001,"name":"bytes32","nodeType":"ElementaryTypeName","src":"110:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5004,"indexed":false,"mutability":"mutable","name":"x","nameLocation":"140:1:34","nodeType":"VariableDeclaration","scope":5008,"src":"132:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5003,"name":"bytes32","nodeType":"ElementaryTypeName","src":"132:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5006,"indexed":false,"mutability":"mutable","name":"y","nameLocation":"151:1:34","nodeType":"VariableDeclaration","scope":5008,"src":"143:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5005,"name":"bytes32","nodeType":"ElementaryTypeName","src":"143:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"109:44:34"},"src":"90:64:34"},{"documentation":{"id":5009,"nodeType":"StructuredDocumentation","src":"160:294:34","text":" Returns the SECP256k1 public key associated with an ENS node.\n Defined in EIP 619.\n @param node The ENS node to query\n @return x The X coordinate of the curve point for the public key.\n @return y The Y coordinate of the curve point for the public key."},"functionSelector":"c8690233","id":5018,"implemented":false,"kind":"function","modifiers":[],"name":"pubkey","nameLocation":"468:6:34","nodeType":"FunctionDefinition","parameters":{"id":5012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5011,"mutability":"mutable","name":"node","nameLocation":"483:4:34","nodeType":"VariableDeclaration","scope":5018,"src":"475:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5010,"name":"bytes32","nodeType":"ElementaryTypeName","src":"475:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"474:14:34"},"returnParameters":{"id":5017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5014,"mutability":"mutable","name":"x","nameLocation":"520:1:34","nodeType":"VariableDeclaration","scope":5018,"src":"512:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5013,"name":"bytes32","nodeType":"ElementaryTypeName","src":"512:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5016,"mutability":"mutable","name":"y","nameLocation":"531:1:34","nodeType":"VariableDeclaration","scope":5018,"src":"523:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5015,"name":"bytes32","nodeType":"ElementaryTypeName","src":"523:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"511:22:34"},"scope":5019,"src":"459:75:34","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5020,"src":"58:478:34","usedErrors":[]}],"src":"32:505:34"},"id":34},"contracts/resolvers/profiles/ITextResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/ITextResolver.sol","exportedSymbols":{"ITextResolver":[5042]},"id":5043,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5021,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:35"},{"abstract":false,"baseContracts":[],"canonicalName":"ITextResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5042,"linearizedBaseContracts":[5042],"name":"ITextResolver","nameLocation":"68:13:35","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a1","id":5031,"name":"TextChanged","nameLocation":"94:11:35","nodeType":"EventDefinition","parameters":{"id":5030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5023,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"131:4:35","nodeType":"VariableDeclaration","scope":5031,"src":"115:20:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"115:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5025,"indexed":true,"mutability":"mutable","name":"indexedKey","nameLocation":"160:10:35","nodeType":"VariableDeclaration","scope":5031,"src":"145:25:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5024,"name":"string","nodeType":"ElementaryTypeName","src":"145:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5027,"indexed":false,"mutability":"mutable","name":"key","nameLocation":"187:3:35","nodeType":"VariableDeclaration","scope":5031,"src":"180:10:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5026,"name":"string","nodeType":"ElementaryTypeName","src":"180:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5029,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"207:5:35","nodeType":"VariableDeclaration","scope":5031,"src":"200:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5028,"name":"string","nodeType":"ElementaryTypeName","src":"200:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"105:113:35"},"src":"88:131:35"},{"documentation":{"id":5032,"nodeType":"StructuredDocumentation","src":"225:206:35","text":" Returns the text data associated with an ENS node and key.\n @param node The ENS node to query.\n @param key The text data key to query.\n @return The associated text data."},"functionSelector":"59d1d43c","id":5041,"implemented":false,"kind":"function","modifiers":[],"name":"text","nameLocation":"445:4:35","nodeType":"FunctionDefinition","parameters":{"id":5037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5034,"mutability":"mutable","name":"node","nameLocation":"467:4:35","nodeType":"VariableDeclaration","scope":5041,"src":"459:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5033,"name":"bytes32","nodeType":"ElementaryTypeName","src":"459:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5036,"mutability":"mutable","name":"key","nameLocation":"497:3:35","nodeType":"VariableDeclaration","scope":5041,"src":"481:19:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5035,"name":"string","nodeType":"ElementaryTypeName","src":"481:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"449:57:35"},"returnParameters":{"id":5040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5039,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5041,"src":"530:13:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5038,"name":"string","nodeType":"ElementaryTypeName","src":"530:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"529:15:35"},"scope":5042,"src":"436:109:35","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5043,"src":"58:489:35","usedErrors":[]}],"src":"32:516:35"},"id":35},"contracts/resolvers/profiles/IVersionableResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/IVersionableResolver.sol","exportedSymbols":{"IVersionableResolver":[5058]},"id":5059,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5044,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:36"},{"abstract":false,"baseContracts":[],"canonicalName":"IVersionableResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5058,"linearizedBaseContracts":[5058],"name":"IVersionableResolver","nameLocation":"68:20:36","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"c6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444","id":5050,"name":"VersionChanged","nameLocation":"101:14:36","nodeType":"EventDefinition","parameters":{"id":5049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5046,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"132:4:36","nodeType":"VariableDeclaration","scope":5050,"src":"116:20:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5045,"name":"bytes32","nodeType":"ElementaryTypeName","src":"116:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5048,"indexed":false,"mutability":"mutable","name":"newVersion","nameLocation":"145:10:36","nodeType":"VariableDeclaration","scope":5050,"src":"138:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5047,"name":"uint64","nodeType":"ElementaryTypeName","src":"138:6:36","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"115:41:36"},"src":"95:62:36"},{"functionSelector":"d700ff33","id":5057,"implemented":false,"kind":"function","modifiers":[],"name":"recordVersions","nameLocation":"172:14:36","nodeType":"FunctionDefinition","parameters":{"id":5053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5052,"mutability":"mutable","name":"node","nameLocation":"195:4:36","nodeType":"VariableDeclaration","scope":5057,"src":"187:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5051,"name":"bytes32","nodeType":"ElementaryTypeName","src":"187:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"186:14:36"},"returnParameters":{"id":5056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5057,"src":"224:6:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5054,"name":"uint64","nodeType":"ElementaryTypeName","src":"224:6:36","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"223:8:36"},"scope":5058,"src":"163:69:36","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5059,"src":"58:176:36","usedErrors":[]}],"src":"32:203:36"},"id":36},"contracts/resolvers/profiles/InterfaceResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/InterfaceResolver.sol","exportedSymbols":{"AddrResolver":[4274],"ERC165":[1978],"IAddrResolver":[4870],"IAddressResolver":[4891],"IERC165":[1990],"IInterfaceResolver":[4981],"IVersionableResolver":[5058],"InterfaceResolver":[5254],"ResolverBase":[3927]},"id":5255,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5060,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:37"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":5061,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5255,"sourceUnit":1991,"src":"58:65:37","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/ResolverBase.sol","file":"../ResolverBase.sol","id":5062,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5255,"sourceUnit":3928,"src":"124:29:37","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/AddrResolver.sol","file":"./AddrResolver.sol","id":5063,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5255,"sourceUnit":4275,"src":"154:28:37","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IInterfaceResolver.sol","file":"./IInterfaceResolver.sol","id":5064,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5255,"sourceUnit":4982,"src":"183:34:37","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5065,"name":"IInterfaceResolver","nameLocations":["258:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":4981,"src":"258:18:37"},"id":5066,"nodeType":"InheritanceSpecifier","src":"258:18:37"},{"baseName":{"id":5067,"name":"AddrResolver","nameLocations":["278:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":4274,"src":"278:12:37"},"id":5068,"nodeType":"InheritanceSpecifier","src":"278:12:37"}],"canonicalName":"InterfaceResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":5254,"linearizedBaseContracts":[5254,4274,3927,5058,1978,1990,4891,4870,4981],"name":"InterfaceResolver","nameLocation":"237:17:37","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5076,"mutability":"mutable","name":"versionable_interfaces","nameLocation":"363:22:37","nodeType":"VariableDeclaration","scope":5254,"src":"297:88:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address)))"},"typeName":{"id":5075,"keyType":{"id":5069,"name":"uint64","nodeType":"ElementaryTypeName","src":"305:6:37","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"297:65:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address)))"},"valueType":{"id":5074,"keyType":{"id":5070,"name":"bytes32","nodeType":"ElementaryTypeName","src":"323:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"315:46:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(bytes4 => address))"},"valueType":{"id":5073,"keyType":{"id":5071,"name":"bytes4","nodeType":"ElementaryTypeName","src":"342:6:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"334:26:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_address_$","typeString":"mapping(bytes4 => address)"},"valueType":{"id":5072,"name":"address","nodeType":"ElementaryTypeName","src":"352:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}}}},"visibility":"internal"},{"body":{"id":5107,"nodeType":"Block","src":"910:179:37","statements":[{"expression":{"id":5099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5089,"name":"versionable_interfaces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"920:22:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address)))"}},"id":5095,"indexExpression":{"baseExpression":{"id":5090,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"943:14:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":5092,"indexExpression":{"id":5091,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5079,"src":"958:4:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"943:20:37","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"920:44:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(bytes4 => address))"}},"id":5096,"indexExpression":{"id":5093,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5079,"src":"965:4:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"920:50:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_address_$","typeString":"mapping(bytes4 => address)"}},"id":5097,"indexExpression":{"id":5094,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"984:11:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"920:85:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5098,"name":"implementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5083,"src":"1008:11:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"920:99:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5100,"nodeType":"ExpressionStatement","src":"920:99:37"},{"eventCall":{"arguments":[{"id":5102,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5079,"src":"1051:4:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5103,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"1057:11:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":5104,"name":"implementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5083,"src":"1070:11:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5101,"name":"InterfaceChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"1034:16:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes4_$_t_address_$returns$__$","typeString":"function (bytes32,bytes4,address)"}},"id":5105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1034:48:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5106,"nodeType":"EmitStatement","src":"1029:53:37"}]},"documentation":{"id":5077,"nodeType":"StructuredDocumentation","src":"392:372:37","text":" Sets an interface associated with a name.\n Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\n @param node The node to update.\n @param interfaceID The EIP 165 interface ID.\n @param implementer The address of a contract that implements this interface for this node."},"functionSelector":"e59d895d","id":5108,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5086,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5079,"src":"904:4:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5087,"kind":"modifierInvocation","modifierName":{"id":5085,"name":"authorised","nameLocations":["893:10:37"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"893:10:37"},"nodeType":"ModifierInvocation","src":"893:16:37"}],"name":"setInterface","nameLocation":"778:12:37","nodeType":"FunctionDefinition","parameters":{"id":5084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5079,"mutability":"mutable","name":"node","nameLocation":"808:4:37","nodeType":"VariableDeclaration","scope":5108,"src":"800:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5078,"name":"bytes32","nodeType":"ElementaryTypeName","src":"800:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5081,"mutability":"mutable","name":"interfaceID","nameLocation":"829:11:37","nodeType":"VariableDeclaration","scope":5108,"src":"822:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5080,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":5083,"mutability":"mutable","name":"implementer","nameLocation":"858:11:37","nodeType":"VariableDeclaration","scope":5108,"src":"850:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5082,"name":"address","nodeType":"ElementaryTypeName","src":"850:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"790:85:37"},"returnParameters":{"id":5088,"nodeType":"ParameterList","parameters":[],"src":"910:0:37"},"scope":5254,"src":"769:320:37","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[4980],"body":{"id":5231,"nodeType":"Block","src":"1861:1015:37","statements":[{"assignments":[5120],"declarations":[{"constant":false,"id":5120,"mutability":"mutable","name":"implementer","nameLocation":"1879:11:37","nodeType":"VariableDeclaration","scope":5231,"src":"1871:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5119,"name":"address","nodeType":"ElementaryTypeName","src":"1871:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5130,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5121,"name":"versionable_interfaces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"1893:22:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address)))"}},"id":5125,"indexExpression":{"baseExpression":{"id":5122,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1916:14:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":5124,"indexExpression":{"id":5123,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"1931:4:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1916:20:37","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1893:44:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(bytes4 => address))"}},"id":5127,"indexExpression":{"id":5126,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"1951:4:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1893:72:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_address_$","typeString":"mapping(bytes4 => address)"}},"id":5129,"indexExpression":{"id":5128,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"1966:11:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1893:85:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1871:107:37"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5131,"name":"implementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5120,"src":"1992:11:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2015:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2007:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5132,"name":"address","nodeType":"ElementaryTypeName","src":"2007:7:37","typeDescriptions":{}}},"id":5135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2007:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1992:25:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5140,"nodeType":"IfStatement","src":"1988:74:37","trueBody":{"id":5139,"nodeType":"Block","src":"2019:43:37","statements":[{"expression":{"id":5137,"name":"implementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5120,"src":"2040:11:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5118,"id":5138,"nodeType":"Return","src":"2033:18:37"}]}},{"assignments":[5142],"declarations":[{"constant":false,"id":5142,"mutability":"mutable","name":"a","nameLocation":"2080:1:37","nodeType":"VariableDeclaration","scope":5231,"src":"2072:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5141,"name":"address","nodeType":"ElementaryTypeName","src":"2072:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5146,"initialValue":{"arguments":[{"id":5144,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"2089:4:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5143,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[4149,4213],"referencedDeclaration":4149,"src":"2084:4:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_address_payable_$","typeString":"function (bytes32) view returns (address payable)"}},"id":5145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2084:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"2072:22:37"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5147,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5142,"src":"2108:1:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2113:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5148,"name":"address","nodeType":"ElementaryTypeName","src":"2113:7:37","typeDescriptions":{}}},"id":5151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2113:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2108:15:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5159,"nodeType":"IfStatement","src":"2104:63:37","trueBody":{"id":5158,"nodeType":"Block","src":"2125:42:37","statements":[{"expression":{"arguments":[{"hexValue":"30","id":5155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2154:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5154,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2146:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5153,"name":"address","nodeType":"ElementaryTypeName","src":"2146:7:37","typeDescriptions":{}}},"id":5156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2146:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5118,"id":5157,"nodeType":"Return","src":"2139:17:37"}]}},{"assignments":[5161,5163],"declarations":[{"constant":false,"id":5161,"mutability":"mutable","name":"success","nameLocation":"2183:7:37","nodeType":"VariableDeclaration","scope":5231,"src":"2178:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5160,"name":"bool","nodeType":"ElementaryTypeName","src":"2178:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5163,"mutability":"mutable","name":"returnData","nameLocation":"2205:10:37","nodeType":"VariableDeclaration","scope":5231,"src":"2192:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5162,"name":"bytes","nodeType":"ElementaryTypeName","src":"2192:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5175,"initialValue":{"arguments":[{"arguments":[{"hexValue":"737570706f727473496e746572666163652862797465733429","id":5168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2286:27:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2","typeString":"literal_string \"supportsInterface(bytes4)\""},"value":"supportsInterface(bytes4)"},{"expression":{"arguments":[{"id":5170,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"2336:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1990_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1990_$","typeString":"type(contract IERC165)"}],"id":5169,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2331:4:37","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2331:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1990","typeString":"type(contract IERC165)"}},"id":5172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2345:11:37","memberName":"interfaceId","nodeType":"MemberAccess","src":"2331:25:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2","typeString":"literal_string \"supportsInterface(bytes4)\""},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":5166,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2245:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2249:19:37","memberName":"encodeWithSignature","nodeType":"MemberAccess","src":"2245:23:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (string memory) pure returns (bytes memory)"}},"id":5173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2245:125:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5164,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5142,"src":"2219:1:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2221:10:37","memberName":"staticcall","nodeType":"MemberAccess","src":"2219:12:37","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":5174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2219:161:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2177:203:37"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2394:8:37","subExpression":{"id":5176,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"2395:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5178,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5163,"src":"2406:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2417:6:37","memberName":"length","nodeType":"MemberAccess","src":"2406:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":5180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2426:2:37","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2406:22:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2394:34:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5183,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5163,"src":"2432:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5185,"indexExpression":{"hexValue":"3331","id":5184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2443:2:37","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2432:14:37","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2450:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2432:19:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2394:57:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5195,"nodeType":"IfStatement","src":"2390:152:37","trueBody":{"id":5194,"nodeType":"Block","src":"2453:89:37","statements":[{"expression":{"arguments":[{"hexValue":"30","id":5191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2529:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2521:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5189,"name":"address","nodeType":"ElementaryTypeName","src":"2521:7:37","typeDescriptions":{}}},"id":5192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2521:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5118,"id":5193,"nodeType":"Return","src":"2514:17:37"}]}},{"expression":{"id":5207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":5196,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"2553:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5197,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5163,"src":"2562:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":5198,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"2552:21:37","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"hexValue":"737570706f727473496e746572666163652862797465733429","id":5203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:27:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2","typeString":"literal_string \"supportsInterface(bytes4)\""},"value":"supportsInterface(bytes4)"},{"id":5204,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"2655:11:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2","typeString":"literal_string \"supportsInterface(bytes4)\""},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":5201,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2602:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2606:19:37","memberName":"encodeWithSignature","nodeType":"MemberAccess","src":"2602:23:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (string memory) pure returns (bytes memory)"}},"id":5205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2602:65:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5199,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5142,"src":"2576:1:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2578:10:37","memberName":"staticcall","nodeType":"MemberAccess","src":"2576:12:37","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":5206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2576:101:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"src":"2552:125:37","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5208,"nodeType":"ExpressionStatement","src":"2552:125:37"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2691:8:37","subExpression":{"id":5209,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"2692:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5211,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5163,"src":"2703:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2714:6:37","memberName":"length","nodeType":"MemberAccess","src":"2703:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":5213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2723:2:37","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2703:22:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2691:34:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5216,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5163,"src":"2729:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5218,"indexExpression":{"hexValue":"3331","id":5217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2740:2:37","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2729:14:37","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2747:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2729:19:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2691:57:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5228,"nodeType":"IfStatement","src":"2687:164:37","trueBody":{"id":5227,"nodeType":"Block","src":"2750:101:37","statements":[{"expression":{"arguments":[{"hexValue":"30","id":5224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2838:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5223,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2830:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5222,"name":"address","nodeType":"ElementaryTypeName","src":"2830:7:37","typeDescriptions":{}}},"id":5225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2830:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5118,"id":5226,"nodeType":"Return","src":"2823:17:37"}]}},{"expression":{"id":5229,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5142,"src":"2868:1:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5118,"id":5230,"nodeType":"Return","src":"2861:8:37"}]},"documentation":{"id":5109,"nodeType":"StructuredDocumentation","src":"1095:626:37","text":" Returns the address of a contract that implements the specified interface for this name.\n If an implementer has not been set for this interfaceID and name, the resolver will query\n the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\n contract implements EIP165 and returns `true` for the specified interfaceID, its address\n will be returned.\n @param node The ENS node to query.\n @param interfaceID The EIP 165 interface ID to check for.\n @return The address that implements this interface, or 0 if the interface is unsupported."},"functionSelector":"124a319c","id":5232,"implemented":true,"kind":"function","modifiers":[],"name":"interfaceImplementer","nameLocation":"1735:20:37","nodeType":"FunctionDefinition","overrides":{"id":5115,"nodeType":"OverrideSpecifier","overrides":[],"src":"1834:8:37"},"parameters":{"id":5114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5111,"mutability":"mutable","name":"node","nameLocation":"1773:4:37","nodeType":"VariableDeclaration","scope":5232,"src":"1765:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5110,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1765:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5113,"mutability":"mutable","name":"interfaceID","nameLocation":"1794:11:37","nodeType":"VariableDeclaration","scope":5232,"src":"1787:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5112,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1787:6:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1755:56:37"},"returnParameters":{"id":5118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5232,"src":"1852:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5116,"name":"address","nodeType":"ElementaryTypeName","src":"1852:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1851:9:37"},"scope":5254,"src":"1726:1150:37","stateMutability":"view","virtual":true,"visibility":"external"},{"baseFunctions":[4241],"body":{"id":5252,"nodeType":"Block","src":"2987:139:37","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5240,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"3016:11:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":5242,"name":"IInterfaceResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4981,"src":"3036:18:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IInterfaceResolver_$4981_$","typeString":"type(contract IInterfaceResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IInterfaceResolver_$4981_$","typeString":"type(contract IInterfaceResolver)"}],"id":5241,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3031:4:37","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3031:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IInterfaceResolver_$4981","typeString":"type(contract IInterfaceResolver)"}},"id":5244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3056:11:37","memberName":"interfaceId","nodeType":"MemberAccess","src":"3031:36:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3016:51:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5248,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"3107:11:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":5246,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3083:5:37","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_InterfaceResolver_$5254_$","typeString":"type(contract super InterfaceResolver)"}},"id":5247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3089:17:37","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":4241,"src":"3083:23:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":5249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3083:36:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3016:103:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5239,"id":5251,"nodeType":"Return","src":"2997:122:37"}]},"functionSelector":"01ffc9a7","id":5253,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2891:17:37","nodeType":"FunctionDefinition","overrides":{"id":5236,"nodeType":"OverrideSpecifier","overrides":[],"src":"2963:8:37"},"parameters":{"id":5235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5234,"mutability":"mutable","name":"interfaceID","nameLocation":"2925:11:37","nodeType":"VariableDeclaration","scope":5253,"src":"2918:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5233,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2918:6:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2908:34:37"},"returnParameters":{"id":5239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5238,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5253,"src":"2981:4:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5237,"name":"bool","nodeType":"ElementaryTypeName","src":"2981:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2980:6:37"},"scope":5254,"src":"2882:244:37","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":5255,"src":"219:2909:37","usedErrors":[]}],"src":"32:3097:37"},"id":37},"contracts/resolvers/profiles/NameResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/NameResolver.sol","exportedSymbols":{"ERC165":[1978],"IERC165":[1990],"INameResolver":[4998],"IVersionableResolver":[5058],"NameResolver":[5335],"ResolverBase":[3927]},"id":5336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5256,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:38"},{"absolutePath":"contracts/resolvers/ResolverBase.sol","file":"../ResolverBase.sol","id":5257,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5336,"sourceUnit":3928,"src":"58:29:38","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/INameResolver.sol","file":"./INameResolver.sol","id":5258,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5336,"sourceUnit":4999,"src":"88:29:38","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5259,"name":"INameResolver","nameLocations":["153:13:38"],"nodeType":"IdentifierPath","referencedDeclaration":4998,"src":"153:13:38"},"id":5260,"nodeType":"InheritanceSpecifier","src":"153:13:38"},{"baseName":{"id":5261,"name":"ResolverBase","nameLocations":["168:12:38"],"nodeType":"IdentifierPath","referencedDeclaration":3927,"src":"168:12:38"},"id":5262,"nodeType":"InheritanceSpecifier","src":"168:12:38"}],"canonicalName":"NameResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":5335,"linearizedBaseContracts":[5335,3927,5058,1978,1990,4998],"name":"NameResolver","nameLocation":"137:12:38","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5268,"mutability":"mutable","name":"versionable_names","nameLocation":"233:17:38","nodeType":"VariableDeclaration","scope":5335,"src":"187:63:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_string_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => string))"},"typeName":{"id":5267,"keyType":{"id":5263,"name":"uint64","nodeType":"ElementaryTypeName","src":"195:6:38","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"187:45:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_string_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => string))"},"valueType":{"id":5266,"keyType":{"id":5264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"213:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"205:26:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_string_storage_$","typeString":"mapping(bytes32 => string)"},"valueType":{"id":5265,"name":"string","nodeType":"ElementaryTypeName","src":"224:6:38","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}}},"visibility":"internal"},{"body":{"id":5294,"nodeType":"Block","src":"568:113:38","statements":[{"expression":{"id":5287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5279,"name":"versionable_names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"578:17:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_string_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => string storage ref))"}},"id":5284,"indexExpression":{"baseExpression":{"id":5280,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"596:14:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":5282,"indexExpression":{"id":5281,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"611:4:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"596:20:38","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"578:39:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_string_storage_$","typeString":"mapping(bytes32 => string storage ref)"}},"id":5285,"indexExpression":{"id":5283,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"618:4:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"578:45:38","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5286,"name":"newName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5273,"src":"626:7:38","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"578:55:38","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5288,"nodeType":"ExpressionStatement","src":"578:55:38"},{"eventCall":{"arguments":[{"id":5290,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"660:4:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5291,"name":"newName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5273,"src":"666:7:38","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":5289,"name":"NameChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4989,"src":"648:11:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes32,string memory)"}},"id":5292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"648:26:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5293,"nodeType":"EmitStatement","src":"643:31:38"}]},"documentation":{"id":5269,"nodeType":"StructuredDocumentation","src":"257:194:38","text":" Sets the name associated with an ENS node, for reverse records.\n May only be called by the owner of that node in the ENS registry.\n @param node The node to update."},"functionSelector":"77372213","id":5295,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5276,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"562:4:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5277,"kind":"modifierInvocation","modifierName":{"id":5275,"name":"authorised","nameLocations":["551:10:38"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"551:10:38"},"nodeType":"ModifierInvocation","src":"551:16:38"}],"name":"setName","nameLocation":"465:7:38","nodeType":"FunctionDefinition","parameters":{"id":5274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5271,"mutability":"mutable","name":"node","nameLocation":"490:4:38","nodeType":"VariableDeclaration","scope":5295,"src":"482:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"482:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5273,"mutability":"mutable","name":"newName","nameLocation":"520:7:38","nodeType":"VariableDeclaration","scope":5295,"src":"504:23:38","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5272,"name":"string","nodeType":"ElementaryTypeName","src":"504:6:38","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:61:38"},"returnParameters":{"id":5278,"nodeType":"ParameterList","parameters":[],"src":"568:0:38"},"scope":5335,"src":"456:225:38","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[4997],"body":{"id":5312,"nodeType":"Block","src":"978:69:38","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":5304,"name":"versionable_names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"995:17:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_string_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => string storage ref))"}},"id":5308,"indexExpression":{"baseExpression":{"id":5305,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1013:14:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":5307,"indexExpression":{"id":5306,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5298,"src":"1028:4:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1013:20:38","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"995:39:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_string_storage_$","typeString":"mapping(bytes32 => string storage ref)"}},"id":5310,"indexExpression":{"id":5309,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5298,"src":"1035:4:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"995:45:38","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":5303,"id":5311,"nodeType":"Return","src":"988:52:38"}]},"documentation":{"id":5296,"nodeType":"StructuredDocumentation","src":"687:189:38","text":" Returns the name associated with an ENS node, for reverse records.\n Defined in EIP181.\n @param node The ENS node to query.\n @return The associated name."},"functionSelector":"691f3431","id":5313,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"890:4:38","nodeType":"FunctionDefinition","overrides":{"id":5300,"nodeType":"OverrideSpecifier","overrides":[],"src":"945:8:38"},"parameters":{"id":5299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5298,"mutability":"mutable","name":"node","nameLocation":"912:4:38","nodeType":"VariableDeclaration","scope":5313,"src":"904:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"904:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"894:28:38"},"returnParameters":{"id":5303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5302,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5313,"src":"963:13:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5301,"name":"string","nodeType":"ElementaryTypeName","src":"963:6:38","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"962:15:38"},"scope":5335,"src":"881:166:38","stateMutability":"view","virtual":true,"visibility":"external"},{"baseFunctions":[3926],"body":{"id":5333,"nodeType":"Block","src":"1158:134:38","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5321,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"1187:11:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":5323,"name":"INameResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4998,"src":"1207:13:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_INameResolver_$4998_$","typeString":"type(contract INameResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_INameResolver_$4998_$","typeString":"type(contract INameResolver)"}],"id":5322,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1202:4:38","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1202:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_INameResolver_$4998","typeString":"type(contract INameResolver)"}},"id":5325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1222:11:38","memberName":"interfaceId","nodeType":"MemberAccess","src":"1202:31:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1187:46:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5329,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"1273:11:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":5327,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1249:5:38","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_NameResolver_$5335_$","typeString":"type(contract super NameResolver)"}},"id":5328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1255:17:38","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3926,"src":"1249:23:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":5330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1249:36:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1187:98:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5320,"id":5332,"nodeType":"Return","src":"1168:117:38"}]},"functionSelector":"01ffc9a7","id":5334,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1062:17:38","nodeType":"FunctionDefinition","overrides":{"id":5317,"nodeType":"OverrideSpecifier","overrides":[],"src":"1134:8:38"},"parameters":{"id":5316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5315,"mutability":"mutable","name":"interfaceID","nameLocation":"1096:11:38","nodeType":"VariableDeclaration","scope":5334,"src":"1089:18:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5314,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1089:6:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1079:34:38"},"returnParameters":{"id":5320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5319,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5334,"src":"1152:4:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5318,"name":"bool","nodeType":"ElementaryTypeName","src":"1152:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1151:6:38"},"scope":5335,"src":"1053:239:38","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":5336,"src":"119:1175:38","usedErrors":[]}],"src":"32:1263:38"},"id":38},"contracts/resolvers/profiles/PubkeyResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/PubkeyResolver.sol","exportedSymbols":{"ERC165":[1978],"IERC165":[1990],"IPubkeyResolver":[5019],"IVersionableResolver":[5058],"PubkeyResolver":[5442],"ResolverBase":[3927]},"id":5443,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5337,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:39"},{"absolutePath":"contracts/resolvers/ResolverBase.sol","file":"../ResolverBase.sol","id":5338,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5443,"sourceUnit":3928,"src":"58:29:39","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/IPubkeyResolver.sol","file":"./IPubkeyResolver.sol","id":5339,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5443,"sourceUnit":5020,"src":"88:31:39","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5340,"name":"IPubkeyResolver","nameLocations":["157:15:39"],"nodeType":"IdentifierPath","referencedDeclaration":5019,"src":"157:15:39"},"id":5341,"nodeType":"InheritanceSpecifier","src":"157:15:39"},{"baseName":{"id":5342,"name":"ResolverBase","nameLocations":["174:12:39"],"nodeType":"IdentifierPath","referencedDeclaration":3927,"src":"174:12:39"},"id":5343,"nodeType":"InheritanceSpecifier","src":"174:12:39"}],"canonicalName":"PubkeyResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":5442,"linearizedBaseContracts":[5442,3927,5058,1978,1990,5019],"name":"PubkeyResolver","nameLocation":"139:14:39","nodeType":"ContractDefinition","nodes":[{"canonicalName":"PubkeyResolver.PublicKey","id":5348,"members":[{"constant":false,"id":5345,"mutability":"mutable","name":"x","nameLocation":"228:1:39","nodeType":"VariableDeclaration","scope":5348,"src":"220:9:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"220:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5347,"mutability":"mutable","name":"y","nameLocation":"247:1:39","nodeType":"VariableDeclaration","scope":5348,"src":"239:9:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5346,"name":"bytes32","nodeType":"ElementaryTypeName","src":"239:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"PublicKey","nameLocation":"200:9:39","nodeType":"StructDefinition","scope":5442,"src":"193:62:39","visibility":"public"},{"constant":false,"id":5355,"mutability":"mutable","name":"versionable_pubkeys","nameLocation":"310:19:39","nodeType":"VariableDeclaration","scope":5442,"src":"261:68:39","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_struct$_PublicKey_$5348_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => struct PubkeyResolver.PublicKey))"},"typeName":{"id":5354,"keyType":{"id":5349,"name":"uint64","nodeType":"ElementaryTypeName","src":"269:6:39","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"261:48:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_struct$_PublicKey_$5348_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => struct PubkeyResolver.PublicKey))"},"valueType":{"id":5353,"keyType":{"id":5350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"287:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"279:29:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_PublicKey_$5348_storage_$","typeString":"mapping(bytes32 => struct PubkeyResolver.PublicKey)"},"valueType":{"id":5352,"nodeType":"UserDefinedTypeName","pathNode":{"id":5351,"name":"PublicKey","nameLocations":["298:9:39"],"nodeType":"IdentifierPath","referencedDeclaration":5348,"src":"298:9:39"},"referencedDeclaration":5348,"src":"298:9:39","typeDescriptions":{"typeIdentifier":"t_struct$_PublicKey_$5348_storage_ptr","typeString":"struct PubkeyResolver.PublicKey"}}}},"visibility":"internal"},{"body":{"id":5387,"nodeType":"Block","src":"722:122:39","statements":[{"expression":{"id":5379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5368,"name":"versionable_pubkeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5355,"src":"732:19:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_struct$_PublicKey_$5348_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => struct PubkeyResolver.PublicKey storage ref))"}},"id":5373,"indexExpression":{"baseExpression":{"id":5369,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"752:14:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":5371,"indexExpression":{"id":5370,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5358,"src":"767:4:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"752:20:39","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"732:41:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_PublicKey_$5348_storage_$","typeString":"mapping(bytes32 => struct PubkeyResolver.PublicKey storage ref)"}},"id":5374,"indexExpression":{"id":5372,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5358,"src":"774:4:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"732:47:39","typeDescriptions":{"typeIdentifier":"t_struct$_PublicKey_$5348_storage","typeString":"struct PubkeyResolver.PublicKey storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5376,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5360,"src":"792:1:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5377,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5362,"src":"795:1:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5375,"name":"PublicKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"782:9:39","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PublicKey_$5348_storage_ptr_$","typeString":"type(struct PubkeyResolver.PublicKey storage pointer)"}},"id":5378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:15:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PublicKey_$5348_memory_ptr","typeString":"struct PubkeyResolver.PublicKey memory"}},"src":"732:65:39","typeDescriptions":{"typeIdentifier":"t_struct$_PublicKey_$5348_storage","typeString":"struct PubkeyResolver.PublicKey storage ref"}},"id":5380,"nodeType":"ExpressionStatement","src":"732:65:39"},{"eventCall":{"arguments":[{"id":5382,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5358,"src":"826:4:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5383,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5360,"src":"832:1:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5384,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5362,"src":"835:1:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5381,"name":"PubkeyChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5008,"src":"812:13:39","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":5385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"812:25:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5386,"nodeType":"EmitStatement","src":"807:30:39"}]},"documentation":{"id":5356,"nodeType":"StructuredDocumentation","src":"336:262:39","text":" Sets the SECP256k1 public key associated with an ENS node.\n @param node The ENS node to query\n @param x the X coordinate of the curve point for the public key.\n @param y the Y coordinate of the curve point for the public key."},"functionSelector":"29cd62ea","id":5388,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5365,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5358,"src":"716:4:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5366,"kind":"modifierInvocation","modifierName":{"id":5364,"name":"authorised","nameLocations":["705:10:39"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"705:10:39"},"nodeType":"ModifierInvocation","src":"705:16:39"}],"name":"setPubkey","nameLocation":"612:9:39","nodeType":"FunctionDefinition","parameters":{"id":5363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5358,"mutability":"mutable","name":"node","nameLocation":"639:4:39","nodeType":"VariableDeclaration","scope":5388,"src":"631:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"631:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5360,"mutability":"mutable","name":"x","nameLocation":"661:1:39","nodeType":"VariableDeclaration","scope":5388,"src":"653:9:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"653:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5362,"mutability":"mutable","name":"y","nameLocation":"680:1:39","nodeType":"VariableDeclaration","scope":5388,"src":"672:9:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"672:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"621:66:39"},"returnParameters":{"id":5367,"nodeType":"ParameterList","parameters":[],"src":"722:0:39"},"scope":5442,"src":"603:241:39","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[5018],"body":{"id":5419,"nodeType":"Block","src":"1255:220:39","statements":[{"assignments":[5400],"declarations":[{"constant":false,"id":5400,"mutability":"mutable","name":"currentRecordVersion","nameLocation":"1272:20:39","nodeType":"VariableDeclaration","scope":5419,"src":"1265:27:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5399,"name":"uint64","nodeType":"ElementaryTypeName","src":"1265:6:39","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":5404,"initialValue":{"baseExpression":{"id":5401,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1295:14:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":5403,"indexExpression":{"id":5402,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"1310:4:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1295:20:39","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"1265:50:39"},{"expression":{"components":[{"expression":{"baseExpression":{"baseExpression":{"id":5405,"name":"versionable_pubkeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5355,"src":"1346:19:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_struct$_PublicKey_$5348_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => struct PubkeyResolver.PublicKey storage ref))"}},"id":5407,"indexExpression":{"id":5406,"name":"currentRecordVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"1366:20:39","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1346:41:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_PublicKey_$5348_storage_$","typeString":"mapping(bytes32 => struct PubkeyResolver.PublicKey storage ref)"}},"id":5409,"indexExpression":{"id":5408,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"1388:4:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1346:47:39","typeDescriptions":{"typeIdentifier":"t_struct$_PublicKey_$5348_storage","typeString":"struct PubkeyResolver.PublicKey storage ref"}},"id":5410,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1394:1:39","memberName":"x","nodeType":"MemberAccess","referencedDeclaration":5345,"src":"1346:49:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"baseExpression":{"baseExpression":{"id":5411,"name":"versionable_pubkeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5355,"src":"1409:19:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_struct$_PublicKey_$5348_storage_$_$","typeString":"mapping(uint64 => mapping(bytes32 => struct PubkeyResolver.PublicKey storage ref))"}},"id":5413,"indexExpression":{"id":5412,"name":"currentRecordVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"1429:20:39","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1409:41:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_PublicKey_$5348_storage_$","typeString":"mapping(bytes32 => struct PubkeyResolver.PublicKey storage ref)"}},"id":5415,"indexExpression":{"id":5414,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"1451:4:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1409:47:39","typeDescriptions":{"typeIdentifier":"t_struct$_PublicKey_$5348_storage","typeString":"struct PubkeyResolver.PublicKey storage ref"}},"id":5416,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1457:1:39","memberName":"y","nodeType":"MemberAccess","referencedDeclaration":5347,"src":"1409:49:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5417,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1332:136:39","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"functionReturnParameters":5398,"id":5418,"nodeType":"Return","src":"1325:143:39"}]},"documentation":{"id":5389,"nodeType":"StructuredDocumentation","src":"850:294:39","text":" Returns the SECP256k1 public key associated with an ENS node.\n Defined in EIP 619.\n @param node The ENS node to query\n @return x The X coordinate of the curve point for the public key.\n @return y The Y coordinate of the curve point for the public key."},"functionSelector":"c8690233","id":5420,"implemented":true,"kind":"function","modifiers":[],"name":"pubkey","nameLocation":"1158:6:39","nodeType":"FunctionDefinition","overrides":{"id":5393,"nodeType":"OverrideSpecifier","overrides":[],"src":"1215:8:39"},"parameters":{"id":5392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5391,"mutability":"mutable","name":"node","nameLocation":"1182:4:39","nodeType":"VariableDeclaration","scope":5420,"src":"1174:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5390,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1174:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1164:28:39"},"returnParameters":{"id":5398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5395,"mutability":"mutable","name":"x","nameLocation":"1241:1:39","nodeType":"VariableDeclaration","scope":5420,"src":"1233:9:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5394,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1233:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5397,"mutability":"mutable","name":"y","nameLocation":"1252:1:39","nodeType":"VariableDeclaration","scope":5420,"src":"1244:9:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1244:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1232:22:39"},"scope":5442,"src":"1149:326:39","stateMutability":"view","virtual":true,"visibility":"external"},{"baseFunctions":[3926],"body":{"id":5440,"nodeType":"Block","src":"1586:136:39","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5428,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5422,"src":"1615:11:39","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":5430,"name":"IPubkeyResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"1635:15:39","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPubkeyResolver_$5019_$","typeString":"type(contract IPubkeyResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IPubkeyResolver_$5019_$","typeString":"type(contract IPubkeyResolver)"}],"id":5429,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1630:4:39","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1630:21:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IPubkeyResolver_$5019","typeString":"type(contract IPubkeyResolver)"}},"id":5432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1652:11:39","memberName":"interfaceId","nodeType":"MemberAccess","src":"1630:33:39","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1615:48:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5436,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5422,"src":"1703:11:39","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":5434,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1679:5:39","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PubkeyResolver_$5442_$","typeString":"type(contract super PubkeyResolver)"}},"id":5435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1685:17:39","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3926,"src":"1679:23:39","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:36:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1615:100:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5427,"id":5439,"nodeType":"Return","src":"1596:119:39"}]},"functionSelector":"01ffc9a7","id":5441,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1490:17:39","nodeType":"FunctionDefinition","overrides":{"id":5424,"nodeType":"OverrideSpecifier","overrides":[],"src":"1562:8:39"},"parameters":{"id":5423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5422,"mutability":"mutable","name":"interfaceID","nameLocation":"1524:11:39","nodeType":"VariableDeclaration","scope":5441,"src":"1517:18:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5421,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1517:6:39","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1507:34:39"},"returnParameters":{"id":5427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5441,"src":"1580:4:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5425,"name":"bool","nodeType":"ElementaryTypeName","src":"1580:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1579:6:39"},"scope":5442,"src":"1481:241:39","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":5443,"src":"121:1603:39","usedErrors":[]}],"src":"32:1693:39"},"id":39},"contracts/resolvers/profiles/TextResolver.sol":{"ast":{"absolutePath":"contracts/resolvers/profiles/TextResolver.sol","exportedSymbols":{"ERC165":[1978],"IERC165":[1990],"ITextResolver":[5042],"IVersionableResolver":[5058],"ResolverBase":[3927],"TextResolver":[5535]},"id":5536,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5444,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"32:24:40"},{"absolutePath":"contracts/resolvers/ResolverBase.sol","file":"../ResolverBase.sol","id":5445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5536,"sourceUnit":3928,"src":"58:29:40","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/resolvers/profiles/ITextResolver.sol","file":"./ITextResolver.sol","id":5446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5536,"sourceUnit":5043,"src":"88:29:40","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5447,"name":"ITextResolver","nameLocations":["153:13:40"],"nodeType":"IdentifierPath","referencedDeclaration":5042,"src":"153:13:40"},"id":5448,"nodeType":"InheritanceSpecifier","src":"153:13:40"},{"baseName":{"id":5449,"name":"ResolverBase","nameLocations":["168:12:40"],"nodeType":"IdentifierPath","referencedDeclaration":3927,"src":"168:12:40"},"id":5450,"nodeType":"InheritanceSpecifier","src":"168:12:40"}],"canonicalName":"TextResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":5535,"linearizedBaseContracts":[5535,3927,5058,1978,1990,5042],"name":"TextResolver","nameLocation":"137:12:40","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5458,"mutability":"mutable","name":"versionable_texts","nameLocation":"252:17:40","nodeType":"VariableDeclaration","scope":5535,"src":"187:82:40","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_ptr_$_t_string_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(string => string)))"},"typeName":{"id":5457,"keyType":{"id":5451,"name":"uint64","nodeType":"ElementaryTypeName","src":"195:6:40","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"187:64:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_ptr_$_t_string_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(string => string)))"},"valueType":{"id":5456,"keyType":{"id":5452,"name":"bytes32","nodeType":"ElementaryTypeName","src":"213:7:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"205:45:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_ptr_$_t_string_storage_$_$","typeString":"mapping(bytes32 => mapping(string => string))"},"valueType":{"id":5455,"keyType":{"id":5453,"name":"string","nodeType":"ElementaryTypeName","src":"232:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"224:25:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_string_storage_$","typeString":"mapping(string => string)"},"valueType":{"id":5454,"name":"string","nodeType":"ElementaryTypeName","src":"242:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}}}},"visibility":"internal"},{"body":{"id":5490,"nodeType":"Block","src":"688:124:40","statements":[{"expression":{"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5471,"name":"versionable_texts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"698:17:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_ptr_$_t_string_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(string memory => string storage ref)))"}},"id":5477,"indexExpression":{"baseExpression":{"id":5472,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"716:14:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":5474,"indexExpression":{"id":5473,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"731:4:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"716:20:40","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"698:39:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_ptr_$_t_string_storage_$_$","typeString":"mapping(bytes32 => mapping(string memory => string storage ref))"}},"id":5478,"indexExpression":{"id":5475,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"738:4:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"698:45:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_string_storage_$","typeString":"mapping(string memory => string storage ref)"}},"id":5479,"indexExpression":{"id":5476,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"744:3:40","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"698:50:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5465,"src":"751:5:40","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"698:58:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5482,"nodeType":"ExpressionStatement","src":"698:58:40"},{"eventCall":{"arguments":[{"id":5484,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"783:4:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5485,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"789:3:40","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":5486,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"794:3:40","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":5487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5465,"src":"799:5:40","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":5483,"name":"TextChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5031,"src":"771:11:40","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes32,string memory,string memory,string memory)"}},"id":5488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"771:34:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5489,"nodeType":"EmitStatement","src":"766:39:40"}]},"documentation":{"id":5459,"nodeType":"StructuredDocumentation","src":"276:268:40","text":" Sets the text data associated with an ENS node and key.\n May only be called by the owner of that node in the ENS registry.\n @param node The node to update.\n @param key The key to set.\n @param value The text data value to set."},"functionSelector":"10f13a8c","id":5491,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5468,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"682:4:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5469,"kind":"modifierInvocation","modifierName":{"id":5467,"name":"authorised","nameLocations":["671:10:40"],"nodeType":"IdentifierPath","referencedDeclaration":3883,"src":"671:10:40"},"nodeType":"ModifierInvocation","src":"671:16:40"}],"name":"setText","nameLocation":"558:7:40","nodeType":"FunctionDefinition","parameters":{"id":5466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5461,"mutability":"mutable","name":"node","nameLocation":"583:4:40","nodeType":"VariableDeclaration","scope":5491,"src":"575:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"575:7:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5463,"mutability":"mutable","name":"key","nameLocation":"613:3:40","nodeType":"VariableDeclaration","scope":5491,"src":"597:19:40","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5462,"name":"string","nodeType":"ElementaryTypeName","src":"597:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5465,"mutability":"mutable","name":"value","nameLocation":"642:5:40","nodeType":"VariableDeclaration","scope":5491,"src":"626:21:40","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5464,"name":"string","nodeType":"ElementaryTypeName","src":"626:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"565:88:40"},"returnParameters":{"id":5470,"nodeType":"ParameterList","parameters":[],"src":"688:0:40"},"scope":5535,"src":"549:263:40","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[5041],"body":{"id":5512,"nodeType":"Block","src":"1155:74:40","statements":[{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5502,"name":"versionable_texts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"1172:17:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_ptr_$_t_string_storage_$_$_$","typeString":"mapping(uint64 => mapping(bytes32 => mapping(string memory => string storage ref)))"}},"id":5506,"indexExpression":{"baseExpression":{"id":5503,"name":"recordVersions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1190:14:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint64_$","typeString":"mapping(bytes32 => uint64)"}},"id":5505,"indexExpression":{"id":5504,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"1205:4:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1190:20:40","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1172:39:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_ptr_$_t_string_storage_$_$","typeString":"mapping(bytes32 => mapping(string memory => string storage ref))"}},"id":5508,"indexExpression":{"id":5507,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"1212:4:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1172:45:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_string_storage_$","typeString":"mapping(string memory => string storage ref)"}},"id":5510,"indexExpression":{"id":5509,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5496,"src":"1218:3:40","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1172:50:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":5501,"id":5511,"nodeType":"Return","src":"1165:57:40"}]},"documentation":{"id":5492,"nodeType":"StructuredDocumentation","src":"818:206:40","text":" Returns the text data associated with an ENS node and key.\n @param node The ENS node to query.\n @param key The text data key to query.\n @return The associated text data."},"functionSelector":"59d1d43c","id":5513,"implemented":true,"kind":"function","modifiers":[],"name":"text","nameLocation":"1038:4:40","nodeType":"FunctionDefinition","overrides":{"id":5498,"nodeType":"OverrideSpecifier","overrides":[],"src":"1122:8:40"},"parameters":{"id":5497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5494,"mutability":"mutable","name":"node","nameLocation":"1060:4:40","nodeType":"VariableDeclaration","scope":5513,"src":"1052:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5493,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1052:7:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5496,"mutability":"mutable","name":"key","nameLocation":"1090:3:40","nodeType":"VariableDeclaration","scope":5513,"src":"1074:19:40","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5495,"name":"string","nodeType":"ElementaryTypeName","src":"1074:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1042:57:40"},"returnParameters":{"id":5501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5513,"src":"1140:13:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5499,"name":"string","nodeType":"ElementaryTypeName","src":"1140:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1139:15:40"},"scope":5535,"src":"1029:200:40","stateMutability":"view","virtual":true,"visibility":"external"},{"baseFunctions":[3926],"body":{"id":5533,"nodeType":"Block","src":"1340:134:40","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5521,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5515,"src":"1369:11:40","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":5523,"name":"ITextResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5042,"src":"1389:13:40","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITextResolver_$5042_$","typeString":"type(contract ITextResolver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ITextResolver_$5042_$","typeString":"type(contract ITextResolver)"}],"id":5522,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1384:4:40","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1384:19:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ITextResolver_$5042","typeString":"type(contract ITextResolver)"}},"id":5525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1404:11:40","memberName":"interfaceId","nodeType":"MemberAccess","src":"1384:31:40","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1369:46:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5529,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5515,"src":"1455:11:40","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":5527,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1431:5:40","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_TextResolver_$5535_$","typeString":"type(contract super TextResolver)"}},"id":5528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1437:17:40","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3926,"src":"1431:23:40","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":5530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1431:36:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1369:98:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5520,"id":5532,"nodeType":"Return","src":"1350:117:40"}]},"functionSelector":"01ffc9a7","id":5534,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1244:17:40","nodeType":"FunctionDefinition","overrides":{"id":5517,"nodeType":"OverrideSpecifier","overrides":[],"src":"1316:8:40"},"parameters":{"id":5516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5515,"mutability":"mutable","name":"interfaceID","nameLocation":"1278:11:40","nodeType":"VariableDeclaration","scope":5534,"src":"1271:18:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5514,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1271:6:40","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1261:34:40"},"returnParameters":{"id":5520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5534,"src":"1334:4:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5518,"name":"bool","nodeType":"ElementaryTypeName","src":"1334:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1333:6:40"},"scope":5535,"src":"1235:239:40","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":5536,"src":"119:1357:40","usedErrors":[]}],"src":"32:1445:40"},"id":40},"contracts/reverseRegistrar/IReverseRegistrar.sol":{"ast":{"absolutePath":"contracts/reverseRegistrar/IReverseRegistrar.sol","exportedSymbols":{"IReverseRegistrar":[5597]},"id":5598,"nodeType":"SourceUnit","nodes":[{"id":5537,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"0:24:41"},{"abstract":false,"baseContracts":[],"canonicalName":"IReverseRegistrar","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5597,"linearizedBaseContracts":[5597],"name":"IReverseRegistrar","nameLocation":"36:17:41","nodeType":"ContractDefinition","nodes":[{"functionSelector":"c66485b2","id":5542,"implemented":false,"kind":"function","modifiers":[],"name":"setDefaultResolver","nameLocation":"69:18:41","nodeType":"FunctionDefinition","parameters":{"id":5540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5539,"mutability":"mutable","name":"resolver","nameLocation":"96:8:41","nodeType":"VariableDeclaration","scope":5542,"src":"88:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5538,"name":"address","nodeType":"ElementaryTypeName","src":"88:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"87:18:41"},"returnParameters":{"id":5541,"nodeType":"ParameterList","parameters":[],"src":"114:0:41"},"scope":5597,"src":"60:55:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1e83409a","id":5549,"implemented":false,"kind":"function","modifiers":[],"name":"claim","nameLocation":"130:5:41","nodeType":"FunctionDefinition","parameters":{"id":5545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5544,"mutability":"mutable","name":"owner","nameLocation":"144:5:41","nodeType":"VariableDeclaration","scope":5549,"src":"136:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5543,"name":"address","nodeType":"ElementaryTypeName","src":"136:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"135:15:41"},"returnParameters":{"id":5548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5549,"src":"169:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5546,"name":"bytes32","nodeType":"ElementaryTypeName","src":"169:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"168:9:41"},"scope":5597,"src":"121:57:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"65669631","id":5560,"implemented":false,"kind":"function","modifiers":[],"name":"claimForAddr","nameLocation":"193:12:41","nodeType":"FunctionDefinition","parameters":{"id":5556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5551,"mutability":"mutable","name":"addr","nameLocation":"223:4:41","nodeType":"VariableDeclaration","scope":5560,"src":"215:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5550,"name":"address","nodeType":"ElementaryTypeName","src":"215:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5553,"mutability":"mutable","name":"owner","nameLocation":"245:5:41","nodeType":"VariableDeclaration","scope":5560,"src":"237:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5552,"name":"address","nodeType":"ElementaryTypeName","src":"237:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5555,"mutability":"mutable","name":"resolver","nameLocation":"268:8:41","nodeType":"VariableDeclaration","scope":5560,"src":"260:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5554,"name":"address","nodeType":"ElementaryTypeName","src":"260:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"205:77:41"},"returnParameters":{"id":5559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5560,"src":"301:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5557,"name":"bytes32","nodeType":"ElementaryTypeName","src":"301:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"300:9:41"},"scope":5597,"src":"184:126:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"0f5a5466","id":5569,"implemented":false,"kind":"function","modifiers":[],"name":"claimWithResolver","nameLocation":"325:17:41","nodeType":"FunctionDefinition","parameters":{"id":5565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5562,"mutability":"mutable","name":"owner","nameLocation":"360:5:41","nodeType":"VariableDeclaration","scope":5569,"src":"352:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5561,"name":"address","nodeType":"ElementaryTypeName","src":"352:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5564,"mutability":"mutable","name":"resolver","nameLocation":"383:8:41","nodeType":"VariableDeclaration","scope":5569,"src":"375:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5563,"name":"address","nodeType":"ElementaryTypeName","src":"375:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"342:55:41"},"returnParameters":{"id":5568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5567,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5569,"src":"416:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5566,"name":"bytes32","nodeType":"ElementaryTypeName","src":"416:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"415:9:41"},"scope":5597,"src":"316:109:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c47f0027","id":5576,"implemented":false,"kind":"function","modifiers":[],"name":"setName","nameLocation":"440:7:41","nodeType":"FunctionDefinition","parameters":{"id":5572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5571,"mutability":"mutable","name":"name","nameLocation":"462:4:41","nodeType":"VariableDeclaration","scope":5576,"src":"448:18:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5570,"name":"string","nodeType":"ElementaryTypeName","src":"448:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"447:20:41"},"returnParameters":{"id":5575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5576,"src":"486:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5573,"name":"bytes32","nodeType":"ElementaryTypeName","src":"486:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"485:9:41"},"scope":5597,"src":"431:64:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"7a806d6b","id":5589,"implemented":false,"kind":"function","modifiers":[],"name":"setNameForAddr","nameLocation":"510:14:41","nodeType":"FunctionDefinition","parameters":{"id":5585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5578,"mutability":"mutable","name":"addr","nameLocation":"542:4:41","nodeType":"VariableDeclaration","scope":5589,"src":"534:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5577,"name":"address","nodeType":"ElementaryTypeName","src":"534:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5580,"mutability":"mutable","name":"owner","nameLocation":"564:5:41","nodeType":"VariableDeclaration","scope":5589,"src":"556:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5579,"name":"address","nodeType":"ElementaryTypeName","src":"556:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5582,"mutability":"mutable","name":"resolver","nameLocation":"587:8:41","nodeType":"VariableDeclaration","scope":5589,"src":"579:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5581,"name":"address","nodeType":"ElementaryTypeName","src":"579:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5584,"mutability":"mutable","name":"name","nameLocation":"619:4:41","nodeType":"VariableDeclaration","scope":5589,"src":"605:18:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5583,"name":"string","nodeType":"ElementaryTypeName","src":"605:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"524:105:41"},"returnParameters":{"id":5588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5589,"src":"648:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5586,"name":"bytes32","nodeType":"ElementaryTypeName","src":"648:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"647:9:41"},"scope":5597,"src":"501:156:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"bffbe61c","id":5596,"implemented":false,"kind":"function","modifiers":[],"name":"node","nameLocation":"672:4:41","nodeType":"FunctionDefinition","parameters":{"id":5592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5591,"mutability":"mutable","name":"addr","nameLocation":"685:4:41","nodeType":"VariableDeclaration","scope":5596,"src":"677:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5590,"name":"address","nodeType":"ElementaryTypeName","src":"677:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"676:14:41"},"returnParameters":{"id":5595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5596,"src":"714:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5593,"name":"bytes32","nodeType":"ElementaryTypeName","src":"714:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"713:9:41"},"scope":5597,"src":"663:60:41","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":5598,"src":"26:699:41","usedErrors":[]}],"src":"0:726:41"},"id":41},"contracts/utils/BytesUtils.sol":{"ast":{"absolutePath":"contracts/utils/BytesUtils.sol","exportedSymbols":{"BytesUtils":[6533]},"id":6534,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5599,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"31:23:42"},{"abstract":false,"baseContracts":[],"canonicalName":"BytesUtils","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":6533,"linearizedBaseContracts":[6533],"name":"BytesUtils","nameLocation":"64:10:42","nodeType":"ContractDefinition","nodes":[{"errorSelector":"8a3c1cfb","id":5605,"name":"OffsetOutOfBoundsError","nameLocation":"87:22:42","nodeType":"ErrorDefinition","parameters":{"id":5604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5601,"mutability":"mutable","name":"offset","nameLocation":"118:6:42","nodeType":"VariableDeclaration","scope":5605,"src":"110:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5600,"name":"uint256","nodeType":"ElementaryTypeName","src":"110:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5603,"mutability":"mutable","name":"length","nameLocation":"134:6:42","nodeType":"VariableDeclaration","scope":5605,"src":"126:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5602,"name":"uint256","nodeType":"ElementaryTypeName","src":"126:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"109:32:42"},"src":"81:61:42"},{"body":{"id":5626,"nodeType":"Block","src":"539:144:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5617,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5609,"src":"557:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5618,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"566:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"557:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":5620,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5607,"src":"573:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"578:6:42","memberName":"length","nodeType":"MemberAccess","src":"573:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"557:27:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5616,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"549:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":5623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"549:36:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5624,"nodeType":"ExpressionStatement","src":"549:36:42"},{"AST":{"nodeType":"YulBlock","src":"604:73:42","statements":[{"nodeType":"YulAssignment","src":"618:49:42","value":{"arguments":[{"arguments":[{"arguments":[{"name":"self","nodeType":"YulIdentifier","src":"643:4:42"},{"kind":"number","nodeType":"YulLiteral","src":"649:2:42","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"639:3:42"},"nodeType":"YulFunctionCall","src":"639:13:42"},{"name":"offset","nodeType":"YulIdentifier","src":"654:6:42"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"635:3:42"},"nodeType":"YulFunctionCall","src":"635:26:42"},{"name":"len","nodeType":"YulIdentifier","src":"663:3:42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"625:9:42"},"nodeType":"YulFunctionCall","src":"625:42:42"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"618:3:42"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5611,"isOffset":false,"isSlot":false,"src":"663:3:42","valueSize":1},{"declaration":5609,"isOffset":false,"isSlot":false,"src":"654:6:42","valueSize":1},{"declaration":5614,"isOffset":false,"isSlot":false,"src":"618:3:42","valueSize":1},{"declaration":5607,"isOffset":false,"isSlot":false,"src":"643:4:42","valueSize":1}],"id":5625,"nodeType":"InlineAssembly","src":"595:82:42"}]},"id":5627,"implemented":true,"kind":"function","modifiers":[],"name":"keccak","nameLocation":"418:6:42","nodeType":"FunctionDefinition","parameters":{"id":5612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5607,"mutability":"mutable","name":"self","nameLocation":"447:4:42","nodeType":"VariableDeclaration","scope":5627,"src":"434:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5606,"name":"bytes","nodeType":"ElementaryTypeName","src":"434:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5609,"mutability":"mutable","name":"offset","nameLocation":"469:6:42","nodeType":"VariableDeclaration","scope":5627,"src":"461:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5608,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5611,"mutability":"mutable","name":"len","nameLocation":"493:3:42","nodeType":"VariableDeclaration","scope":5627,"src":"485:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5610,"name":"uint256","nodeType":"ElementaryTypeName","src":"485:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"424:78:42"},"returnParameters":{"id":5615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5614,"mutability":"mutable","name":"ret","nameLocation":"534:3:42","nodeType":"VariableDeclaration","scope":5627,"src":"526:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"526:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"525:13:42"},"scope":6533,"src":"409:274:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5680,"nodeType":"Block","src":"1021:336:42","statements":[{"assignments":[5638,5640],"declarations":[{"constant":false,"id":5638,"mutability":"mutable","name":"labelhash","nameLocation":"1040:9:42","nodeType":"VariableDeclaration","scope":5680,"src":"1032:17:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5637,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1032:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5640,"mutability":"mutable","name":"newOffset","nameLocation":"1059:9:42","nodeType":"VariableDeclaration","scope":5680,"src":"1051:17:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5639,"name":"uint256","nodeType":"ElementaryTypeName","src":"1051:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5645,"initialValue":{"arguments":[{"id":5642,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5630,"src":"1082:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5643,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5632,"src":"1088:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5641,"name":"readLabel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5745,"src":"1072:9:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (bytes32,uint256)"}},"id":5644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1072:23:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_uint256_$","typeString":"tuple(bytes32,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"1031:64:42"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5646,"name":"labelhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5638,"src":"1109:9:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1122:7:42","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1122:7:42","typeDescriptions":{}}},"id":5650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1122:10:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1109:23:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5668,"nodeType":"IfStatement","src":"1105:152:42","trueBody":{"id":5667,"nodeType":"Block","src":"1134:123:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5653,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5632,"src":"1156:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5654,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5630,"src":"1166:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1171:6:42","memberName":"length","nodeType":"MemberAccess","src":"1166:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1180:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1166:15:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1156:25:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e616d65686173683a204a756e6b20617420656e64206f66206e616d65","id":5659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1183:31:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_912cb3202b125350fc41f3ab0d7246878642a776f73877d55ca2cfbcec1f2142","typeString":"literal_string \"namehash: Junk at end of name\""},"value":"namehash: Junk at end of name"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_912cb3202b125350fc41f3ab0d7246878642a776f73877d55ca2cfbcec1f2142","typeString":"literal_string \"namehash: Junk at end of name\""}],"id":5652,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1148:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1148:67:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5661,"nodeType":"ExpressionStatement","src":"1148:67:42"},{"expression":{"arguments":[{"hexValue":"30","id":5664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1244:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1236:7:42","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5662,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1236:7:42","typeDescriptions":{}}},"id":5665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1236:10:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5636,"id":5666,"nodeType":"Return","src":"1229:17:42"}]}},{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":5673,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5630,"src":"1321:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5674,"name":"newOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5640,"src":"1327:9:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5672,"name":"namehash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5681,"src":"1312:8:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":5675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1312:25:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5676,"name":"labelhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5638,"src":"1339:9:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5670,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1295:3:42","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1299:12:42","memberName":"encodePacked","nodeType":"MemberAccess","src":"1295:16:42","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1295:54:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5669,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1285:9:42","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1285:65:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5636,"id":5679,"nodeType":"Return","src":"1266:84:42"}]},"documentation":{"id":5628,"nodeType":"StructuredDocumentation","src":"689:220:42","text":" @dev Returns the ENS namehash of a DNS-encoded name.\n @param self The DNS-encoded name to hash.\n @param offset The offset at which to start hashing.\n @return The namehash of the name."},"id":5681,"implemented":true,"kind":"function","modifiers":[],"name":"namehash","nameLocation":"923:8:42","nodeType":"FunctionDefinition","parameters":{"id":5633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5630,"mutability":"mutable","name":"self","nameLocation":"954:4:42","nodeType":"VariableDeclaration","scope":5681,"src":"941:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5629,"name":"bytes","nodeType":"ElementaryTypeName","src":"941:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5632,"mutability":"mutable","name":"offset","nameLocation":"976:6:42","nodeType":"VariableDeclaration","scope":5681,"src":"968:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5631,"name":"uint256","nodeType":"ElementaryTypeName","src":"968:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"931:57:42"},"returnParameters":{"id":5636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5635,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5681,"src":"1012:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5634,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1012:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1011:9:42"},"scope":6533,"src":"914:443:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5744,"nodeType":"Block","src":"1891:296:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5694,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5686,"src":"1909:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5695,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"1915:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1920:6:42","memberName":"length","nodeType":"MemberAccess","src":"1915:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1909:17:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"726561644c6162656c3a20496e646578206f7574206f6620626f756e6473","id":5698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1928:32:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_723ef06cf58e92d84b8ad4ad83db034cb099b69c213da6595a1e7ca6ebe51535","typeString":"literal_string \"readLabel: Index out of bounds\""},"value":"readLabel: Index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_723ef06cf58e92d84b8ad4ad83db034cb099b69c213da6595a1e7ca6ebe51535","typeString":"literal_string \"readLabel: Index out of bounds\""}],"id":5693,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1901:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:60:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5700,"nodeType":"ExpressionStatement","src":"1901:60:42"},{"assignments":[5702],"declarations":[{"constant":false,"id":5702,"mutability":"mutable","name":"len","nameLocation":"1979:3:42","nodeType":"VariableDeclaration","scope":5744,"src":"1971:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5701,"name":"uint256","nodeType":"ElementaryTypeName","src":"1971:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5712,"initialValue":{"arguments":[{"arguments":[{"baseExpression":{"id":5707,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"1999:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5709,"indexExpression":{"id":5708,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5686,"src":"2004:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1999:9:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":5706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1993:5:42","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5705,"name":"uint8","nodeType":"ElementaryTypeName","src":"1993:5:42","typeDescriptions":{}}},"id":5710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1993:16:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":5704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1985:7:42","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5703,"name":"uint256","nodeType":"ElementaryTypeName","src":"1985:7:42","typeDescriptions":{}}},"id":5711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1985:25:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1971:39:42"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5713,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5702,"src":"2024:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2030:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2024:7:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5734,"nodeType":"Block","src":"2102:47:42","statements":[{"expression":{"id":5732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5727,"name":"labelhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5689,"src":"2116:9:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":5730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2136:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2128:7:42","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5728,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2128:7:42","typeDescriptions":{}}},"id":5731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:10:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2116:22:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5733,"nodeType":"ExpressionStatement","src":"2116:22:42"}]},"id":5735,"nodeType":"IfStatement","src":"2020:129:42","trueBody":{"id":5726,"nodeType":"Block","src":"2033:63:42","statements":[{"expression":{"id":5724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5716,"name":"labelhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5689,"src":"2047:9:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5718,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"2066:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5719,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5686,"src":"2072:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2078:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2072:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5722,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5702,"src":"2081:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5717,"name":"keccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5627,"src":"2059:6:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes32)"}},"id":5723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2059:26:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2047:38:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5725,"nodeType":"ExpressionStatement","src":"2047:38:42"}]}},{"expression":{"id":5742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5736,"name":"newIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5691,"src":"2158:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5737,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5686,"src":"2167:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5738,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5702,"src":"2173:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2167:9:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2167:13:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2158:22:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5743,"nodeType":"ExpressionStatement","src":"2158:22:42"}]},"documentation":{"id":5682,"nodeType":"StructuredDocumentation","src":"1363:392:42","text":" @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\n @param self The byte string to read a label from.\n @param idx The index to read a label at.\n @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\n @return newIdx The index of the start of the next label."},"id":5745,"implemented":true,"kind":"function","modifiers":[],"name":"readLabel","nameLocation":"1769:9:42","nodeType":"FunctionDefinition","parameters":{"id":5687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5684,"mutability":"mutable","name":"self","nameLocation":"1801:4:42","nodeType":"VariableDeclaration","scope":5745,"src":"1788:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5683,"name":"bytes","nodeType":"ElementaryTypeName","src":"1788:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5686,"mutability":"mutable","name":"idx","nameLocation":"1823:3:42","nodeType":"VariableDeclaration","scope":5745,"src":"1815:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5685,"name":"uint256","nodeType":"ElementaryTypeName","src":"1815:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:54:42"},"returnParameters":{"id":5692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5689,"mutability":"mutable","name":"labelhash","nameLocation":"1864:9:42","nodeType":"VariableDeclaration","scope":5745,"src":"1856:17:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5688,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1856:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5691,"mutability":"mutable","name":"newIdx","nameLocation":"1883:6:42","nodeType":"VariableDeclaration","scope":5745,"src":"1875:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5690,"name":"uint256","nodeType":"ElementaryTypeName","src":"1875:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1855:35:42"},"scope":6533,"src":"1760:427:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5765,"nodeType":"Block","src":"2659:77:42","statements":[{"expression":{"arguments":[{"id":5755,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5747,"src":"2684:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":5756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2690:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":5757,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5747,"src":"2693:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2698:6:42","memberName":"length","nodeType":"MemberAccess","src":"2693:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5759,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"2706:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":5760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2713:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":5761,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"2716:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2722:6:42","memberName":"length","nodeType":"MemberAccess","src":"2716:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5754,"name":"compare","nodeType":"Identifier","overloadedDeclarations":[5766,5937],"referencedDeclaration":5937,"src":"2676:7:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$","typeString":"function (bytes memory,uint256,uint256,bytes memory,uint256,uint256) pure returns (int256)"}},"id":5763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2676:53:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5753,"id":5764,"nodeType":"Return","src":"2669:60:42"}]},"id":5766,"implemented":true,"kind":"function","modifiers":[],"name":"compare","nameLocation":"2559:7:42","nodeType":"FunctionDefinition","parameters":{"id":5750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5747,"mutability":"mutable","name":"self","nameLocation":"2589:4:42","nodeType":"VariableDeclaration","scope":5766,"src":"2576:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5746,"name":"bytes","nodeType":"ElementaryTypeName","src":"2576:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5749,"mutability":"mutable","name":"other","nameLocation":"2616:5:42","nodeType":"VariableDeclaration","scope":5766,"src":"2603:18:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5748,"name":"bytes","nodeType":"ElementaryTypeName","src":"2603:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2566:61:42"},"returnParameters":{"id":5753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5766,"src":"2651:6:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5751,"name":"int256","nodeType":"ElementaryTypeName","src":"2651:6:42","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2650:8:42"},"scope":6533,"src":"2550:186:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5936,"nodeType":"Block","src":"3570:1315:42","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5783,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5770,"src":"3584:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5784,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5772,"src":"3593:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3584:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":5786,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5768,"src":"3599:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3604:6:42","memberName":"length","nodeType":"MemberAccess","src":"3599:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3584:26:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5798,"nodeType":"IfStatement","src":"3580:113:42","trueBody":{"id":5797,"nodeType":"Block","src":"3612:81:42","statements":[{"errorCall":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5790,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5770,"src":"3656:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5791,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5772,"src":"3665:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3656:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5793,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5768,"src":"3670:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3675:6:42","memberName":"length","nodeType":"MemberAccess","src":"3670:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5789,"name":"OffsetOutOfBoundsError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5605,"src":"3633:22:42","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":5795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3633:49:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5796,"nodeType":"RevertStatement","src":"3626:56:42"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5799,"name":"otheroffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5776,"src":"3706:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5800,"name":"otherlen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"3720:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3706:22:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":5802,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"3731:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3737:6:42","memberName":"length","nodeType":"MemberAccess","src":"3731:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3706:37:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5814,"nodeType":"IfStatement","src":"3702:135:42","trueBody":{"id":5813,"nodeType":"Block","src":"3745:92:42","statements":[{"errorCall":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5806,"name":"otheroffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5776,"src":"3789:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5807,"name":"otherlen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"3803:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3789:22:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5809,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"3813:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3819:6:42","memberName":"length","nodeType":"MemberAccess","src":"3813:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5805,"name":"OffsetOutOfBoundsError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5605,"src":"3766:22:42","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":5811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3766:60:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5812,"nodeType":"RevertStatement","src":"3759:67:42"}]}},{"assignments":[5816],"declarations":[{"constant":false,"id":5816,"mutability":"mutable","name":"shortest","nameLocation":"3855:8:42","nodeType":"VariableDeclaration","scope":5936,"src":"3847:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5815,"name":"uint256","nodeType":"ElementaryTypeName","src":"3847:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5818,"initialValue":{"id":5817,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5772,"src":"3866:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3847:22:42"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5819,"name":"otherlen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"3883:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5820,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5772,"src":"3894:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3883:14:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5826,"nodeType":"IfStatement","src":"3879:39:42","trueBody":{"expression":{"id":5824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5822,"name":"shortest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5816,"src":"3899:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5823,"name":"otherlen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"3910:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3899:19:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5825,"nodeType":"ExpressionStatement","src":"3899:19:42"}},{"assignments":[5828],"declarations":[{"constant":false,"id":5828,"mutability":"mutable","name":"selfptr","nameLocation":"3937:7:42","nodeType":"VariableDeclaration","scope":5936,"src":"3929:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5827,"name":"uint256","nodeType":"ElementaryTypeName","src":"3929:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5829,"nodeType":"VariableDeclarationStatement","src":"3929:15:42"},{"assignments":[5831],"declarations":[{"constant":false,"id":5831,"mutability":"mutable","name":"otherptr","nameLocation":"3962:8:42","nodeType":"VariableDeclaration","scope":5936,"src":"3954:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5830,"name":"uint256","nodeType":"ElementaryTypeName","src":"3954:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5832,"nodeType":"VariableDeclarationStatement","src":"3954:16:42"},{"AST":{"nodeType":"YulBlock","src":"3990:118:42","statements":[{"nodeType":"YulAssignment","src":"4004:37:42","value":{"arguments":[{"name":"self","nodeType":"YulIdentifier","src":"4019:4:42"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4029:6:42"},{"kind":"number","nodeType":"YulLiteral","src":"4037:2:42","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:42"},"nodeType":"YulFunctionCall","src":"4025:15:42"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4015:3:42"},"nodeType":"YulFunctionCall","src":"4015:26:42"},"variableNames":[{"name":"selfptr","nodeType":"YulIdentifier","src":"4004:7:42"}]},{"nodeType":"YulAssignment","src":"4054:44:42","value":{"arguments":[{"name":"other","nodeType":"YulIdentifier","src":"4070:5:42"},{"arguments":[{"name":"otheroffset","nodeType":"YulIdentifier","src":"4081:11:42"},{"kind":"number","nodeType":"YulLiteral","src":"4094:2:42","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4077:3:42"},"nodeType":"YulFunctionCall","src":"4077:20:42"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4066:3:42"},"nodeType":"YulFunctionCall","src":"4066:32:42"},"variableNames":[{"name":"otherptr","nodeType":"YulIdentifier","src":"4054:8:42"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5770,"isOffset":false,"isSlot":false,"src":"4029:6:42","valueSize":1},{"declaration":5774,"isOffset":false,"isSlot":false,"src":"4070:5:42","valueSize":1},{"declaration":5776,"isOffset":false,"isSlot":false,"src":"4081:11:42","valueSize":1},{"declaration":5831,"isOffset":false,"isSlot":false,"src":"4054:8:42","valueSize":1},{"declaration":5768,"isOffset":false,"isSlot":false,"src":"4019:4:42","valueSize":1},{"declaration":5828,"isOffset":false,"isSlot":false,"src":"4004:7:42","valueSize":1}],"id":5833,"nodeType":"InlineAssembly","src":"3981:127:42"},{"body":{"id":5924,"nodeType":"Block","src":"4166:665:42","statements":[{"assignments":[5846],"declarations":[{"constant":false,"id":5846,"mutability":"mutable","name":"a","nameLocation":"4188:1:42","nodeType":"VariableDeclaration","scope":5924,"src":"4180:9:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5845,"name":"uint256","nodeType":"ElementaryTypeName","src":"4180:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5847,"nodeType":"VariableDeclarationStatement","src":"4180:9:42"},{"assignments":[5849],"declarations":[{"constant":false,"id":5849,"mutability":"mutable","name":"b","nameLocation":"4211:1:42","nodeType":"VariableDeclaration","scope":5924,"src":"4203:9:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5848,"name":"uint256","nodeType":"ElementaryTypeName","src":"4203:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5850,"nodeType":"VariableDeclarationStatement","src":"4203:9:42"},{"AST":{"nodeType":"YulBlock","src":"4235:88:42","statements":[{"nodeType":"YulAssignment","src":"4253:19:42","value":{"arguments":[{"name":"selfptr","nodeType":"YulIdentifier","src":"4264:7:42"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4258:5:42"},"nodeType":"YulFunctionCall","src":"4258:14:42"},"variableNames":[{"name":"a","nodeType":"YulIdentifier","src":"4253:1:42"}]},{"nodeType":"YulAssignment","src":"4289:20:42","value":{"arguments":[{"name":"otherptr","nodeType":"YulIdentifier","src":"4300:8:42"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4294:5:42"},"nodeType":"YulFunctionCall","src":"4294:15:42"},"variableNames":[{"name":"b","nodeType":"YulIdentifier","src":"4289:1:42"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5846,"isOffset":false,"isSlot":false,"src":"4253:1:42","valueSize":1},{"declaration":5849,"isOffset":false,"isSlot":false,"src":"4289:1:42","valueSize":1},{"declaration":5831,"isOffset":false,"isSlot":false,"src":"4300:8:42","valueSize":1},{"declaration":5828,"isOffset":false,"isSlot":false,"src":"4264:7:42","valueSize":1}],"id":5851,"nodeType":"InlineAssembly","src":"4226:97:42"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5852,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5846,"src":"4340:1:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5853,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5849,"src":"4345:1:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4340:6:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5915,"nodeType":"IfStatement","src":"4336:430:42","trueBody":{"id":5914,"nodeType":"Block","src":"4348:418:42","statements":[{"assignments":[5856],"declarations":[{"constant":false,"id":5856,"mutability":"mutable","name":"mask","nameLocation":"4435:4:42","nodeType":"VariableDeclaration","scope":5914,"src":"4427:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5855,"name":"uint256","nodeType":"ElementaryTypeName","src":"4427:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5857,"nodeType":"VariableDeclarationStatement","src":"4427:12:42"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5858,"name":"shortest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5816,"src":"4461:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5859,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5835,"src":"4472:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4461:14:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3332","id":5861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4479:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4461:20:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5890,"nodeType":"Block","src":"4554:87:42","statements":[{"expression":{"id":5888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5872,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5856,"src":"4576:4:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"4583:39:42","subExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4585:1:42","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":5874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4591:1:42","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5875,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5835,"src":"4596:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":5876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4602:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4596:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5878,"name":"shortest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5816,"src":"4607:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4596:19:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5880,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4595:21:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4591:25:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5882,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4590:27:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4585:32:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4620:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4585:36:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5886,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4584:38:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4576:46:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5889,"nodeType":"ExpressionStatement","src":"4576:46:42"}]},"id":5891,"nodeType":"IfStatement","src":"4457:184:42","trueBody":{"id":5871,"nodeType":"Block","src":"4483:65:42","statements":[{"expression":{"id":5869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5863,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5856,"src":"4505:4:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":5866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4517:7:42","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5865,"name":"uint256","nodeType":"ElementaryTypeName","src":"4517:7:42","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":5864,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4512:4:42","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4512:13:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":5868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4526:3:42","memberName":"max","nodeType":"MemberAccess","src":"4512:17:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4505:24:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5870,"nodeType":"ExpressionStatement","src":"4505:24:42"}]}},{"assignments":[5893],"declarations":[{"constant":false,"id":5893,"mutability":"mutable","name":"diff","nameLocation":"4665:4:42","nodeType":"VariableDeclaration","scope":5914,"src":"4658:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5892,"name":"int256","nodeType":"ElementaryTypeName","src":"4658:6:42","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5907,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5896,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5846,"src":"4679:1:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5897,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5856,"src":"4683:4:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4679:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4672:6:42","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5894,"name":"int256","nodeType":"ElementaryTypeName","src":"4672:6:42","typeDescriptions":{}}},"id":5899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4672:16:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5902,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5849,"src":"4698:1:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5903,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5856,"src":"4702:4:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4698:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4691:6:42","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5900,"name":"int256","nodeType":"ElementaryTypeName","src":"4691:6:42","typeDescriptions":{}}},"id":5905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4691:16:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"4672:35:42","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"4658:49:42"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5908,"name":"diff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5893,"src":"4729:4:42","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4737:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4729:9:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5913,"nodeType":"IfStatement","src":"4725:26:42","trueBody":{"expression":{"id":5911,"name":"diff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5893,"src":"4747:4:42","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5782,"id":5912,"nodeType":"Return","src":"4740:11:42"}}]}},{"expression":{"id":5918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5916,"name":"selfptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5828,"src":"4779:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":5917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4790:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4779:13:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5919,"nodeType":"ExpressionStatement","src":"4779:13:42"},{"expression":{"id":5922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5920,"name":"otherptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5831,"src":"4806:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":5921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4818:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4806:14:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5923,"nodeType":"ExpressionStatement","src":"4806:14:42"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5838,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5835,"src":"4139:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5839,"name":"shortest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5816,"src":"4145:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4139:14:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5925,"initializationExpression":{"assignments":[5835],"declarations":[{"constant":false,"id":5835,"mutability":"mutable","name":"idx","nameLocation":"4130:3:42","nodeType":"VariableDeclaration","scope":5925,"src":"4122:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5834,"name":"uint256","nodeType":"ElementaryTypeName","src":"4122:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5837,"initialValue":{"hexValue":"30","id":5836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4136:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4122:15:42"},"loopExpression":{"expression":{"id":5843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5841,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5835,"src":"4155:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":5842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4162:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4155:9:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5844,"nodeType":"ExpressionStatement","src":"4155:9:42"},"nodeType":"ForStatement","src":"4117:714:42"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5928,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5772,"src":"4855:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4848:6:42","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5926,"name":"int256","nodeType":"ElementaryTypeName","src":"4848:6:42","typeDescriptions":{}}},"id":5929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4848:11:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":5932,"name":"otherlen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"4869:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4862:6:42","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5930,"name":"int256","nodeType":"ElementaryTypeName","src":"4862:6:42","typeDescriptions":{}}},"id":5933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4862:16:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"4848:30:42","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5782,"id":5935,"nodeType":"Return","src":"4841:37:42"}]},"id":5937,"implemented":true,"kind":"function","modifiers":[],"name":"compare","nameLocation":"3370:7:42","nodeType":"FunctionDefinition","parameters":{"id":5779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5768,"mutability":"mutable","name":"self","nameLocation":"3400:4:42","nodeType":"VariableDeclaration","scope":5937,"src":"3387:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5767,"name":"bytes","nodeType":"ElementaryTypeName","src":"3387:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5770,"mutability":"mutable","name":"offset","nameLocation":"3422:6:42","nodeType":"VariableDeclaration","scope":5937,"src":"3414:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5769,"name":"uint256","nodeType":"ElementaryTypeName","src":"3414:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5772,"mutability":"mutable","name":"len","nameLocation":"3446:3:42","nodeType":"VariableDeclaration","scope":5937,"src":"3438:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5771,"name":"uint256","nodeType":"ElementaryTypeName","src":"3438:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5774,"mutability":"mutable","name":"other","nameLocation":"3472:5:42","nodeType":"VariableDeclaration","scope":5937,"src":"3459:18:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5773,"name":"bytes","nodeType":"ElementaryTypeName","src":"3459:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5776,"mutability":"mutable","name":"otheroffset","nameLocation":"3495:11:42","nodeType":"VariableDeclaration","scope":5937,"src":"3487:19:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5775,"name":"uint256","nodeType":"ElementaryTypeName","src":"3487:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5778,"mutability":"mutable","name":"otherlen","nameLocation":"3524:8:42","nodeType":"VariableDeclaration","scope":5937,"src":"3516:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5777,"name":"uint256","nodeType":"ElementaryTypeName","src":"3516:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3377:161:42"},"returnParameters":{"id":5782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5781,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5937,"src":"3562:6:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5780,"name":"int256","nodeType":"ElementaryTypeName","src":"3562:6:42","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"3561:8:42"},"scope":6533,"src":"3361:1524:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5964,"nodeType":"Block","src":"5491:84:42","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5953,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5939,"src":"5515:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5954,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5941,"src":"5521:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5955,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5947,"src":"5529:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5952,"name":"keccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5627,"src":"5508:6:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes32)"}},"id":5956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5508:25:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":5958,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5943,"src":"5544:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5959,"name":"otherOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5945,"src":"5551:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5960,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5947,"src":"5564:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5957,"name":"keccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5627,"src":"5537:6:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes32)"}},"id":5961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5537:31:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5508:60:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5951,"id":5963,"nodeType":"Return","src":"5501:67:42"}]},"id":5965,"implemented":true,"kind":"function","modifiers":[],"name":"equals","nameLocation":"5320:6:42","nodeType":"FunctionDefinition","parameters":{"id":5948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5939,"mutability":"mutable","name":"self","nameLocation":"5349:4:42","nodeType":"VariableDeclaration","scope":5965,"src":"5336:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5938,"name":"bytes","nodeType":"ElementaryTypeName","src":"5336:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5941,"mutability":"mutable","name":"offset","nameLocation":"5371:6:42","nodeType":"VariableDeclaration","scope":5965,"src":"5363:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5940,"name":"uint256","nodeType":"ElementaryTypeName","src":"5363:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5943,"mutability":"mutable","name":"other","nameLocation":"5400:5:42","nodeType":"VariableDeclaration","scope":5965,"src":"5387:18:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5942,"name":"bytes","nodeType":"ElementaryTypeName","src":"5387:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5945,"mutability":"mutable","name":"otherOffset","nameLocation":"5423:11:42","nodeType":"VariableDeclaration","scope":5965,"src":"5415:19:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5944,"name":"uint256","nodeType":"ElementaryTypeName","src":"5415:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5947,"mutability":"mutable","name":"len","nameLocation":"5452:3:42","nodeType":"VariableDeclaration","scope":5965,"src":"5444:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5946,"name":"uint256","nodeType":"ElementaryTypeName","src":"5444:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5326:135:42"},"returnParameters":{"id":5951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5965,"src":"5485:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5949,"name":"bool","nodeType":"ElementaryTypeName","src":"5485:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5484:6:42"},"scope":6533,"src":"5311:264:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5996,"nodeType":"Block","src":"6124:148:42","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5979,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5967,"src":"6160:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5980,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5969,"src":"6166:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5981,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5967,"src":"6174:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6179:6:42","memberName":"length","nodeType":"MemberAccess","src":"6174:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5983,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5969,"src":"6188:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6174:20:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5978,"name":"keccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5627,"src":"6153:6:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes32)"}},"id":5985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6153:42:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":5987,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5971,"src":"6218:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5988,"name":"otherOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5973,"src":"6225:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5989,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5971,"src":"6238:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6244:6:42","memberName":"length","nodeType":"MemberAccess","src":"6238:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5991,"name":"otherOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5973,"src":"6253:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6238:26:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5986,"name":"keccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5627,"src":"6211:6:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes32)"}},"id":5993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6211:54:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6153:112:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5977,"id":5995,"nodeType":"Return","src":"6134:131:42"}]},"id":5997,"implemented":true,"kind":"function","modifiers":[],"name":"equals","nameLocation":"5974:6:42","nodeType":"FunctionDefinition","parameters":{"id":5974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5967,"mutability":"mutable","name":"self","nameLocation":"6003:4:42","nodeType":"VariableDeclaration","scope":5997,"src":"5990:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5966,"name":"bytes","nodeType":"ElementaryTypeName","src":"5990:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5969,"mutability":"mutable","name":"offset","nameLocation":"6025:6:42","nodeType":"VariableDeclaration","scope":5997,"src":"6017:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5968,"name":"uint256","nodeType":"ElementaryTypeName","src":"6017:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5971,"mutability":"mutable","name":"other","nameLocation":"6054:5:42","nodeType":"VariableDeclaration","scope":5997,"src":"6041:18:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5970,"name":"bytes","nodeType":"ElementaryTypeName","src":"6041:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5973,"mutability":"mutable","name":"otherOffset","nameLocation":"6077:11:42","nodeType":"VariableDeclaration","scope":5997,"src":"6069:19:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5972,"name":"uint256","nodeType":"ElementaryTypeName","src":"6069:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5980:114:42"},"returnParameters":{"id":5977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5997,"src":"6118:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5975,"name":"bool","nodeType":"ElementaryTypeName","src":"6118:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6117:6:42"},"scope":6533,"src":"5965:307:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6025,"nodeType":"Block","src":"6761:132:42","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6008,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5999,"src":"6790:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6795:6:42","memberName":"length","nodeType":"MemberAccess","src":"6790:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6010,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"6805:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":6011,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6003,"src":"6814:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6820:6:42","memberName":"length","nodeType":"MemberAccess","src":"6814:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6805:21:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6790:36:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"id":6016,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5999,"src":"6849:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6017,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"6855:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6018,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6003,"src":"6863:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":6019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6870:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":6020,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6003,"src":"6873:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6879:6:42","memberName":"length","nodeType":"MemberAccess","src":"6873:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6015,"name":"equals","nodeType":"Identifier","overloadedDeclarations":[5965,5997,6026,6051],"referencedDeclaration":5965,"src":"6842:6:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (bytes memory,uint256,bytes memory,uint256,uint256) pure returns (bool)"}},"id":6022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6842:44:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6790:96:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6007,"id":6024,"nodeType":"Return","src":"6771:115:42"}]},"id":6026,"implemented":true,"kind":"function","modifiers":[],"name":"equals","nameLocation":"6640:6:42","nodeType":"FunctionDefinition","parameters":{"id":6004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5999,"mutability":"mutable","name":"self","nameLocation":"6669:4:42","nodeType":"VariableDeclaration","scope":6026,"src":"6656:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5998,"name":"bytes","nodeType":"ElementaryTypeName","src":"6656:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6001,"mutability":"mutable","name":"offset","nameLocation":"6691:6:42","nodeType":"VariableDeclaration","scope":6026,"src":"6683:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6000,"name":"uint256","nodeType":"ElementaryTypeName","src":"6683:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6003,"mutability":"mutable","name":"other","nameLocation":"6720:5:42","nodeType":"VariableDeclaration","scope":6026,"src":"6707:18:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6002,"name":"bytes","nodeType":"ElementaryTypeName","src":"6707:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6646:85:42"},"returnParameters":{"id":6007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6026,"src":"6755:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6005,"name":"bool","nodeType":"ElementaryTypeName","src":"6755:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6754:6:42"},"scope":6533,"src":"6631:262:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6050,"nodeType":"Block","src":"7252:117:42","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6035,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6028,"src":"7281:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7286:6:42","memberName":"length","nodeType":"MemberAccess","src":"7281:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6037,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6030,"src":"7296:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7302:6:42","memberName":"length","nodeType":"MemberAccess","src":"7296:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7281:27:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"id":6041,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6028,"src":"7331:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":6042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7337:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":6043,"name":"other","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6030,"src":"7340:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":6044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7347:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":6045,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6028,"src":"7350:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7355:6:42","memberName":"length","nodeType":"MemberAccess","src":"7350:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6040,"name":"equals","nodeType":"Identifier","overloadedDeclarations":[5965,5997,6026,6051],"referencedDeclaration":5965,"src":"7324:6:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (bytes memory,uint256,bytes memory,uint256,uint256) pure returns (bool)"}},"id":6047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7324:38:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7281:81:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6034,"id":6049,"nodeType":"Return","src":"7262:100:42"}]},"id":6051,"implemented":true,"kind":"function","modifiers":[],"name":"equals","nameLocation":"7155:6:42","nodeType":"FunctionDefinition","parameters":{"id":6031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6028,"mutability":"mutable","name":"self","nameLocation":"7184:4:42","nodeType":"VariableDeclaration","scope":6051,"src":"7171:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6027,"name":"bytes","nodeType":"ElementaryTypeName","src":"7171:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6030,"mutability":"mutable","name":"other","nameLocation":"7211:5:42","nodeType":"VariableDeclaration","scope":6051,"src":"7198:18:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6029,"name":"bytes","nodeType":"ElementaryTypeName","src":"7198:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7161:61:42"},"returnParameters":{"id":6034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6051,"src":"7246:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6032,"name":"bool","nodeType":"ElementaryTypeName","src":"7246:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7245:6:42"},"scope":6533,"src":"7146:223:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6067,"nodeType":"Block","src":"7723:40:42","statements":[{"expression":{"arguments":[{"baseExpression":{"id":6062,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6053,"src":"7746:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6064,"indexExpression":{"id":6063,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6055,"src":"7751:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7746:9:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":6061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7740:5:42","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6060,"name":"uint8","nodeType":"ElementaryTypeName","src":"7740:5:42","typeDescriptions":{}}},"id":6065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7740:16:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":6059,"id":6066,"nodeType":"Return","src":"7733:23:42"}]},"id":6068,"implemented":true,"kind":"function","modifiers":[],"name":"readUint8","nameLocation":"7625:9:42","nodeType":"FunctionDefinition","parameters":{"id":6056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6053,"mutability":"mutable","name":"self","nameLocation":"7657:4:42","nodeType":"VariableDeclaration","scope":6068,"src":"7644:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6052,"name":"bytes","nodeType":"ElementaryTypeName","src":"7644:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6055,"mutability":"mutable","name":"idx","nameLocation":"7679:3:42","nodeType":"VariableDeclaration","scope":6068,"src":"7671:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6054,"name":"uint256","nodeType":"ElementaryTypeName","src":"7671:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7634:54:42"},"returnParameters":{"id":6059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6058,"mutability":"mutable","name":"ret","nameLocation":"7718:3:42","nodeType":"VariableDeclaration","scope":6068,"src":"7712:9:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6057,"name":"uint8","nodeType":"ElementaryTypeName","src":"7712:5:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"7711:11:42"},"scope":6533,"src":"7616:147:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6087,"nodeType":"Block","src":"8121:139:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6078,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"8139:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":6079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8145:1:42","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"8139:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":6081,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6070,"src":"8150:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8155:6:42","memberName":"length","nodeType":"MemberAccess","src":"8150:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8139:22:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6077,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8131:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8131:31:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6085,"nodeType":"ExpressionStatement","src":"8131:31:42"},{"AST":{"nodeType":"YulBlock","src":"8181:73:42","statements":[{"nodeType":"YulAssignment","src":"8195:49:42","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"self","nodeType":"YulIdentifier","src":"8220:4:42"},{"kind":"number","nodeType":"YulLiteral","src":"8226:1:42","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8216:3:42"},"nodeType":"YulFunctionCall","src":"8216:12:42"},{"name":"idx","nodeType":"YulIdentifier","src":"8230:3:42"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8212:3:42"},"nodeType":"YulFunctionCall","src":"8212:22:42"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8206:5:42"},"nodeType":"YulFunctionCall","src":"8206:29:42"},{"kind":"number","nodeType":"YulLiteral","src":"8237:6:42","type":"","value":"0xFFFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8202:3:42"},"nodeType":"YulFunctionCall","src":"8202:42:42"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"8195:3:42"}]}]},"evmVersion":"london","externalReferences":[{"declaration":6072,"isOffset":false,"isSlot":false,"src":"8230:3:42","valueSize":1},{"declaration":6075,"isOffset":false,"isSlot":false,"src":"8195:3:42","valueSize":1},{"declaration":6070,"isOffset":false,"isSlot":false,"src":"8220:4:42","valueSize":1}],"id":6086,"nodeType":"InlineAssembly","src":"8172:82:42"}]},"id":6088,"implemented":true,"kind":"function","modifiers":[],"name":"readUint16","nameLocation":"8021:10:42","nodeType":"FunctionDefinition","parameters":{"id":6073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6070,"mutability":"mutable","name":"self","nameLocation":"8054:4:42","nodeType":"VariableDeclaration","scope":6088,"src":"8041:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6069,"name":"bytes","nodeType":"ElementaryTypeName","src":"8041:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6072,"mutability":"mutable","name":"idx","nameLocation":"8076:3:42","nodeType":"VariableDeclaration","scope":6088,"src":"8068:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6071,"name":"uint256","nodeType":"ElementaryTypeName","src":"8068:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8031:54:42"},"returnParameters":{"id":6076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6075,"mutability":"mutable","name":"ret","nameLocation":"8116:3:42","nodeType":"VariableDeclaration","scope":6088,"src":"8109:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6074,"name":"uint16","nodeType":"ElementaryTypeName","src":"8109:6:42","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"8108:12:42"},"scope":6533,"src":"8012:248:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6107,"nodeType":"Block","src":"8618:143:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6098,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"8636:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"34","id":6099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8642:1:42","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"8636:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":6101,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"8647:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8652:6:42","memberName":"length","nodeType":"MemberAccess","src":"8647:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8636:22:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6097,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8628:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8628:31:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6105,"nodeType":"ExpressionStatement","src":"8628:31:42"},{"AST":{"nodeType":"YulBlock","src":"8678:77:42","statements":[{"nodeType":"YulAssignment","src":"8692:53:42","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"self","nodeType":"YulIdentifier","src":"8717:4:42"},{"kind":"number","nodeType":"YulLiteral","src":"8723:1:42","type":"","value":"4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8713:3:42"},"nodeType":"YulFunctionCall","src":"8713:12:42"},{"name":"idx","nodeType":"YulIdentifier","src":"8727:3:42"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8709:3:42"},"nodeType":"YulFunctionCall","src":"8709:22:42"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8703:5:42"},"nodeType":"YulFunctionCall","src":"8703:29:42"},{"kind":"number","nodeType":"YulLiteral","src":"8734:10:42","type":"","value":"0xFFFFFFFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8699:3:42"},"nodeType":"YulFunctionCall","src":"8699:46:42"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"8692:3:42"}]}]},"evmVersion":"london","externalReferences":[{"declaration":6092,"isOffset":false,"isSlot":false,"src":"8727:3:42","valueSize":1},{"declaration":6095,"isOffset":false,"isSlot":false,"src":"8692:3:42","valueSize":1},{"declaration":6090,"isOffset":false,"isSlot":false,"src":"8717:4:42","valueSize":1}],"id":6106,"nodeType":"InlineAssembly","src":"8669:86:42"}]},"id":6108,"implemented":true,"kind":"function","modifiers":[],"name":"readUint32","nameLocation":"8518:10:42","nodeType":"FunctionDefinition","parameters":{"id":6093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6090,"mutability":"mutable","name":"self","nameLocation":"8551:4:42","nodeType":"VariableDeclaration","scope":6108,"src":"8538:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6089,"name":"bytes","nodeType":"ElementaryTypeName","src":"8538:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6092,"mutability":"mutable","name":"idx","nameLocation":"8573:3:42","nodeType":"VariableDeclaration","scope":6108,"src":"8565:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6091,"name":"uint256","nodeType":"ElementaryTypeName","src":"8565:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8528:54:42"},"returnParameters":{"id":6096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6095,"mutability":"mutable","name":"ret","nameLocation":"8613:3:42","nodeType":"VariableDeclaration","scope":6108,"src":"8606:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6094,"name":"uint32","nodeType":"ElementaryTypeName","src":"8606:6:42","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8605:12:42"},"scope":6533,"src":"8509:252:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6127,"nodeType":"Block","src":"9095:128:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6118,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"9113:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":6119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9119:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9113:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":6121,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6110,"src":"9125:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9130:6:42","memberName":"length","nodeType":"MemberAccess","src":"9125:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9113:23:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6117,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9105:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9105:32:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6125,"nodeType":"ExpressionStatement","src":"9105:32:42"},{"AST":{"nodeType":"YulBlock","src":"9156:61:42","statements":[{"nodeType":"YulAssignment","src":"9170:37:42","value":{"arguments":[{"arguments":[{"arguments":[{"name":"self","nodeType":"YulIdentifier","src":"9191:4:42"},{"kind":"number","nodeType":"YulLiteral","src":"9197:2:42","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9187:3:42"},"nodeType":"YulFunctionCall","src":"9187:13:42"},{"name":"idx","nodeType":"YulIdentifier","src":"9202:3:42"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9183:3:42"},"nodeType":"YulFunctionCall","src":"9183:23:42"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9177:5:42"},"nodeType":"YulFunctionCall","src":"9177:30:42"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"9170:3:42"}]}]},"evmVersion":"london","externalReferences":[{"declaration":6112,"isOffset":false,"isSlot":false,"src":"9202:3:42","valueSize":1},{"declaration":6115,"isOffset":false,"isSlot":false,"src":"9170:3:42","valueSize":1},{"declaration":6110,"isOffset":false,"isSlot":false,"src":"9191:4:42","valueSize":1}],"id":6126,"nodeType":"InlineAssembly","src":"9147:70:42"}]},"id":6128,"implemented":true,"kind":"function","modifiers":[],"name":"readBytes32","nameLocation":"8993:11:42","nodeType":"FunctionDefinition","parameters":{"id":6113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6110,"mutability":"mutable","name":"self","nameLocation":"9027:4:42","nodeType":"VariableDeclaration","scope":6128,"src":"9014:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6109,"name":"bytes","nodeType":"ElementaryTypeName","src":"9014:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6112,"mutability":"mutable","name":"idx","nameLocation":"9049:3:42","nodeType":"VariableDeclaration","scope":6128,"src":"9041:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6111,"name":"uint256","nodeType":"ElementaryTypeName","src":"9041:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9004:54:42"},"returnParameters":{"id":6116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6115,"mutability":"mutable","name":"ret","nameLocation":"9090:3:42","nodeType":"VariableDeclaration","scope":6128,"src":"9082:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9082:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9081:13:42"},"scope":6533,"src":"8984:239:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6147,"nodeType":"Block","src":"9557:247:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6138,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6132,"src":"9575:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3230","id":6139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9581:2:42","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"9575:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":6141,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6130,"src":"9587:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9592:6:42","memberName":"length","nodeType":"MemberAccess","src":"9587:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9575:23:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6137,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9567:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9567:32:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6145,"nodeType":"ExpressionStatement","src":"9567:32:42"},{"AST":{"nodeType":"YulBlock","src":"9618:180:42","statements":[{"nodeType":"YulAssignment","src":"9632:156:42","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"self","nodeType":"YulIdentifier","src":"9674:4:42"},{"kind":"number","nodeType":"YulLiteral","src":"9680:2:42","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9670:3:42"},"nodeType":"YulFunctionCall","src":"9670:13:42"},{"name":"idx","nodeType":"YulIdentifier","src":"9685:3:42"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9666:3:42"},"nodeType":"YulFunctionCall","src":"9666:23:42"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9660:5:42"},"nodeType":"YulFunctionCall","src":"9660:30:42"},{"kind":"number","nodeType":"YulLiteral","src":"9708:66:42","type":"","value":"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9639:3:42"},"nodeType":"YulFunctionCall","src":"9639:149:42"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"9632:3:42"}]}]},"evmVersion":"london","externalReferences":[{"declaration":6132,"isOffset":false,"isSlot":false,"src":"9685:3:42","valueSize":1},{"declaration":6135,"isOffset":false,"isSlot":false,"src":"9632:3:42","valueSize":1},{"declaration":6130,"isOffset":false,"isSlot":false,"src":"9674:4:42","valueSize":1}],"id":6146,"nodeType":"InlineAssembly","src":"9609:189:42"}]},"id":6148,"implemented":true,"kind":"function","modifiers":[],"name":"readBytes20","nameLocation":"9455:11:42","nodeType":"FunctionDefinition","parameters":{"id":6133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6130,"mutability":"mutable","name":"self","nameLocation":"9489:4:42","nodeType":"VariableDeclaration","scope":6148,"src":"9476:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6129,"name":"bytes","nodeType":"ElementaryTypeName","src":"9476:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6132,"mutability":"mutable","name":"idx","nameLocation":"9511:3:42","nodeType":"VariableDeclaration","scope":6148,"src":"9503:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6131,"name":"uint256","nodeType":"ElementaryTypeName","src":"9503:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9466:54:42"},"returnParameters":{"id":6136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6135,"mutability":"mutable","name":"ret","nameLocation":"9552:3:42","nodeType":"VariableDeclaration","scope":6148,"src":"9544:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":6134,"name":"bytes20","nodeType":"ElementaryTypeName","src":"9544:7:42","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"9543:13:42"},"scope":6533,"src":"9446:358:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6175,"nodeType":"Block","src":"10197:228:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6160,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6154,"src":"10215:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3332","id":6161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10222:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10215:9:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6159,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10207:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10207:18:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6164,"nodeType":"ExpressionStatement","src":"10207:18:42"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6166,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6152,"src":"10243:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6167,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6154,"src":"10249:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10243:9:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":6169,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6150,"src":"10256:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10261:6:42","memberName":"length","nodeType":"MemberAccess","src":"10256:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10243:24:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6165,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10235:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10235:33:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6173,"nodeType":"ExpressionStatement","src":"10235:33:42"},{"AST":{"nodeType":"YulBlock","src":"10287:132:42","statements":[{"nodeType":"YulVariableDeclaration","src":"10301:47:42","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10325:3:42","type":"","value":"256"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10334:2:42","type":"","value":"32"},{"name":"len","nodeType":"YulIdentifier","src":"10338:3:42"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10330:3:42"},"nodeType":"YulFunctionCall","src":"10330:12:42"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"10321:3:42"},"nodeType":"YulFunctionCall","src":"10321:22:42"},{"kind":"number","nodeType":"YulLiteral","src":"10345:1:42","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10317:3:42"},"nodeType":"YulFunctionCall","src":"10317:30:42"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10313:3:42"},"nodeType":"YulFunctionCall","src":"10313:35:42"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"10305:4:42","type":""}]},{"nodeType":"YulAssignment","src":"10361:48:42","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"self","nodeType":"YulIdentifier","src":"10386:4:42"},{"kind":"number","nodeType":"YulLiteral","src":"10392:2:42","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10382:3:42"},"nodeType":"YulFunctionCall","src":"10382:13:42"},{"name":"idx","nodeType":"YulIdentifier","src":"10397:3:42"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10378:3:42"},"nodeType":"YulFunctionCall","src":"10378:23:42"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10372:5:42"},"nodeType":"YulFunctionCall","src":"10372:30:42"},{"name":"mask","nodeType":"YulIdentifier","src":"10404:4:42"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10368:3:42"},"nodeType":"YulFunctionCall","src":"10368:41:42"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10361:3:42"}]}]},"evmVersion":"london","externalReferences":[{"declaration":6152,"isOffset":false,"isSlot":false,"src":"10397:3:42","valueSize":1},{"declaration":6154,"isOffset":false,"isSlot":false,"src":"10338:3:42","valueSize":1},{"declaration":6157,"isOffset":false,"isSlot":false,"src":"10361:3:42","valueSize":1},{"declaration":6150,"isOffset":false,"isSlot":false,"src":"10386:4:42","valueSize":1}],"id":6174,"nodeType":"InlineAssembly","src":"10278:141:42"}]},"id":6176,"implemented":true,"kind":"function","modifiers":[],"name":"readBytesN","nameLocation":"10075:10:42","nodeType":"FunctionDefinition","parameters":{"id":6155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6150,"mutability":"mutable","name":"self","nameLocation":"10108:4:42","nodeType":"VariableDeclaration","scope":6176,"src":"10095:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6149,"name":"bytes","nodeType":"ElementaryTypeName","src":"10095:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6152,"mutability":"mutable","name":"idx","nameLocation":"10130:3:42","nodeType":"VariableDeclaration","scope":6176,"src":"10122:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6151,"name":"uint256","nodeType":"ElementaryTypeName","src":"10122:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6154,"mutability":"mutable","name":"len","nameLocation":"10151:3:42","nodeType":"VariableDeclaration","scope":6176,"src":"10143:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6153,"name":"uint256","nodeType":"ElementaryTypeName","src":"10143:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10085:75:42"},"returnParameters":{"id":6158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6157,"mutability":"mutable","name":"ret","nameLocation":"10192:3:42","nodeType":"VariableDeclaration","scope":6176,"src":"10184:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6156,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10184:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10183:13:42"},"scope":6533,"src":"10066:359:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6217,"nodeType":"Block","src":"10500:548:42","statements":[{"body":{"id":6201,"nodeType":"Block","src":"10589:136:42","statements":[{"AST":{"nodeType":"YulBlock","src":"10612:56:42","statements":[{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"10637:4:42"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10649:3:42"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10643:5:42"},"nodeType":"YulFunctionCall","src":"10643:10:42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10630:6:42"},"nodeType":"YulFunctionCall","src":"10630:24:42"},"nodeType":"YulExpressionStatement","src":"10630:24:42"}]},"evmVersion":"london","externalReferences":[{"declaration":6178,"isOffset":false,"isSlot":false,"src":"10637:4:42","valueSize":1},{"declaration":6180,"isOffset":false,"isSlot":false,"src":"10649:3:42","valueSize":1}],"id":6192,"nodeType":"InlineAssembly","src":"10603:65:42"},{"expression":{"id":6195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6193,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6178,"src":"10681:4:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":6194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10681:10:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6196,"nodeType":"ExpressionStatement","src":"10681:10:42"},{"expression":{"id":6199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6197,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"10705:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":6198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10712:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10705:9:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6200,"nodeType":"ExpressionStatement","src":"10705:9:42"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6185,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"10567:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3332","id":6186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10574:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10567:9:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6202,"loopExpression":{"expression":{"id":6190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6188,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"10578:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3332","id":6189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10585:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10578:9:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6191,"nodeType":"ExpressionStatement","src":"10578:9:42"},"nodeType":"ForStatement","src":"10560:165:42"},{"id":6216,"nodeType":"UncheckedBlock","src":"10767:275:42","statements":[{"assignments":[6204],"declarations":[{"constant":false,"id":6204,"mutability":"mutable","name":"mask","nameLocation":"10799:4:42","nodeType":"VariableDeclaration","scope":6216,"src":"10791:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6203,"name":"uint256","nodeType":"ElementaryTypeName","src":"10791:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6214,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":6205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10807:3:42","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":6206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10815:2:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6207,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"10820:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10815:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6209,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10814:10:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10807:17:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6211,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10806:19:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":6212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10828:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10806:23:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10791:38:42"},{"AST":{"nodeType":"YulBlock","src":"10852:180:42","statements":[{"nodeType":"YulVariableDeclaration","src":"10870:41:42","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10895:3:42"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10889:5:42"},"nodeType":"YulFunctionCall","src":"10889:10:42"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"10905:4:42"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10901:3:42"},"nodeType":"YulFunctionCall","src":"10901:9:42"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10885:3:42"},"nodeType":"YulFunctionCall","src":"10885:26:42"},"variables":[{"name":"srcpart","nodeType":"YulTypedName","src":"10874:7:42","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10928:38:42","value":{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"10954:4:42"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10948:5:42"},"nodeType":"YulFunctionCall","src":"10948:11:42"},{"name":"mask","nodeType":"YulIdentifier","src":"10961:4:42"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10944:3:42"},"nodeType":"YulFunctionCall","src":"10944:22:42"},"variables":[{"name":"destpart","nodeType":"YulTypedName","src":"10932:8:42","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"10990:4:42"},{"arguments":[{"name":"destpart","nodeType":"YulIdentifier","src":"10999:8:42"},{"name":"srcpart","nodeType":"YulIdentifier","src":"11009:7:42"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"10996:2:42"},"nodeType":"YulFunctionCall","src":"10996:21:42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10983:6:42"},"nodeType":"YulFunctionCall","src":"10983:35:42"},"nodeType":"YulExpressionStatement","src":"10983:35:42"}]},"evmVersion":"london","externalReferences":[{"declaration":6178,"isOffset":false,"isSlot":false,"src":"10954:4:42","valueSize":1},{"declaration":6178,"isOffset":false,"isSlot":false,"src":"10990:4:42","valueSize":1},{"declaration":6204,"isOffset":false,"isSlot":false,"src":"10905:4:42","valueSize":1},{"declaration":6204,"isOffset":false,"isSlot":false,"src":"10961:4:42","valueSize":1},{"declaration":6180,"isOffset":false,"isSlot":false,"src":"10895:3:42","valueSize":1}],"id":6215,"nodeType":"InlineAssembly","src":"10843:189:42"}]}]},"id":6218,"implemented":true,"kind":"function","modifiers":[],"name":"memcpy","nameLocation":"10440:6:42","nodeType":"FunctionDefinition","parameters":{"id":6183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6178,"mutability":"mutable","name":"dest","nameLocation":"10455:4:42","nodeType":"VariableDeclaration","scope":6218,"src":"10447:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6177,"name":"uint256","nodeType":"ElementaryTypeName","src":"10447:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6180,"mutability":"mutable","name":"src","nameLocation":"10469:3:42","nodeType":"VariableDeclaration","scope":6218,"src":"10461:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6179,"name":"uint256","nodeType":"ElementaryTypeName","src":"10461:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6182,"mutability":"mutable","name":"len","nameLocation":"10482:3:42","nodeType":"VariableDeclaration","scope":6218,"src":"10474:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6181,"name":"uint256","nodeType":"ElementaryTypeName","src":"10474:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10446:40:42"},"returnParameters":{"id":6184,"nodeType":"ParameterList","parameters":[],"src":"10500:0:42"},"scope":6533,"src":"10431:617:42","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":6260,"nodeType":"Block","src":"11407:302:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6230,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6222,"src":"11425:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6231,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6224,"src":"11434:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11425:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":6233,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6220,"src":"11441:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11446:6:42","memberName":"length","nodeType":"MemberAccess","src":"11441:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11425:27:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6229,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11417:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11417:36:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6237,"nodeType":"ExpressionStatement","src":"11417:36:42"},{"assignments":[6239],"declarations":[{"constant":false,"id":6239,"mutability":"mutable","name":"ret","nameLocation":"11477:3:42","nodeType":"VariableDeclaration","scope":6260,"src":"11464:16:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6238,"name":"bytes","nodeType":"ElementaryTypeName","src":"11464:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6244,"initialValue":{"arguments":[{"id":6242,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6224,"src":"11493:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"11483:9:42","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":6240,"name":"bytes","nodeType":"ElementaryTypeName","src":"11487:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":6243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11483:14:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"11464:33:42"},{"assignments":[6246],"declarations":[{"constant":false,"id":6246,"mutability":"mutable","name":"dest","nameLocation":"11515:4:42","nodeType":"VariableDeclaration","scope":6260,"src":"11507:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6245,"name":"uint256","nodeType":"ElementaryTypeName","src":"11507:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6247,"nodeType":"VariableDeclarationStatement","src":"11507:12:42"},{"assignments":[6249],"declarations":[{"constant":false,"id":6249,"mutability":"mutable","name":"src","nameLocation":"11537:3:42","nodeType":"VariableDeclaration","scope":6260,"src":"11529:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6248,"name":"uint256","nodeType":"ElementaryTypeName","src":"11529:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6250,"nodeType":"VariableDeclarationStatement","src":"11529:11:42"},{"AST":{"nodeType":"YulBlock","src":"11560:90:42","statements":[{"nodeType":"YulAssignment","src":"11574:20:42","value":{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"11586:3:42"},{"kind":"number","nodeType":"YulLiteral","src":"11591:2:42","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11582:3:42"},"nodeType":"YulFunctionCall","src":"11582:12:42"},"variableNames":[{"name":"dest","nodeType":"YulIdentifier","src":"11574:4:42"}]},{"nodeType":"YulAssignment","src":"11607:33:42","value":{"arguments":[{"arguments":[{"name":"self","nodeType":"YulIdentifier","src":"11622:4:42"},{"kind":"number","nodeType":"YulLiteral","src":"11628:2:42","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11618:3:42"},"nodeType":"YulFunctionCall","src":"11618:13:42"},{"name":"offset","nodeType":"YulIdentifier","src":"11633:6:42"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11614:3:42"},"nodeType":"YulFunctionCall","src":"11614:26:42"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"11607:3:42"}]}]},"evmVersion":"london","externalReferences":[{"declaration":6246,"isOffset":false,"isSlot":false,"src":"11574:4:42","valueSize":1},{"declaration":6222,"isOffset":false,"isSlot":false,"src":"11633:6:42","valueSize":1},{"declaration":6239,"isOffset":false,"isSlot":false,"src":"11586:3:42","valueSize":1},{"declaration":6220,"isOffset":false,"isSlot":false,"src":"11622:4:42","valueSize":1},{"declaration":6249,"isOffset":false,"isSlot":false,"src":"11607:3:42","valueSize":1}],"id":6251,"nodeType":"InlineAssembly","src":"11551:99:42"},{"expression":{"arguments":[{"id":6253,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6246,"src":"11666:4:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6254,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6249,"src":"11672:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6255,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6224,"src":"11677:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6252,"name":"memcpy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6218,"src":"11659:6:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256) pure"}},"id":6256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11659:22:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6257,"nodeType":"ExpressionStatement","src":"11659:22:42"},{"expression":{"id":6258,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6239,"src":"11699:3:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6228,"id":6259,"nodeType":"Return","src":"11692:10:42"}]},"id":6261,"implemented":true,"kind":"function","modifiers":[],"name":"substring","nameLocation":"11282:9:42","nodeType":"FunctionDefinition","parameters":{"id":6225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6220,"mutability":"mutable","name":"self","nameLocation":"11314:4:42","nodeType":"VariableDeclaration","scope":6261,"src":"11301:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6219,"name":"bytes","nodeType":"ElementaryTypeName","src":"11301:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6222,"mutability":"mutable","name":"offset","nameLocation":"11336:6:42","nodeType":"VariableDeclaration","scope":6261,"src":"11328:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6221,"name":"uint256","nodeType":"ElementaryTypeName","src":"11328:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6224,"mutability":"mutable","name":"len","nameLocation":"11360:3:42","nodeType":"VariableDeclaration","scope":6261,"src":"11352:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6223,"name":"uint256","nodeType":"ElementaryTypeName","src":"11352:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:78:42"},"returnParameters":{"id":6228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6261,"src":"11393:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6226,"name":"bytes","nodeType":"ElementaryTypeName","src":"11393:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11392:14:42"},"scope":6533,"src":"11273:436:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":6264,"mutability":"constant","name":"base32HexTable","nameLocation":"11852:14:42","nodeType":"VariableDeclaration","scope":6533,"src":"11837:187:42","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6262,"name":"bytes","nodeType":"ElementaryTypeName","src":"11837:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"hexValue":"00010203040506070809ffffffffffffff0a0b0c0d0e0f101112131415161718191a1b1c1d1e1fffffffffffffffffffff0a0b0c0d0e0f101112131415161718191a1b1c1d1e1f","id":6263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"11877:147:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_9e82410dbf01e63aa72c1e18aee3deb28d15751fdce22e55714ad62f7fde606a","typeString":"literal_string hex\"00010203040506070809ffffffffffffff0a0b0c0d0e0f101112131415161718191a1b1c1d1e1fffffffffffffffffffff0a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\""}},"visibility":"internal"},{"body":{"id":6487,"nodeType":"Block","src":"12443:1318:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6277,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"12461:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3532","id":6278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12468:2:42","typeDescriptions":{"typeIdentifier":"t_rational_52_by_1","typeString":"int_const 52"},"value":"52"},"src":"12461:9:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6276,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12453:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12453:18:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6281,"nodeType":"ExpressionStatement","src":"12453:18:42"},{"assignments":[6283],"declarations":[{"constant":false,"id":6283,"mutability":"mutable","name":"ret","nameLocation":"12490:3:42","nodeType":"VariableDeclaration","scope":6487,"src":"12482:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6282,"name":"uint256","nodeType":"ElementaryTypeName","src":"12482:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6285,"initialValue":{"hexValue":"30","id":6284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12496:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12482:15:42"},{"assignments":[6287],"declarations":[{"constant":false,"id":6287,"mutability":"mutable","name":"decoded","nameLocation":"12513:7:42","nodeType":"VariableDeclaration","scope":6487,"src":"12507:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6286,"name":"uint8","nodeType":"ElementaryTypeName","src":"12507:5:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":6288,"nodeType":"VariableDeclarationStatement","src":"12507:13:42"},{"body":{"id":6357,"nodeType":"Block","src":"12564:324:42","statements":[{"assignments":[6300],"declarations":[{"constant":false,"id":6300,"mutability":"mutable","name":"char","nameLocation":"12585:4:42","nodeType":"VariableDeclaration","scope":6357,"src":"12578:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":6299,"name":"bytes1","nodeType":"ElementaryTypeName","src":"12578:6:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":6306,"initialValue":{"baseExpression":{"id":6301,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6267,"src":"12592:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6305,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6302,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6269,"src":"12597:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6303,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6290,"src":"12603:1:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12597:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12592:13:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"12578:27:42"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":6310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6308,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6300,"src":"12627:4:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783330","id":6309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12635:4:42","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"0x30"},"src":"12627:12:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":6313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6311,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6300,"src":"12643:4:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30783741","id":6312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12651:4:42","typeDescriptions":{"typeIdentifier":"t_rational_122_by_1","typeString":"int_const 122"},"value":"0x7A"},"src":"12643:12:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12627:28:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6307,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12619:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12619:37:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6316,"nodeType":"ExpressionStatement","src":"12619:37:42"},{"expression":{"id":6332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6317,"name":"decoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"12670:7:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":6320,"name":"base32HexTable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6264,"src":"12686:14:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6330,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":6325,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6300,"src":"12715:4:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":6324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12709:5:42","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6323,"name":"uint8","nodeType":"ElementaryTypeName","src":"12709:5:42","typeDescriptions":{}}},"id":6326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12709:11:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":6322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12701:7:42","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6321,"name":"uint256","nodeType":"ElementaryTypeName","src":"12701:7:42","typeDescriptions":{}}},"id":6327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12701:20:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"30783330","id":6328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12724:4:42","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"0x30"},"src":"12701:27:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12686:43:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":6319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12680:5:42","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6318,"name":"uint8","nodeType":"ElementaryTypeName","src":"12680:5:42","typeDescriptions":{}}},"id":6331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12680:50:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12670:60:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":6333,"nodeType":"ExpressionStatement","src":"12670:60:42"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6335,"name":"decoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"12752:7:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30783230","id":6336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:4:42","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"12752:15:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6334,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12744:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12744:24:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6339,"nodeType":"ExpressionStatement","src":"12744:24:42"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6340,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6290,"src":"12786:1:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6341,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"12791:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":6342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12797:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12791:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12786:12:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6347,"nodeType":"IfStatement","src":"12782:56:42","trueBody":{"id":6346,"nodeType":"Block","src":"12800:38:42","statements":[{"id":6345,"nodeType":"Break","src":"12818:5:42"}]}},{"expression":{"id":6355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6348,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"12851:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6349,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"12858:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":6350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12865:1:42","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"12858:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6352,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12857:10:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":6353,"name":"decoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"12870:7:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12857:20:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12851:26:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6356,"nodeType":"ExpressionStatement","src":"12851:26:42"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6293,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6290,"src":"12550:1:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6294,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"12554:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12550:7:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6358,"initializationExpression":{"assignments":[6290],"declarations":[{"constant":false,"id":6290,"mutability":"mutable","name":"i","nameLocation":"12543:1:42","nodeType":"VariableDeclaration","scope":6358,"src":"12535:9:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6289,"name":"uint256","nodeType":"ElementaryTypeName","src":"12535:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6292,"initialValue":{"hexValue":"30","id":6291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12547:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12535:13:42"},"loopExpression":{"expression":{"id":6297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12559:3:42","subExpression":{"id":6296,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6290,"src":"12559:1:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6298,"nodeType":"ExpressionStatement","src":"12559:3:42"},"nodeType":"ForStatement","src":"12530:358:42"},{"assignments":[6360],"declarations":[{"constant":false,"id":6360,"mutability":"mutable","name":"bitlen","nameLocation":"12906:6:42","nodeType":"VariableDeclaration","scope":6487,"src":"12898:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6359,"name":"uint256","nodeType":"ElementaryTypeName","src":"12898:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6364,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6361,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"12915:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"35","id":6362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12921:1:42","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"12915:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12898:24:42"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6365,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"12936:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"38","id":6366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12942:1:42","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12936:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12947:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12936:12:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6380,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"13063:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"38","id":6381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13069:1:42","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"13063:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":6383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13074:1:42","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13063:12:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6402,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"13215:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"38","id":6403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13221:1:42","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"13215:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"34","id":6405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13226:1:42","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"13215:12:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6424,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"13369:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"38","id":6425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13375:1:42","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"13369:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"35","id":6427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13380:1:42","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"13369:12:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6446,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"13523:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"38","id":6447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13529:1:42","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"13523:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"37","id":6449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13534:1:42","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"13523:12:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6471,"nodeType":"Block","src":"13674:33:42","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6468,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"13688:6:42","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$__$returns$__$","typeString":"function () pure"}},"id":6469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13688:8:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6470,"nodeType":"ExpressionStatement","src":"13688:8:42"}]},"id":6472,"nodeType":"IfStatement","src":"13519:188:42","trueBody":{"id":6467,"nodeType":"Block","src":"13537:131:42","statements":[{"expression":{"id":6461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6451,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13599:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6452,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13606:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":6453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13613:1:42","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13606:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6455,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13605:10:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6456,"name":"decoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"13619:7:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"33","id":6457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13630:1:42","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"13619:12:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":6459,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13618:14:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13605:27:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13599:33:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6462,"nodeType":"ExpressionStatement","src":"13599:33:42"},{"expression":{"id":6465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6463,"name":"bitlen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6360,"src":"13646:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"33","id":6464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13656:1:42","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"13646:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6466,"nodeType":"ExpressionStatement","src":"13646:11:42"}]}},"id":6473,"nodeType":"IfStatement","src":"13365:342:42","trueBody":{"id":6445,"nodeType":"Block","src":"13383:130:42","statements":[{"expression":{"id":6439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6429,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13444:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6430,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13451:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":6431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13458:1:42","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"13451:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6433,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13450:10:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6434,"name":"decoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"13464:7:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":6435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13475:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13464:12:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":6437,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13463:14:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13450:27:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13444:33:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6440,"nodeType":"ExpressionStatement","src":"13444:33:42"},{"expression":{"id":6443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6441,"name":"bitlen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6360,"src":"13491:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":6442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13501:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13491:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6444,"nodeType":"ExpressionStatement","src":"13491:11:42"}]}},"id":6474,"nodeType":"IfStatement","src":"13211:496:42","trueBody":{"id":6423,"nodeType":"Block","src":"13229:130:42","statements":[{"expression":{"id":6417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6407,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13290:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6408,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13297:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"31","id":6409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13304:1:42","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13297:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6411,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13296:10:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6412,"name":"decoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"13310:7:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":6413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13321:1:42","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"13310:12:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":6415,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13309:14:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13296:27:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13290:33:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6418,"nodeType":"ExpressionStatement","src":"13290:33:42"},{"expression":{"id":6421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6419,"name":"bitlen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6360,"src":"13337:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"34","id":6420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13347:1:42","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"13337:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6422,"nodeType":"ExpressionStatement","src":"13337:11:42"}]}},"id":6475,"nodeType":"IfStatement","src":"13059:648:42","trueBody":{"id":6401,"nodeType":"Block","src":"13077:128:42","statements":[{"expression":{"id":6395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6385,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13136:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6386,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13143:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":6387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13150:1:42","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"13143:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6389,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13142:10:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6390,"name":"decoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"13156:7:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":6391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13167:1:42","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13156:12:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":6393,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13155:14:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13142:27:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13136:33:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6396,"nodeType":"ExpressionStatement","src":"13136:33:42"},{"expression":{"id":6399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6397,"name":"bitlen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6360,"src":"13183:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"32","id":6398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13193:1:42","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13183:11:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6400,"nodeType":"ExpressionStatement","src":"13183:11:42"}]}},"id":6476,"nodeType":"IfStatement","src":"12932:775:42","trueBody":{"id":6379,"nodeType":"Block","src":"12950:103:42","statements":[{"expression":{"id":6377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6370,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13016:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6371,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13023:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":6372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13030:1:42","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"13023:8:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6374,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13022:10:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":6375,"name":"decoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"13035:7:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13022:20:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13016:26:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6378,"nodeType":"ExpressionStatement","src":"13016:26:42"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6479,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"13732:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":6480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13740:3:42","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6481,"name":"bitlen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6360,"src":"13746:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13740:12:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6483,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13739:14:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13732:21:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13724:7:42","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13724:7:42","typeDescriptions":{}}},"id":6485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13724:30:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":6275,"id":6486,"nodeType":"Return","src":"13717:37:42"}]},"documentation":{"id":6265,"nodeType":"StructuredDocumentation","src":"12031:271:42","text":" @dev Decodes unpadded base32 data of up to one word in length.\n @param self The data to decode.\n @param off Offset into the string to start at.\n @param len Number of characters to decode.\n @return The decoded data, left aligned."},"id":6488,"implemented":true,"kind":"function","modifiers":[],"name":"base32HexDecodeWord","nameLocation":"12316:19:42","nodeType":"FunctionDefinition","parameters":{"id":6272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6267,"mutability":"mutable","name":"self","nameLocation":"12358:4:42","nodeType":"VariableDeclaration","scope":6488,"src":"12345:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6266,"name":"bytes","nodeType":"ElementaryTypeName","src":"12345:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6269,"mutability":"mutable","name":"off","nameLocation":"12380:3:42","nodeType":"VariableDeclaration","scope":6488,"src":"12372:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6268,"name":"uint256","nodeType":"ElementaryTypeName","src":"12372:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6271,"mutability":"mutable","name":"len","nameLocation":"12401:3:42","nodeType":"VariableDeclaration","scope":6488,"src":"12393:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6270,"name":"uint256","nodeType":"ElementaryTypeName","src":"12393:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12335:75:42"},"returnParameters":{"id":6275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6488,"src":"12434:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6273,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12434:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12433:9:42"},"scope":6533,"src":"12307:1454:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6531,"nodeType":"Block","src":"14263:190:42","statements":[{"body":{"id":6523,"nodeType":"Block","src":"14321:92:42","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":6518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6514,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6491,"src":"14339:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6516,"indexExpression":{"id":6515,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6503,"src":"14344:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14339:9:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6517,"name":"needle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6497,"src":"14352:6:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"14339:19:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6522,"nodeType":"IfStatement","src":"14335:68:42","trueBody":{"id":6521,"nodeType":"Block","src":"14360:43:42","statements":[{"expression":{"id":6519,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6503,"src":"14385:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6501,"id":6520,"nodeType":"Return","src":"14378:10:42"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6506,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6503,"src":"14297:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6507,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6493,"src":"14303:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6508,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6495,"src":"14309:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14303:9:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14297:15:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6524,"initializationExpression":{"assignments":[6503],"declarations":[{"constant":false,"id":6503,"mutability":"mutable","name":"idx","nameLocation":"14286:3:42","nodeType":"VariableDeclaration","scope":6524,"src":"14278:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6502,"name":"uint256","nodeType":"ElementaryTypeName","src":"14278:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6505,"initialValue":{"id":6504,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6493,"src":"14292:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14278:17:42"},"loopExpression":{"expression":{"id":6512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14314:5:42","subExpression":{"id":6511,"name":"idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6503,"src":"14314:3:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6513,"nodeType":"ExpressionStatement","src":"14314:5:42"},"nodeType":"ForStatement","src":"14273:140:42"},{"expression":{"expression":{"arguments":[{"id":6527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14434:7:42","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6526,"name":"uint256","nodeType":"ElementaryTypeName","src":"14434:7:42","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":6525,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14429:4:42","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14429:13:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":6529,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14443:3:42","memberName":"max","nodeType":"MemberAccess","src":"14429:17:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6501,"id":6530,"nodeType":"Return","src":"14422:24:42"}]},"documentation":{"id":6489,"nodeType":"StructuredDocumentation","src":"13767:347:42","text":" @dev Finds the first occurrence of the byte `needle` in `self`.\n @param self The string to search\n @param off The offset to start searching at\n @param len The number of bytes to search\n @param needle The byte to search for\n @return The offset of `needle` in `self`, or 2**256-1 if it was not found."},"id":6532,"implemented":true,"kind":"function","modifiers":[],"name":"find","nameLocation":"14128:4:42","nodeType":"FunctionDefinition","parameters":{"id":6498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6491,"mutability":"mutable","name":"self","nameLocation":"14155:4:42","nodeType":"VariableDeclaration","scope":6532,"src":"14142:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6490,"name":"bytes","nodeType":"ElementaryTypeName","src":"14142:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6493,"mutability":"mutable","name":"off","nameLocation":"14177:3:42","nodeType":"VariableDeclaration","scope":6532,"src":"14169:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6492,"name":"uint256","nodeType":"ElementaryTypeName","src":"14169:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6495,"mutability":"mutable","name":"len","nameLocation":"14198:3:42","nodeType":"VariableDeclaration","scope":6532,"src":"14190:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6494,"name":"uint256","nodeType":"ElementaryTypeName","src":"14190:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6497,"mutability":"mutable","name":"needle","nameLocation":"14218:6:42","nodeType":"VariableDeclaration","scope":6532,"src":"14211:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":6496,"name":"bytes1","nodeType":"ElementaryTypeName","src":"14211:6:42","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"src":"14132:98:42"},"returnParameters":{"id":6501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6532,"src":"14254:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6499,"name":"uint256","nodeType":"ElementaryTypeName","src":"14254:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14253:9:42"},"scope":6533,"src":"14119:334:42","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6534,"src":"56:14399:42","usedErrors":[5605]}],"src":"31:14425:42"},"id":42},"contracts/wrapper/IMetadataService.sol":{"ast":{"absolutePath":"contracts/wrapper/IMetadataService.sol","exportedSymbols":{"IMetadataService":[6543]},"id":6544,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6535,"literals":["solidity","~","0.8",".17"],"nodeType":"PragmaDirective","src":"31:24:43"},{"abstract":false,"baseContracts":[],"canonicalName":"IMetadataService","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6543,"linearizedBaseContracts":[6543],"name":"IMetadataService","nameLocation":"67:16:43","nodeType":"ContractDefinition","nodes":[{"functionSelector":"0e89341c","id":6542,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"99:3:43","nodeType":"FunctionDefinition","parameters":{"id":6538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6537,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6542,"src":"103:7:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6536,"name":"uint256","nodeType":"ElementaryTypeName","src":"103:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"102:9:43"},"returnParameters":{"id":6541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6542,"src":"135:13:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6539,"name":"string","nodeType":"ElementaryTypeName","src":"135:6:43","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"134:15:43"},"scope":6543,"src":"90:60:43","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6544,"src":"57:95:43","usedErrors":[]}],"src":"31:122:43"},"id":43},"contracts/wrapper/INameWrapper.sol":{"ast":{"absolutePath":"contracts/wrapper/INameWrapper.sol","exportedSymbols":{"CANNOT_APPROVE":[6571],"CANNOT_BURN_FUSES":[6556],"CANNOT_CREATE_SUBDOMAIN":[6568],"CANNOT_SET_RESOLVER":[6562],"CANNOT_SET_TTL":[6565],"CANNOT_TRANSFER":[6559],"CANNOT_UNWRAP":[6553],"CAN_DO_EVERYTHING":[6589],"CAN_EXTEND_EXPIRY":[6586],"ENS":[3320],"IBaseRegistrar":[3183],"IERC1155":[1838],"IERC165":[1990],"IERC721":[1954],"IMetadataService":[6543],"INameWrapper":[6917],"INameWrapperUpgrade":[6935],"IS_DOT_ETH":[6581],"PARENT_CANNOT_CONTROL":[6576],"PARENT_CONTROLLED_FUSES":[6592],"USER_SETTABLE_FUSES":[6595]},"id":6918,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6545,"literals":["solidity","~","0.8",".17"],"nodeType":"PragmaDirective","src":"31:24:44"},{"absolutePath":"contracts/registry/ENS.sol","file":"../registry/ENS.sol","id":6546,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6918,"sourceUnit":3321,"src":"57:29:44","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ethregistrar/IBaseRegistrar.sol","file":"../ethregistrar/IBaseRegistrar.sol","id":6547,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6918,"sourceUnit":3184,"src":"87:44:44","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","id":6548,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6918,"sourceUnit":1839,"src":"132:60:44","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/wrapper/IMetadataService.sol","file":"./IMetadataService.sol","id":6549,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6918,"sourceUnit":6544,"src":"193:32:44","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/wrapper/INameWrapperUpgrade.sol","file":"./INameWrapperUpgrade.sol","id":6550,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6918,"sourceUnit":6936,"src":"226:35:44","symbolAliases":[],"unitAlias":""},{"constant":true,"id":6553,"mutability":"constant","name":"CANNOT_UNWRAP","nameLocation":"279:13:44","nodeType":"VariableDeclaration","scope":6918,"src":"263:33:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6551,"name":"uint32","nodeType":"ElementaryTypeName","src":"263:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":6552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"295:1:44","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":6556,"mutability":"constant","name":"CANNOT_BURN_FUSES","nameLocation":"314:17:44","nodeType":"VariableDeclaration","scope":6918,"src":"298:37:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6554,"name":"uint32","nodeType":"ElementaryTypeName","src":"298:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"32","id":6555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"334:1:44","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":6559,"mutability":"constant","name":"CANNOT_TRANSFER","nameLocation":"353:15:44","nodeType":"VariableDeclaration","scope":6918,"src":"337:35:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6557,"name":"uint32","nodeType":"ElementaryTypeName","src":"337:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"34","id":6558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"371:1:44","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"},{"constant":true,"id":6562,"mutability":"constant","name":"CANNOT_SET_RESOLVER","nameLocation":"390:19:44","nodeType":"VariableDeclaration","scope":6918,"src":"374:39:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6560,"name":"uint32","nodeType":"ElementaryTypeName","src":"374:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"38","id":6561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"412:1:44","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"visibility":"internal"},{"constant":true,"id":6565,"mutability":"constant","name":"CANNOT_SET_TTL","nameLocation":"431:14:44","nodeType":"VariableDeclaration","scope":6918,"src":"415:35:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6563,"name":"uint32","nodeType":"ElementaryTypeName","src":"415:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"3136","id":6564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"448:2:44","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"visibility":"internal"},{"constant":true,"id":6568,"mutability":"constant","name":"CANNOT_CREATE_SUBDOMAIN","nameLocation":"468:23:44","nodeType":"VariableDeclaration","scope":6918,"src":"452:44:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6566,"name":"uint32","nodeType":"ElementaryTypeName","src":"452:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"3332","id":6567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"494:2:44","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"visibility":"internal"},{"constant":true,"id":6571,"mutability":"constant","name":"CANNOT_APPROVE","nameLocation":"514:14:44","nodeType":"VariableDeclaration","scope":6918,"src":"498:35:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6569,"name":"uint32","nodeType":"ElementaryTypeName","src":"498:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"3634","id":6570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"531:2:44","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"visibility":"internal"},{"constant":true,"id":6576,"mutability":"constant","name":"PARENT_CANNOT_CONTROL","nameLocation":"619:21:44","nodeType":"VariableDeclaration","scope":6918,"src":"603:47:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6572,"name":"uint32","nodeType":"ElementaryTypeName","src":"603:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"commonType":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"id":6575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":6573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"643:1:44","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":6574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"648:2:44","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"643:7:44","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}},"visibility":"internal"},{"constant":true,"id":6581,"mutability":"constant","name":"IS_DOT_ETH","nameLocation":"668:10:44","nodeType":"VariableDeclaration","scope":6918,"src":"652:36:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6577,"name":"uint32","nodeType":"ElementaryTypeName","src":"652:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"commonType":{"typeIdentifier":"t_rational_131072_by_1","typeString":"int_const 131072"},"id":6580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":6578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"681:1:44","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3137","id":6579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"686:2:44","typeDescriptions":{"typeIdentifier":"t_rational_17_by_1","typeString":"int_const 17"},"value":"17"},"src":"681:7:44","typeDescriptions":{"typeIdentifier":"t_rational_131072_by_1","typeString":"int_const 131072"}},"visibility":"internal"},{"constant":true,"id":6586,"mutability":"constant","name":"CAN_EXTEND_EXPIRY","nameLocation":"706:17:44","nodeType":"VariableDeclaration","scope":6918,"src":"690:43:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6582,"name":"uint32","nodeType":"ElementaryTypeName","src":"690:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"commonType":{"typeIdentifier":"t_rational_262144_by_1","typeString":"int_const 262144"},"id":6585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":6583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"726:1:44","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3138","id":6584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"731:2:44","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"src":"726:7:44","typeDescriptions":{"typeIdentifier":"t_rational_262144_by_1","typeString":"int_const 262144"}},"visibility":"internal"},{"constant":true,"id":6589,"mutability":"constant","name":"CAN_DO_EVERYTHING","nameLocation":"751:17:44","nodeType":"VariableDeclaration","scope":6918,"src":"735:37:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6587,"name":"uint32","nodeType":"ElementaryTypeName","src":"735:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"30","id":6588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"771:1:44","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":6592,"mutability":"constant","name":"PARENT_CONTROLLED_FUSES","nameLocation":"790:23:44","nodeType":"VariableDeclaration","scope":6918,"src":"774:52:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6590,"name":"uint32","nodeType":"ElementaryTypeName","src":"774:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"30784646464630303030","id":6591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"816:10:44","typeDescriptions":{"typeIdentifier":"t_rational_4294901760_by_1","typeString":"int_const 4294901760"},"value":"0xFFFF0000"},"visibility":"internal"},{"constant":true,"id":6595,"mutability":"constant","name":"USER_SETTABLE_FUSES","nameLocation":"879:19:44","nodeType":"VariableDeclaration","scope":6918,"src":"863:48:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6593,"name":"uint32","nodeType":"ElementaryTypeName","src":"863:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"30784646464446464646","id":6594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"901:10:44","typeDescriptions":{"typeIdentifier":"t_rational_4294836223_by_1","typeString":"int_const 4294836223"},"value":"0xFFFDFFFF"},"visibility":"internal"},{"abstract":false,"baseContracts":[{"baseName":{"id":6596,"name":"IERC1155","nameLocations":["940:8:44"],"nodeType":"IdentifierPath","referencedDeclaration":1838,"src":"940:8:44"},"id":6597,"nodeType":"InheritanceSpecifier","src":"940:8:44"}],"canonicalName":"INameWrapper","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6917,"linearizedBaseContracts":[6917,1838,1990],"name":"INameWrapper","nameLocation":"924:12:44","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"8ce7013e8abebc55c3890a68f5a27c67c3f7efa64e584de5fb22363c606fd340","id":6609,"name":"NameWrapped","nameLocation":"961:11:44","nodeType":"EventDefinition","parameters":{"id":6608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6599,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"998:4:44","nodeType":"VariableDeclaration","scope":6609,"src":"982:20:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6598,"name":"bytes32","nodeType":"ElementaryTypeName","src":"982:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6601,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"1018:4:44","nodeType":"VariableDeclaration","scope":6609,"src":"1012:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6600,"name":"bytes","nodeType":"ElementaryTypeName","src":"1012:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6603,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"1040:5:44","nodeType":"VariableDeclaration","scope":6609,"src":"1032:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6602,"name":"address","nodeType":"ElementaryTypeName","src":"1032:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6605,"indexed":false,"mutability":"mutable","name":"fuses","nameLocation":"1062:5:44","nodeType":"VariableDeclaration","scope":6609,"src":"1055:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6604,"name":"uint32","nodeType":"ElementaryTypeName","src":"1055:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6607,"indexed":false,"mutability":"mutable","name":"expiry","nameLocation":"1084:6:44","nodeType":"VariableDeclaration","scope":6609,"src":"1077:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6606,"name":"uint64","nodeType":"ElementaryTypeName","src":"1077:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"972:124:44"},"src":"955:142:44"},{"anonymous":false,"eventSelector":"ee2ba1195c65bcf218a83d874335c6bf9d9067b4c672f3c3bf16cf40de7586c4","id":6615,"name":"NameUnwrapped","nameLocation":"1109:13:44","nodeType":"EventDefinition","parameters":{"id":6614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6611,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"1139:4:44","nodeType":"VariableDeclaration","scope":6615,"src":"1123:20:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1123:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6613,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"1153:5:44","nodeType":"VariableDeclaration","scope":6615,"src":"1145:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6612,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1122:37:44"},"src":"1103:57:44"},{"anonymous":false,"eventSelector":"39873f00c80f4f94b7bd1594aebcf650f003545b74824d57ddf4939e3ff3a34b","id":6621,"name":"FusesSet","nameLocation":"1172:8:44","nodeType":"EventDefinition","parameters":{"id":6620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6617,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"1197:4:44","nodeType":"VariableDeclaration","scope":6621,"src":"1181:20:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6619,"indexed":false,"mutability":"mutable","name":"fuses","nameLocation":"1210:5:44","nodeType":"VariableDeclaration","scope":6621,"src":"1203:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6618,"name":"uint32","nodeType":"ElementaryTypeName","src":"1203:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1180:36:44"},"src":"1166:51:44"},{"anonymous":false,"eventSelector":"f675815a0817338f93a7da433f6bd5f5542f1029b11b455191ac96c7f6a9b132","id":6627,"name":"ExpiryExtended","nameLocation":"1228:14:44","nodeType":"EventDefinition","parameters":{"id":6626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6623,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"1259:4:44","nodeType":"VariableDeclaration","scope":6627,"src":"1243:20:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1243:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6625,"indexed":false,"mutability":"mutable","name":"expiry","nameLocation":"1272:6:44","nodeType":"VariableDeclaration","scope":6627,"src":"1265:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6624,"name":"uint64","nodeType":"ElementaryTypeName","src":"1265:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1242:37:44"},"src":"1222:58:44"},{"functionSelector":"3f15457f","id":6633,"implemented":false,"kind":"function","modifiers":[],"name":"ens","nameLocation":"1295:3:44","nodeType":"FunctionDefinition","parameters":{"id":6628,"nodeType":"ParameterList","parameters":[],"src":"1298:2:44"},"returnParameters":{"id":6632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6631,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6633,"src":"1324:3:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"},"typeName":{"id":6630,"nodeType":"UserDefinedTypeName","pathNode":{"id":6629,"name":"ENS","nameLocations":["1324:3:44"],"nodeType":"IdentifierPath","referencedDeclaration":3320,"src":"1324:3:44"},"referencedDeclaration":3320,"src":"1324:3:44","typeDescriptions":{"typeIdentifier":"t_contract$_ENS_$3320","typeString":"contract ENS"}},"visibility":"internal"}],"src":"1323:5:44"},"scope":6917,"src":"1286:43:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"2b20e397","id":6639,"implemented":false,"kind":"function","modifiers":[],"name":"registrar","nameLocation":"1344:9:44","nodeType":"FunctionDefinition","parameters":{"id":6634,"nodeType":"ParameterList","parameters":[],"src":"1353:2:44"},"returnParameters":{"id":6638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6637,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6639,"src":"1379:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBaseRegistrar_$3183","typeString":"contract IBaseRegistrar"},"typeName":{"id":6636,"nodeType":"UserDefinedTypeName","pathNode":{"id":6635,"name":"IBaseRegistrar","nameLocations":["1379:14:44"],"nodeType":"IdentifierPath","referencedDeclaration":3183,"src":"1379:14:44"},"referencedDeclaration":3183,"src":"1379:14:44","typeDescriptions":{"typeIdentifier":"t_contract$_IBaseRegistrar_$3183","typeString":"contract IBaseRegistrar"}},"visibility":"internal"}],"src":"1378:16:44"},"scope":6917,"src":"1335:60:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"53095467","id":6645,"implemented":false,"kind":"function","modifiers":[],"name":"metadataService","nameLocation":"1410:15:44","nodeType":"FunctionDefinition","parameters":{"id":6640,"nodeType":"ParameterList","parameters":[],"src":"1425:2:44"},"returnParameters":{"id":6644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6645,"src":"1451:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMetadataService_$6543","typeString":"contract IMetadataService"},"typeName":{"id":6642,"nodeType":"UserDefinedTypeName","pathNode":{"id":6641,"name":"IMetadataService","nameLocations":["1451:16:44"],"nodeType":"IdentifierPath","referencedDeclaration":6543,"src":"1451:16:44"},"referencedDeclaration":6543,"src":"1451:16:44","typeDescriptions":{"typeIdentifier":"t_contract$_IMetadataService_$6543","typeString":"contract IMetadataService"}},"visibility":"internal"}],"src":"1450:18:44"},"scope":6917,"src":"1401:68:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"20c38e2b","id":6652,"implemented":false,"kind":"function","modifiers":[],"name":"names","nameLocation":"1484:5:44","nodeType":"FunctionDefinition","parameters":{"id":6648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6647,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6652,"src":"1490:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1490:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1489:9:44"},"returnParameters":{"id":6651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6650,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6652,"src":"1522:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6649,"name":"bytes","nodeType":"ElementaryTypeName","src":"1522:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1521:14:44"},"scope":6917,"src":"1475:61:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"06fdde03","id":6657,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"1551:4:44","nodeType":"FunctionDefinition","parameters":{"id":6653,"nodeType":"ParameterList","parameters":[],"src":"1555:2:44"},"returnParameters":{"id":6656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6657,"src":"1581:13:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6654,"name":"string","nodeType":"ElementaryTypeName","src":"1581:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1580:15:44"},"scope":6917,"src":"1542:54:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1f4e1504","id":6663,"implemented":false,"kind":"function","modifiers":[],"name":"upgradeContract","nameLocation":"1611:15:44","nodeType":"FunctionDefinition","parameters":{"id":6658,"nodeType":"ParameterList","parameters":[],"src":"1626:2:44"},"returnParameters":{"id":6662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6663,"src":"1652:19:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapperUpgrade_$6935","typeString":"contract INameWrapperUpgrade"},"typeName":{"id":6660,"nodeType":"UserDefinedTypeName","pathNode":{"id":6659,"name":"INameWrapperUpgrade","nameLocations":["1652:19:44"],"nodeType":"IdentifierPath","referencedDeclaration":6935,"src":"1652:19:44"},"referencedDeclaration":6935,"src":"1652:19:44","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapperUpgrade_$6935","typeString":"contract INameWrapperUpgrade"}},"visibility":"internal"}],"src":"1651:21:44"},"scope":6917,"src":"1602:71:44","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1989],"functionSelector":"01ffc9a7","id":6670,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1688:17:44","nodeType":"FunctionDefinition","parameters":{"id":6666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6665,"mutability":"mutable","name":"interfaceID","nameLocation":"1713:11:44","nodeType":"VariableDeclaration","scope":6670,"src":"1706:18:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":6664,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1706:6:44","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1705:20:44"},"returnParameters":{"id":6669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6670,"src":"1749:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6667,"name":"bool","nodeType":"ElementaryTypeName","src":"1749:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1748:6:44"},"scope":6917,"src":"1679:76:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"eb8ae530","id":6679,"implemented":false,"kind":"function","modifiers":[],"name":"wrap","nameLocation":"1770:4:44","nodeType":"FunctionDefinition","parameters":{"id":6677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6672,"mutability":"mutable","name":"name","nameLocation":"1799:4:44","nodeType":"VariableDeclaration","scope":6679,"src":"1784:19:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6671,"name":"bytes","nodeType":"ElementaryTypeName","src":"1784:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6674,"mutability":"mutable","name":"wrappedOwner","nameLocation":"1821:12:44","nodeType":"VariableDeclaration","scope":6679,"src":"1813:20:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6673,"name":"address","nodeType":"ElementaryTypeName","src":"1813:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6676,"mutability":"mutable","name":"resolver","nameLocation":"1851:8:44","nodeType":"VariableDeclaration","scope":6679,"src":"1843:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6675,"name":"address","nodeType":"ElementaryTypeName","src":"1843:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1774:91:44"},"returnParameters":{"id":6678,"nodeType":"ParameterList","parameters":[],"src":"1874:0:44"},"scope":6917,"src":"1761:114:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8cf8b41e","id":6692,"implemented":false,"kind":"function","modifiers":[],"name":"wrapETH2LD","nameLocation":"1890:10:44","nodeType":"FunctionDefinition","parameters":{"id":6688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6681,"mutability":"mutable","name":"label","nameLocation":"1926:5:44","nodeType":"VariableDeclaration","scope":6692,"src":"1910:21:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":6680,"name":"string","nodeType":"ElementaryTypeName","src":"1910:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6683,"mutability":"mutable","name":"wrappedOwner","nameLocation":"1949:12:44","nodeType":"VariableDeclaration","scope":6692,"src":"1941:20:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6682,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6685,"mutability":"mutable","name":"ownerControlledFuses","nameLocation":"1978:20:44","nodeType":"VariableDeclaration","scope":6692,"src":"1971:27:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6684,"name":"uint16","nodeType":"ElementaryTypeName","src":"1971:6:44","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6687,"mutability":"mutable","name":"resolver","nameLocation":"2016:8:44","nodeType":"VariableDeclaration","scope":6692,"src":"2008:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6686,"name":"address","nodeType":"ElementaryTypeName","src":"2008:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1900:130:44"},"returnParameters":{"id":6691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6690,"mutability":"mutable","name":"expires","nameLocation":"2056:7:44","nodeType":"VariableDeclaration","scope":6692,"src":"2049:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6689,"name":"uint64","nodeType":"ElementaryTypeName","src":"2049:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2048:16:44"},"scope":6917,"src":"1881:184:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a4014982","id":6707,"implemented":false,"kind":"function","modifiers":[],"name":"registerAndWrapETH2LD","nameLocation":"2080:21:44","nodeType":"FunctionDefinition","parameters":{"id":6703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6694,"mutability":"mutable","name":"label","nameLocation":"2127:5:44","nodeType":"VariableDeclaration","scope":6707,"src":"2111:21:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":6693,"name":"string","nodeType":"ElementaryTypeName","src":"2111:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6696,"mutability":"mutable","name":"wrappedOwner","nameLocation":"2150:12:44","nodeType":"VariableDeclaration","scope":6707,"src":"2142:20:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6695,"name":"address","nodeType":"ElementaryTypeName","src":"2142:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6698,"mutability":"mutable","name":"duration","nameLocation":"2180:8:44","nodeType":"VariableDeclaration","scope":6707,"src":"2172:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6697,"name":"uint256","nodeType":"ElementaryTypeName","src":"2172:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6700,"mutability":"mutable","name":"resolver","nameLocation":"2206:8:44","nodeType":"VariableDeclaration","scope":6707,"src":"2198:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6699,"name":"address","nodeType":"ElementaryTypeName","src":"2198:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6702,"mutability":"mutable","name":"ownerControlledFuses","nameLocation":"2231:20:44","nodeType":"VariableDeclaration","scope":6707,"src":"2224:27:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6701,"name":"uint16","nodeType":"ElementaryTypeName","src":"2224:6:44","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"2101:156:44"},"returnParameters":{"id":6706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6705,"mutability":"mutable","name":"registrarExpiry","nameLocation":"2284:15:44","nodeType":"VariableDeclaration","scope":6707,"src":"2276:23:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6704,"name":"uint256","nodeType":"ElementaryTypeName","src":"2276:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2275:25:44"},"scope":6917,"src":"2071:230:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c475abff","id":6716,"implemented":false,"kind":"function","modifiers":[],"name":"renew","nameLocation":"2316:5:44","nodeType":"FunctionDefinition","parameters":{"id":6712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6709,"mutability":"mutable","name":"labelHash","nameLocation":"2339:9:44","nodeType":"VariableDeclaration","scope":6716,"src":"2331:17:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6708,"name":"uint256","nodeType":"ElementaryTypeName","src":"2331:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6711,"mutability":"mutable","name":"duration","nameLocation":"2366:8:44","nodeType":"VariableDeclaration","scope":6716,"src":"2358:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6710,"name":"uint256","nodeType":"ElementaryTypeName","src":"2358:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2321:59:44"},"returnParameters":{"id":6715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6714,"mutability":"mutable","name":"expires","nameLocation":"2407:7:44","nodeType":"VariableDeclaration","scope":6716,"src":"2399:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6713,"name":"uint256","nodeType":"ElementaryTypeName","src":"2399:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2398:17:44"},"scope":6917,"src":"2307:109:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d8c9921a","id":6725,"implemented":false,"kind":"function","modifiers":[],"name":"unwrap","nameLocation":"2431:6:44","nodeType":"FunctionDefinition","parameters":{"id":6723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6718,"mutability":"mutable","name":"node","nameLocation":"2446:4:44","nodeType":"VariableDeclaration","scope":6725,"src":"2438:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6717,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2438:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6720,"mutability":"mutable","name":"label","nameLocation":"2460:5:44","nodeType":"VariableDeclaration","scope":6725,"src":"2452:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2452:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6722,"mutability":"mutable","name":"owner","nameLocation":"2475:5:44","nodeType":"VariableDeclaration","scope":6725,"src":"2467:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6721,"name":"address","nodeType":"ElementaryTypeName","src":"2467:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2437:44:44"},"returnParameters":{"id":6724,"nodeType":"ParameterList","parameters":[],"src":"2490:0:44"},"scope":6917,"src":"2422:69:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8b4dfa75","id":6734,"implemented":false,"kind":"function","modifiers":[],"name":"unwrapETH2LD","nameLocation":"2506:12:44","nodeType":"FunctionDefinition","parameters":{"id":6732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6727,"mutability":"mutable","name":"label","nameLocation":"2536:5:44","nodeType":"VariableDeclaration","scope":6734,"src":"2528:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2528:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6729,"mutability":"mutable","name":"newRegistrant","nameLocation":"2559:13:44","nodeType":"VariableDeclaration","scope":6734,"src":"2551:21:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6728,"name":"address","nodeType":"ElementaryTypeName","src":"2551:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6731,"mutability":"mutable","name":"newController","nameLocation":"2590:13:44","nodeType":"VariableDeclaration","scope":6734,"src":"2582:21:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6730,"name":"address","nodeType":"ElementaryTypeName","src":"2582:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2518:91:44"},"returnParameters":{"id":6733,"nodeType":"ParameterList","parameters":[],"src":"2618:0:44"},"scope":6917,"src":"2497:122:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c93ab3fd","id":6741,"implemented":false,"kind":"function","modifiers":[],"name":"upgrade","nameLocation":"2634:7:44","nodeType":"FunctionDefinition","parameters":{"id":6739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6736,"mutability":"mutable","name":"name","nameLocation":"2657:4:44","nodeType":"VariableDeclaration","scope":6741,"src":"2642:19:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6735,"name":"bytes","nodeType":"ElementaryTypeName","src":"2642:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6738,"mutability":"mutable","name":"extraData","nameLocation":"2678:9:44","nodeType":"VariableDeclaration","scope":6741,"src":"2663:24:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6737,"name":"bytes","nodeType":"ElementaryTypeName","src":"2663:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2641:47:44"},"returnParameters":{"id":6740,"nodeType":"ParameterList","parameters":[],"src":"2697:0:44"},"scope":6917,"src":"2625:73:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"402906fc","id":6750,"implemented":false,"kind":"function","modifiers":[],"name":"setFuses","nameLocation":"2713:8:44","nodeType":"FunctionDefinition","parameters":{"id":6746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6743,"mutability":"mutable","name":"node","nameLocation":"2739:4:44","nodeType":"VariableDeclaration","scope":6750,"src":"2731:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2731:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6745,"mutability":"mutable","name":"ownerControlledFuses","nameLocation":"2760:20:44","nodeType":"VariableDeclaration","scope":6750,"src":"2753:27:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6744,"name":"uint16","nodeType":"ElementaryTypeName","src":"2753:6:44","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"2721:65:44"},"returnParameters":{"id":6749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6748,"mutability":"mutable","name":"newFuses","nameLocation":"2812:8:44","nodeType":"VariableDeclaration","scope":6750,"src":"2805:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6747,"name":"uint32","nodeType":"ElementaryTypeName","src":"2805:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2804:17:44"},"scope":6917,"src":"2704:118:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"33c69ea9","id":6761,"implemented":false,"kind":"function","modifiers":[],"name":"setChildFuses","nameLocation":"2837:13:44","nodeType":"FunctionDefinition","parameters":{"id":6759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6752,"mutability":"mutable","name":"parentNode","nameLocation":"2868:10:44","nodeType":"VariableDeclaration","scope":6761,"src":"2860:18:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6751,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2860:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6754,"mutability":"mutable","name":"labelhash","nameLocation":"2896:9:44","nodeType":"VariableDeclaration","scope":6761,"src":"2888:17:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6753,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6756,"mutability":"mutable","name":"fuses","nameLocation":"2922:5:44","nodeType":"VariableDeclaration","scope":6761,"src":"2915:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6755,"name":"uint32","nodeType":"ElementaryTypeName","src":"2915:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6758,"mutability":"mutable","name":"expiry","nameLocation":"2944:6:44","nodeType":"VariableDeclaration","scope":6761,"src":"2937:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6757,"name":"uint64","nodeType":"ElementaryTypeName","src":"2937:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2850:106:44"},"returnParameters":{"id":6760,"nodeType":"ParameterList","parameters":[],"src":"2965:0:44"},"scope":6917,"src":"2828:138:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"24c1af44","id":6780,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeRecord","nameLocation":"2981:16:44","nodeType":"FunctionDefinition","parameters":{"id":6776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6763,"mutability":"mutable","name":"node","nameLocation":"3015:4:44","nodeType":"VariableDeclaration","scope":6780,"src":"3007:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6762,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3007:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6765,"mutability":"mutable","name":"label","nameLocation":"3045:5:44","nodeType":"VariableDeclaration","scope":6780,"src":"3029:21:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":6764,"name":"string","nodeType":"ElementaryTypeName","src":"3029:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6767,"mutability":"mutable","name":"owner","nameLocation":"3068:5:44","nodeType":"VariableDeclaration","scope":6780,"src":"3060:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6766,"name":"address","nodeType":"ElementaryTypeName","src":"3060:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6769,"mutability":"mutable","name":"resolver","nameLocation":"3091:8:44","nodeType":"VariableDeclaration","scope":6780,"src":"3083:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6768,"name":"address","nodeType":"ElementaryTypeName","src":"3083:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6771,"mutability":"mutable","name":"ttl","nameLocation":"3116:3:44","nodeType":"VariableDeclaration","scope":6780,"src":"3109:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6770,"name":"uint64","nodeType":"ElementaryTypeName","src":"3109:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6773,"mutability":"mutable","name":"fuses","nameLocation":"3136:5:44","nodeType":"VariableDeclaration","scope":6780,"src":"3129:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6772,"name":"uint32","nodeType":"ElementaryTypeName","src":"3129:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6775,"mutability":"mutable","name":"expiry","nameLocation":"3158:6:44","nodeType":"VariableDeclaration","scope":6780,"src":"3151:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6774,"name":"uint64","nodeType":"ElementaryTypeName","src":"3151:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2997:173:44"},"returnParameters":{"id":6779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6780,"src":"3189:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6777,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3189:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3188:9:44"},"scope":6917,"src":"2972:226:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"cf408823","id":6791,"implemented":false,"kind":"function","modifiers":[],"name":"setRecord","nameLocation":"3213:9:44","nodeType":"FunctionDefinition","parameters":{"id":6789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6782,"mutability":"mutable","name":"node","nameLocation":"3240:4:44","nodeType":"VariableDeclaration","scope":6791,"src":"3232:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3232:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6784,"mutability":"mutable","name":"owner","nameLocation":"3262:5:44","nodeType":"VariableDeclaration","scope":6791,"src":"3254:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6783,"name":"address","nodeType":"ElementaryTypeName","src":"3254:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6786,"mutability":"mutable","name":"resolver","nameLocation":"3285:8:44","nodeType":"VariableDeclaration","scope":6791,"src":"3277:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6785,"name":"address","nodeType":"ElementaryTypeName","src":"3277:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6788,"mutability":"mutable","name":"ttl","nameLocation":"3310:3:44","nodeType":"VariableDeclaration","scope":6791,"src":"3303:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6787,"name":"uint64","nodeType":"ElementaryTypeName","src":"3303:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3222:97:44"},"returnParameters":{"id":6790,"nodeType":"ParameterList","parameters":[],"src":"3328:0:44"},"scope":6917,"src":"3204:125:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c658e086","id":6806,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeOwner","nameLocation":"3344:15:44","nodeType":"FunctionDefinition","parameters":{"id":6802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6793,"mutability":"mutable","name":"node","nameLocation":"3377:4:44","nodeType":"VariableDeclaration","scope":6806,"src":"3369:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6792,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3369:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6795,"mutability":"mutable","name":"label","nameLocation":"3407:5:44","nodeType":"VariableDeclaration","scope":6806,"src":"3391:21:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":6794,"name":"string","nodeType":"ElementaryTypeName","src":"3391:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6797,"mutability":"mutable","name":"newOwner","nameLocation":"3430:8:44","nodeType":"VariableDeclaration","scope":6806,"src":"3422:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6796,"name":"address","nodeType":"ElementaryTypeName","src":"3422:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6799,"mutability":"mutable","name":"fuses","nameLocation":"3455:5:44","nodeType":"VariableDeclaration","scope":6806,"src":"3448:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6798,"name":"uint32","nodeType":"ElementaryTypeName","src":"3448:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6801,"mutability":"mutable","name":"expiry","nameLocation":"3477:6:44","nodeType":"VariableDeclaration","scope":6806,"src":"3470:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6800,"name":"uint64","nodeType":"ElementaryTypeName","src":"3470:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3359:130:44"},"returnParameters":{"id":6805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6806,"src":"3508:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6803,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3508:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3507:9:44"},"scope":6917,"src":"3335:182:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6e5d6ad2","id":6817,"implemented":false,"kind":"function","modifiers":[],"name":"extendExpiry","nameLocation":"3532:12:44","nodeType":"FunctionDefinition","parameters":{"id":6813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6808,"mutability":"mutable","name":"node","nameLocation":"3562:4:44","nodeType":"VariableDeclaration","scope":6817,"src":"3554:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6807,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3554:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6810,"mutability":"mutable","name":"labelhash","nameLocation":"3584:9:44","nodeType":"VariableDeclaration","scope":6817,"src":"3576:17:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6809,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3576:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6812,"mutability":"mutable","name":"expiry","nameLocation":"3610:6:44","nodeType":"VariableDeclaration","scope":6817,"src":"3603:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6811,"name":"uint64","nodeType":"ElementaryTypeName","src":"3603:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3544:78:44"},"returnParameters":{"id":6816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6817,"src":"3641:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6814,"name":"uint64","nodeType":"ElementaryTypeName","src":"3641:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3640:8:44"},"scope":6917,"src":"3523:126:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"41415eab","id":6826,"implemented":false,"kind":"function","modifiers":[],"name":"canModifyName","nameLocation":"3664:13:44","nodeType":"FunctionDefinition","parameters":{"id":6822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6819,"mutability":"mutable","name":"node","nameLocation":"3695:4:44","nodeType":"VariableDeclaration","scope":6826,"src":"3687:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6818,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3687:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6821,"mutability":"mutable","name":"addr","nameLocation":"3717:4:44","nodeType":"VariableDeclaration","scope":6826,"src":"3709:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6820,"name":"address","nodeType":"ElementaryTypeName","src":"3709:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3677:50:44"},"returnParameters":{"id":6825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6824,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6826,"src":"3751:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6823,"name":"bool","nodeType":"ElementaryTypeName","src":"3751:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3750:6:44"},"scope":6917,"src":"3655:102:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1896f70a","id":6833,"implemented":false,"kind":"function","modifiers":[],"name":"setResolver","nameLocation":"3772:11:44","nodeType":"FunctionDefinition","parameters":{"id":6831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6828,"mutability":"mutable","name":"node","nameLocation":"3792:4:44","nodeType":"VariableDeclaration","scope":6833,"src":"3784:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6827,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3784:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6830,"mutability":"mutable","name":"resolver","nameLocation":"3806:8:44","nodeType":"VariableDeclaration","scope":6833,"src":"3798:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6829,"name":"address","nodeType":"ElementaryTypeName","src":"3798:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3783:32:44"},"returnParameters":{"id":6832,"nodeType":"ParameterList","parameters":[],"src":"3824:0:44"},"scope":6917,"src":"3763:62:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"14ab9038","id":6840,"implemented":false,"kind":"function","modifiers":[],"name":"setTTL","nameLocation":"3840:6:44","nodeType":"FunctionDefinition","parameters":{"id":6838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6835,"mutability":"mutable","name":"node","nameLocation":"3855:4:44","nodeType":"VariableDeclaration","scope":6840,"src":"3847:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6834,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3847:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6837,"mutability":"mutable","name":"ttl","nameLocation":"3868:3:44","nodeType":"VariableDeclaration","scope":6840,"src":"3861:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6836,"name":"uint64","nodeType":"ElementaryTypeName","src":"3861:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3846:26:44"},"returnParameters":{"id":6839,"nodeType":"ParameterList","parameters":[],"src":"3881:0:44"},"scope":6917,"src":"3831:51:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6352211e","id":6847,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"3897:7:44","nodeType":"FunctionDefinition","parameters":{"id":6843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6842,"mutability":"mutable","name":"id","nameLocation":"3913:2:44","nodeType":"VariableDeclaration","scope":6847,"src":"3905:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6841,"name":"uint256","nodeType":"ElementaryTypeName","src":"3905:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3904:12:44"},"returnParameters":{"id":6846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6845,"mutability":"mutable","name":"owner","nameLocation":"3948:5:44","nodeType":"VariableDeclaration","scope":6847,"src":"3940:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6844,"name":"address","nodeType":"ElementaryTypeName","src":"3940:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3939:15:44"},"scope":6917,"src":"3888:67:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":6854,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3970:7:44","nodeType":"FunctionDefinition","parameters":{"id":6852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6849,"mutability":"mutable","name":"to","nameLocation":"3986:2:44","nodeType":"VariableDeclaration","scope":6854,"src":"3978:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6848,"name":"address","nodeType":"ElementaryTypeName","src":"3978:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6851,"mutability":"mutable","name":"tokenId","nameLocation":"3998:7:44","nodeType":"VariableDeclaration","scope":6854,"src":"3990:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6850,"name":"uint256","nodeType":"ElementaryTypeName","src":"3990:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3977:29:44"},"returnParameters":{"id":6853,"nodeType":"ParameterList","parameters":[],"src":"4015:0:44"},"scope":6917,"src":"3961:55:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"081812fc","id":6861,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4031:11:44","nodeType":"FunctionDefinition","parameters":{"id":6857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6856,"mutability":"mutable","name":"tokenId","nameLocation":"4051:7:44","nodeType":"VariableDeclaration","scope":6861,"src":"4043:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6855,"name":"uint256","nodeType":"ElementaryTypeName","src":"4043:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4042:17:44"},"returnParameters":{"id":6860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6859,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6861,"src":"4083:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6858,"name":"address","nodeType":"ElementaryTypeName","src":"4083:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4082:9:44"},"scope":6917,"src":"4022:70:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0178fe3f","id":6872,"implemented":false,"kind":"function","modifiers":[],"name":"getData","nameLocation":"4107:7:44","nodeType":"FunctionDefinition","parameters":{"id":6864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6863,"mutability":"mutable","name":"id","nameLocation":"4132:2:44","nodeType":"VariableDeclaration","scope":6872,"src":"4124:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6862,"name":"uint256","nodeType":"ElementaryTypeName","src":"4124:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4114:26:44"},"returnParameters":{"id":6871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6866,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6872,"src":"4164:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6865,"name":"address","nodeType":"ElementaryTypeName","src":"4164:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6868,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6872,"src":"4173:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6867,"name":"uint32","nodeType":"ElementaryTypeName","src":"4173:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6872,"src":"4181:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6869,"name":"uint64","nodeType":"ElementaryTypeName","src":"4181:6:44","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4163:25:44"},"scope":6917,"src":"4098:91:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1534e177","id":6878,"implemented":false,"kind":"function","modifiers":[],"name":"setMetadataService","nameLocation":"4204:18:44","nodeType":"FunctionDefinition","parameters":{"id":6876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6875,"mutability":"mutable","name":"_metadataService","nameLocation":"4240:16:44","nodeType":"VariableDeclaration","scope":6878,"src":"4223:33:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMetadataService_$6543","typeString":"contract IMetadataService"},"typeName":{"id":6874,"nodeType":"UserDefinedTypeName","pathNode":{"id":6873,"name":"IMetadataService","nameLocations":["4223:16:44"],"nodeType":"IdentifierPath","referencedDeclaration":6543,"src":"4223:16:44"},"referencedDeclaration":6543,"src":"4223:16:44","typeDescriptions":{"typeIdentifier":"t_contract$_IMetadataService_$6543","typeString":"contract IMetadataService"}},"visibility":"internal"}],"src":"4222:35:44"},"returnParameters":{"id":6877,"nodeType":"ParameterList","parameters":[],"src":"4266:0:44"},"scope":6917,"src":"4195:72:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"0e89341c","id":6885,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"4282:3:44","nodeType":"FunctionDefinition","parameters":{"id":6881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6880,"mutability":"mutable","name":"tokenId","nameLocation":"4294:7:44","nodeType":"VariableDeclaration","scope":6885,"src":"4286:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6879,"name":"uint256","nodeType":"ElementaryTypeName","src":"4286:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4285:17:44"},"returnParameters":{"id":6884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6885,"src":"4326:13:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6882,"name":"string","nodeType":"ElementaryTypeName","src":"4326:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4325:15:44"},"scope":6917,"src":"4273:68:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b6bcad26","id":6891,"implemented":false,"kind":"function","modifiers":[],"name":"setUpgradeContract","nameLocation":"4356:18:44","nodeType":"FunctionDefinition","parameters":{"id":6889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6888,"mutability":"mutable","name":"_upgradeAddress","nameLocation":"4395:15:44","nodeType":"VariableDeclaration","scope":6891,"src":"4375:35:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapperUpgrade_$6935","typeString":"contract INameWrapperUpgrade"},"typeName":{"id":6887,"nodeType":"UserDefinedTypeName","pathNode":{"id":6886,"name":"INameWrapperUpgrade","nameLocations":["4375:19:44"],"nodeType":"IdentifierPath","referencedDeclaration":6935,"src":"4375:19:44"},"referencedDeclaration":6935,"src":"4375:19:44","typeDescriptions":{"typeIdentifier":"t_contract$_INameWrapperUpgrade_$6935","typeString":"contract INameWrapperUpgrade"}},"visibility":"internal"}],"src":"4374:37:44"},"returnParameters":{"id":6890,"nodeType":"ParameterList","parameters":[],"src":"4420:0:44"},"scope":6917,"src":"4347:74:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"adf4960a","id":6900,"implemented":false,"kind":"function","modifiers":[],"name":"allFusesBurned","nameLocation":"4436:14:44","nodeType":"FunctionDefinition","parameters":{"id":6896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6893,"mutability":"mutable","name":"node","nameLocation":"4468:4:44","nodeType":"VariableDeclaration","scope":6900,"src":"4460:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6892,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4460:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6895,"mutability":"mutable","name":"fuseMask","nameLocation":"4489:8:44","nodeType":"VariableDeclaration","scope":6900,"src":"4482:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6894,"name":"uint32","nodeType":"ElementaryTypeName","src":"4482:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4450:53:44"},"returnParameters":{"id":6899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6898,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6900,"src":"4527:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6897,"name":"bool","nodeType":"ElementaryTypeName","src":"4527:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4526:6:44"},"scope":6917,"src":"4427:106:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"fd0cd0d9","id":6907,"implemented":false,"kind":"function","modifiers":[],"name":"isWrapped","nameLocation":"4548:9:44","nodeType":"FunctionDefinition","parameters":{"id":6903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6907,"src":"4558:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4558:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4557:9:44"},"returnParameters":{"id":6906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6905,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6907,"src":"4590:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6904,"name":"bool","nodeType":"ElementaryTypeName","src":"4590:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4589:6:44"},"scope":6917,"src":"4539:57:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d9a50c12","id":6916,"implemented":false,"kind":"function","modifiers":[],"name":"isWrapped","nameLocation":"4611:9:44","nodeType":"FunctionDefinition","parameters":{"id":6912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6916,"src":"4621:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6908,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4621:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6911,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6916,"src":"4630:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6910,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4620:18:44"},"returnParameters":{"id":6915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6914,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6916,"src":"4662:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6913,"name":"bool","nodeType":"ElementaryTypeName","src":"4662:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4661:6:44"},"scope":6917,"src":"4602:66:44","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6918,"src":"914:3756:44","usedErrors":[]}],"src":"31:4640:44"},"id":44},"contracts/wrapper/INameWrapperUpgrade.sol":{"ast":{"absolutePath":"contracts/wrapper/INameWrapperUpgrade.sol","exportedSymbols":{"INameWrapperUpgrade":[6935]},"id":6936,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6919,"literals":["solidity","~","0.8",".17"],"nodeType":"PragmaDirective","src":"31:24:45"},{"abstract":false,"baseContracts":[],"canonicalName":"INameWrapperUpgrade","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6935,"linearizedBaseContracts":[6935],"name":"INameWrapperUpgrade","nameLocation":"67:19:45","nodeType":"ContractDefinition","nodes":[{"functionSelector":"9198c276","id":6934,"implemented":false,"kind":"function","modifiers":[],"name":"wrapFromUpgrade","nameLocation":"102:15:45","nodeType":"FunctionDefinition","parameters":{"id":6932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6921,"mutability":"mutable","name":"name","nameLocation":"142:4:45","nodeType":"VariableDeclaration","scope":6934,"src":"127:19:45","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6920,"name":"bytes","nodeType":"ElementaryTypeName","src":"127:5:45","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6923,"mutability":"mutable","name":"wrappedOwner","nameLocation":"164:12:45","nodeType":"VariableDeclaration","scope":6934,"src":"156:20:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6922,"name":"address","nodeType":"ElementaryTypeName","src":"156:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6925,"mutability":"mutable","name":"fuses","nameLocation":"193:5:45","nodeType":"VariableDeclaration","scope":6934,"src":"186:12:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6924,"name":"uint32","nodeType":"ElementaryTypeName","src":"186:6:45","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6927,"mutability":"mutable","name":"expiry","nameLocation":"215:6:45","nodeType":"VariableDeclaration","scope":6934,"src":"208:13:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6926,"name":"uint64","nodeType":"ElementaryTypeName","src":"208:6:45","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6929,"mutability":"mutable","name":"approved","nameLocation":"239:8:45","nodeType":"VariableDeclaration","scope":6934,"src":"231:16:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6928,"name":"address","nodeType":"ElementaryTypeName","src":"231:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6931,"mutability":"mutable","name":"extraData","nameLocation":"272:9:45","nodeType":"VariableDeclaration","scope":6934,"src":"257:24:45","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6930,"name":"bytes","nodeType":"ElementaryTypeName","src":"257:5:45","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"117:170:45"},"returnParameters":{"id":6933,"nodeType":"ParameterList","parameters":[],"src":"296:0:45"},"scope":6935,"src":"93:204:45","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6936,"src":"57:242:45","usedErrors":[]}],"src":"31:269:45"},"id":45}},"contracts":{"@ensdomains/buffer/contracts/Buffer.sol":{"Buffer":{"abi":[],"devdoc":{"details":"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for appending to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122000adea6b32f5f0fa0301d3ad50a957da8b3925c422cc3e678d344eaf87efdffc64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP 0xAD 0xEA PUSH12 0x32F5F0FA0301D3AD50A957DA DUP12 CODECOPY 0x25 0xC4 0x22 0xCC RETURNDATACOPY PUSH8 0x8D344EAF87EFDFFC PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"445:8435:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;445:8435:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122000adea6b32f5f0fa0301d3ad50a957da8b3925c422cc3e678d344eaf87efdffc64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP 0xAD 0xEA PUSH12 0x32F5F0FA0301D3AD50A957DA DUP12 CODECOPY 0x25 0xC4 0x22 0xCC RETURNDATACOPY PUSH8 0x8D344EAF87EFDFFC PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"445:8435:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"append(struct Buffer.buffer memory,bytes memory)":"infinite","append(struct Buffer.buffer memory,bytes memory,uint256)":"infinite","append(struct Buffer.buffer memory,bytes32,uint256)":"infinite","appendBytes20(struct Buffer.buffer memory,bytes20)":"infinite","appendBytes32(struct Buffer.buffer memory,bytes32)":"infinite","appendInt(struct Buffer.buffer memory,uint256,uint256)":"infinite","appendUint8(struct Buffer.buffer memory,uint8)":"infinite","fromBytes(bytes memory)":"infinite","init(struct Buffer.buffer memory,uint256)":"infinite","resize(struct Buffer.buffer memory,uint256)":"infinite","truncate(struct Buffer.buffer memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for appending to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ensdomains/buffer/contracts/Buffer.sol\":\"Buffer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":926,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":929,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1605,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":432,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":552,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"IERC1967Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":\"IERC1967Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":926,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":929,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":908,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":926,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":929,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":926,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":929,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":908,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1224,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204fbe2acafd8426021c2bb3b2fb9f5cfa9322c444dbdb5ce6f8c1ed3ca22a959964736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F 0xBE 0x2A 0xCA REVERT DUP5 0x26 MUL SHR 0x2B 0xB3 0xB2 0xFB SWAP16 0x5C STATICCALL SWAP4 0x22 0xC4 DIFFICULTY 0xDB 0xDB 0x5C 0xE6 0xF8 0xC1 0xED EXTCODECOPY LOG2 0x2A SWAP6 SWAP10 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"194:9180:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204fbe2acafd8426021c2bb3b2fb9f5cfa9322c444dbdb5ce6f8c1ed3ca22a959964736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F 0xBE 0x2A 0xCA REVERT DUP5 0x26 MUL SHR 0x2B 0xB3 0xB2 0xFB SWAP16 0x5C STATICCALL SWAP4 0x22 0xC4 DIFFICULTY 0xDB 0xDB 0x5C 0xE6 0xF8 0xC1 0xED EXTCODECOPY LOG2 0x2A SWAP6 SWAP10 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"194:9180:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":926,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":929,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1605,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220631cdba8d4173e1e1e5b4df383cc130a5b57d7bbf2a67d65126cbefb5c7f9a5764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x1CDBA8D4 OR RETURNDATACOPY 0x1E 0x1E JUMPDEST 0x4D RETURN DUP4 0xCC SGT EXP JUMPDEST JUMPI 0xD7 0xBB CALLCODE 0xA6 PUSH30 0x65126CBEFB5C7F9A5764736F6C6343000811003300000000000000000000 ","sourceMap":"1420:2696:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2696:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220631cdba8d4173e1e1e5b4df383cc130a5b57d7bbf2a67d65126cbefb5c7f9a5764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x1CDBA8D4 OR RETURNDATACOPY 0x1E 0x1E JUMPDEST 0x4D RETURN DUP4 0xCC SGT EXP JUMPDEST JUMPI 0xD7 0xBB CALLCODE 0xA6 PUSH30 0x65126CBEFB5C7F9A5764736F6C6343000811003300000000000000000000 ","sourceMap":"1420:2696:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/dnssec-oracle/RRUtils.sol":{"RRUtils":{"abi":[],"devdoc":{"details":"RRUtils is a library that provides utilities for parsing DNS resource records.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220721757aaa78ac48cb89fd9b712046fd7ceeb941951ceb405efdf1dbf052bd2c864736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x1757AAA78AC48CB89FD9B712046FD7CEEB9419 MLOAD 0xCE 0xB4 SDIV 0xEF 0xDF SAR 0xBF SDIV 0x2B 0xD2 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"236:13908:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;236:13908:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220721757aaa78ac48cb89fd9b712046fd7ceeb941951ceb405efdf1dbf052bd2c864736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x1757AAA78AC48CB89FD9B712046FD7CEEB9419 MLOAD 0xCE 0xB4 SDIV 0xEF 0xDF SAR 0xBF SDIV 0x2B 0xD2 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"236:13908:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"compareNames(bytes memory,bytes memory)":"infinite","computeKeytag(bytes memory)":"infinite","done(struct RRUtils.RRIterator memory)":"infinite","isSubdomainOf(bytes memory,bytes memory)":"infinite","iterateRRs(bytes memory,uint256)":"infinite","labelCount(bytes memory,uint256)":"infinite","name(struct RRUtils.RRIterator memory)":"infinite","nameLength(bytes memory,uint256)":"infinite","next(struct RRUtils.RRIterator memory)":"infinite","progress(bytes memory,uint256)":"infinite","rdata(struct RRUtils.RRIterator memory)":"infinite","readDNSKEY(bytes memory,uint256,uint256)":"infinite","readDS(bytes memory,uint256,uint256)":"infinite","readName(bytes memory,uint256)":"infinite","readSignedSet(bytes memory)":"infinite","rrs(struct RRUtils.SignedSet memory)":"infinite","serialNumberGte(uint32,uint32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"RRUtils is a library that provides utilities for parsing DNS resource records.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dnssec-oracle/RRUtils.sol\":\"RRUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"contracts/dnssec-oracle/RRUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/BytesUtils.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n    using BytesUtils for *;\\n    using Buffer for *;\\n\\n    /**\\n     * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return The length of the DNS name at 'offset', in bytes.\\n     */\\n    function nameLength(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (uint256) {\\n        uint256 idx = offset;\\n        while (true) {\\n            assert(idx < self.length);\\n            uint256 labelLen = self.readUint8(idx);\\n            idx += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n        }\\n        return idx - offset;\\n    }\\n\\n    /**\\n     * @dev Returns a DNS format name at the specified offset of self.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return ret The name.\\n     */\\n    function readName(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes memory ret) {\\n        uint256 len = nameLength(self, offset);\\n        return self.substring(offset, len);\\n    }\\n\\n    /**\\n     * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return The number of labels in the DNS name at 'offset', in bytes.\\n     */\\n    function labelCount(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (uint256) {\\n        uint256 count = 0;\\n        while (true) {\\n            assert(offset < self.length);\\n            uint256 labelLen = self.readUint8(offset);\\n            offset += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n            count += 1;\\n        }\\n        return count;\\n    }\\n\\n    uint256 constant RRSIG_TYPE = 0;\\n    uint256 constant RRSIG_ALGORITHM = 2;\\n    uint256 constant RRSIG_LABELS = 3;\\n    uint256 constant RRSIG_TTL = 4;\\n    uint256 constant RRSIG_EXPIRATION = 8;\\n    uint256 constant RRSIG_INCEPTION = 12;\\n    uint256 constant RRSIG_KEY_TAG = 16;\\n    uint256 constant RRSIG_SIGNER_NAME = 18;\\n\\n    struct SignedSet {\\n        uint16 typeCovered;\\n        uint8 algorithm;\\n        uint8 labels;\\n        uint32 ttl;\\n        uint32 expiration;\\n        uint32 inception;\\n        uint16 keytag;\\n        bytes signerName;\\n        bytes data;\\n        bytes name;\\n    }\\n\\n    function readSignedSet(\\n        bytes memory data\\n    ) internal pure returns (SignedSet memory self) {\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\n        self.labels = data.readUint8(RRSIG_LABELS);\\n        self.ttl = data.readUint32(RRSIG_TTL);\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\n        self.data = data.substring(\\n            RRSIG_SIGNER_NAME + self.signerName.length,\\n            data.length - RRSIG_SIGNER_NAME - self.signerName.length\\n        );\\n    }\\n\\n    function rrs(\\n        SignedSet memory rrset\\n    ) internal pure returns (RRIterator memory) {\\n        return iterateRRs(rrset.data, 0);\\n    }\\n\\n    /**\\n     * @dev An iterator over resource records.\\n     */\\n    struct RRIterator {\\n        bytes data;\\n        uint256 offset;\\n        uint16 dnstype;\\n        uint16 class;\\n        uint32 ttl;\\n        uint256 rdataOffset;\\n        uint256 nextOffset;\\n    }\\n\\n    /**\\n     * @dev Begins iterating over resource records.\\n     * @param self The byte string to read from.\\n     * @param offset The offset to start reading at.\\n     * @return ret An iterator object.\\n     */\\n    function iterateRRs(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (RRIterator memory ret) {\\n        ret.data = self;\\n        ret.nextOffset = offset;\\n        next(ret);\\n    }\\n\\n    /**\\n     * @dev Returns true iff there are more RRs to iterate.\\n     * @param iter The iterator to check.\\n     * @return True iff the iterator has finished.\\n     */\\n    function done(RRIterator memory iter) internal pure returns (bool) {\\n        return iter.offset >= iter.data.length;\\n    }\\n\\n    /**\\n     * @dev Moves the iterator to the next resource record.\\n     * @param iter The iterator to advance.\\n     */\\n    function next(RRIterator memory iter) internal pure {\\n        iter.offset = iter.nextOffset;\\n        if (iter.offset >= iter.data.length) {\\n            return;\\n        }\\n\\n        // Skip the name\\n        uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n        // Read type, class, and ttl\\n        iter.dnstype = iter.data.readUint16(off);\\n        off += 2;\\n        iter.class = iter.data.readUint16(off);\\n        off += 2;\\n        iter.ttl = iter.data.readUint32(off);\\n        off += 4;\\n\\n        // Read the rdata\\n        uint256 rdataLength = iter.data.readUint16(off);\\n        off += 2;\\n        iter.rdataOffset = off;\\n        iter.nextOffset = off + rdataLength;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the current record.\\n     * @param iter The iterator.\\n     * @return A new bytes object containing the owner name from the RR.\\n     */\\n    function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n        return\\n            iter.data.substring(\\n                iter.offset,\\n                nameLength(iter.data, iter.offset)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the rdata portion of the current record.\\n     * @param iter The iterator.\\n     * @return A new bytes object containing the RR's RDATA.\\n     */\\n    function rdata(\\n        RRIterator memory iter\\n    ) internal pure returns (bytes memory) {\\n        return\\n            iter.data.substring(\\n                iter.rdataOffset,\\n                iter.nextOffset - iter.rdataOffset\\n            );\\n    }\\n\\n    uint256 constant DNSKEY_FLAGS = 0;\\n    uint256 constant DNSKEY_PROTOCOL = 2;\\n    uint256 constant DNSKEY_ALGORITHM = 3;\\n    uint256 constant DNSKEY_PUBKEY = 4;\\n\\n    struct DNSKEY {\\n        uint16 flags;\\n        uint8 protocol;\\n        uint8 algorithm;\\n        bytes publicKey;\\n    }\\n\\n    function readDNSKEY(\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (DNSKEY memory self) {\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\n        self.publicKey = data.substring(\\n            offset + DNSKEY_PUBKEY,\\n            length - DNSKEY_PUBKEY\\n        );\\n    }\\n\\n    uint256 constant DS_KEY_TAG = 0;\\n    uint256 constant DS_ALGORITHM = 2;\\n    uint256 constant DS_DIGEST_TYPE = 3;\\n    uint256 constant DS_DIGEST = 4;\\n\\n    struct DS {\\n        uint16 keytag;\\n        uint8 algorithm;\\n        uint8 digestType;\\n        bytes digest;\\n    }\\n\\n    function readDS(\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (DS memory self) {\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\n    }\\n\\n    function isSubdomainOf(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        uint256 off = 0;\\n        uint256 counts = labelCount(self, 0);\\n        uint256 othercounts = labelCount(other, 0);\\n\\n        while (counts > othercounts) {\\n            off = progress(self, off);\\n            counts--;\\n        }\\n\\n        return self.equals(off, other, 0);\\n    }\\n\\n    function compareNames(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        if (self.equals(other)) {\\n            return 0;\\n        }\\n\\n        uint256 off;\\n        uint256 otheroff;\\n        uint256 prevoff;\\n        uint256 otherprevoff;\\n        uint256 counts = labelCount(self, 0);\\n        uint256 othercounts = labelCount(other, 0);\\n\\n        // Keep removing labels from the front of the name until both names are equal length\\n        while (counts > othercounts) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            counts--;\\n        }\\n\\n        while (othercounts > counts) {\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            othercounts--;\\n        }\\n\\n        // Compare the last nonequal labels to each other\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            counts -= 1;\\n        }\\n\\n        if (off == 0) {\\n            return -1;\\n        }\\n        if (otheroff == 0) {\\n            return 1;\\n        }\\n\\n        return\\n            self.compare(\\n                prevoff + 1,\\n                self.readUint8(prevoff),\\n                other,\\n                otherprevoff + 1,\\n                other.readUint8(otherprevoff)\\n            );\\n    }\\n\\n    /**\\n     * @dev Compares two serial numbers using RFC1982 serial number math.\\n     */\\n    function serialNumberGte(\\n        uint32 i1,\\n        uint32 i2\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            return int32(i1) - int32(i2) >= 0;\\n        }\\n    }\\n\\n    function progress(\\n        bytes memory body,\\n        uint256 off\\n    ) internal pure returns (uint256) {\\n        return off + 1 + body.readUint8(off);\\n    }\\n\\n    /**\\n     * @dev Computes the keytag for a chunk of data.\\n     * @param data The data to compute a keytag for.\\n     * @return The computed key tag.\\n     */\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n        /* This function probably deserves some explanation.\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\\n         *\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n         *         uint ac;\\n         *         for (uint i = 0; i < data.length; i++) {\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\n         *         }\\n         *         return uint16(ac + (ac >> 16));\\n         *     }\\n         *\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\\n         * large words work in our favour.\\n         *\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\n         *\\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\\n         * and the remaining sums can be done just on ac1.\\n         */\\n        unchecked {\\n            require(data.length <= 8192, \\\"Long keys not permitted\\\");\\n            uint256 ac1;\\n            uint256 ac2;\\n            for (uint256 i = 0; i < data.length + 31; i += 32) {\\n                uint256 word;\\n                assembly {\\n                    word := mload(add(add(data, 32), i))\\n                }\\n                if (i + 32 > data.length) {\\n                    uint256 unused = 256 - (data.length - i) * 8;\\n                    word = (word >> unused) << unused;\\n                }\\n                ac1 +=\\n                    (word &\\n                        0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >>\\n                    8;\\n                ac2 += (word &\\n                    0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\n            }\\n            ac1 =\\n                (ac1 &\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\n                ((ac1 &\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\n                    16);\\n            ac2 =\\n                (ac2 &\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\n                ((ac2 &\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\n                    16);\\n            ac1 = (ac1 << 8) + ac2;\\n            ac1 =\\n                (ac1 &\\n                    0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) +\\n                ((ac1 &\\n                    0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >>\\n                    32);\\n            ac1 =\\n                (ac1 &\\n                    0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) +\\n                ((ac1 &\\n                    0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >>\\n                    64);\\n            ac1 =\\n                (ac1 &\\n                    0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) +\\n                (ac1 >> 128);\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\n            return uint16(ac1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4470c1578b2ee78e64bd8925bf391ffe98d5497aeef15b593380c7fe905af5d\",\"license\":\"MIT\"},\"contracts/utils/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal.\\n     * @param self The first bytes to compare.\\n     * @param other The second bytes to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first bytes to compare.\\n     * @param offset The offset of self.\\n     * @param len    The length of self.\\n     * @param other The second bytes to compare.\\n     * @param otheroffset The offset of the other string.\\n     * @param otherlen    The length of the other string.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if (offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if (otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n\\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask;\\n                if (shortest - idx >= 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\n                }\\n                int256 diff = int256(a & mask) - int256(b & mask);\\n                if (diff != 0) return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @param len The number of bytes to compare\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n     *      they are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n     * @dev Returns the 8-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\n     */\\n    function readUint8(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n     * @dev Returns the 16-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\n     */\\n    function readUint16(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\n     */\\n    function readUint32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes20(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the n byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes.\\n     * @param len The number of bytes.\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Copies a substring into a new byte string.\\n     * @param self The byte string to copy from.\\n     * @param offset The offset to start copying at.\\n     * @param len The number of bytes to copy.\\n     */\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /**\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\n     * @param self The string to search\\n     * @param off The offset to start searching at\\n     * @param len The number of bytes to search\\n     * @param needle The byte to search for\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n     */\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0xc566a3569af880a096a9bfb2fbb77060ef7aecde1a205dc26446a58877412060\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ethregistrar/IBaseRegistrar.sol":{"IBaseRegistrar":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"controller","type":"address"}],"name":"ControllerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"controller","type":"address"}],"name":"ControllerRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameMigrated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"expires","type":"uint256"}],"name":"NameRenewed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"controller","type":"address"}],"name":"addController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"available","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"nameExpires","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"reclaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"register","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"controller","type":"address"}],"name":"removeController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"renew","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"reclaim(uint256,address)":{"details":"Reclaim ownership of a name in ENS, if you own it in the registrar."},"register(uint256,address,uint256)":{"details":"Register a name."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addController(address)":"a7fc7a07","approve(address,uint256)":"095ea7b3","available(uint256)":"96e494e8","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","nameExpires(uint256)":"d6e4fa86","ownerOf(uint256)":"6352211e","reclaim(uint256,address)":"28ed4f6c","register(uint256,address,uint256)":"fca247ac","removeController(address)":"f6a74ed7","renew(uint256,uint256)":"c475abff","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setResolver(address)":"4e543b26","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nameExpires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"reclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"reclaim(uint256,address)\":{\"details\":\"Reclaim ownership of a name in ENS, if you own it in the registrar.\"},\"register(uint256,address,uint256)\":{\"details\":\"Register a name.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/IBaseRegistrar.sol\":\"IBaseRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/registry/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8e208b44d5dbf22552fe72d79b45c640855b84fbc9ee21f4c3bb4bfe81cbe8db\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/registry/ENS.sol":{"ENS":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"NewOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"resolver","type":"address"}],"name":"NewResolver","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"NewTTL","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"recordExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"resolver","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setRecord","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"setSubnodeOwner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setSubnodeRecord","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setTTL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"ttl","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForAll(address,address)":"e985e9c5","owner(bytes32)":"02571be3","recordExists(bytes32)":"f79fe538","resolver(bytes32)":"0178b8bf","setApprovalForAll(address,bool)":"a22cb465","setOwner(bytes32,address)":"5b0fc9c3","setRecord(bytes32,address,address,uint64)":"cf408823","setResolver(bytes32,address)":"1896f70a","setSubnodeOwner(bytes32,bytes32,address)":"06ab5923","setSubnodeRecord(bytes32,bytes32,address,address,uint64)":"5ef2c7f0","setTTL(bytes32,uint64)":"14ab9038","ttl(bytes32)":"16a25cbd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"NewTTL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"recordExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setSubnodeRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ttl\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/ENS.sol\":\"ENS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/registry/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8e208b44d5dbf22552fe72d79b45c640855b84fbc9ee21f4c3bb4bfe81cbe8db\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/resolvers/IMulticallable.sol":{"IMulticallable":{"abi":[{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicallWithNodeCheck","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"multicall(bytes[])":"ac9650d8","multicallWithNodeCheck(bytes32,bytes[])":"e32954eb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/IMulticallable.sol\":\"IMulticallable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMulticallable {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x0334202e20bb11995997083d05963f5e8e7ed6194cba494e7f9371ab7bf4e2c3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/resolvers/Multicallable.sol":{"Multicallable":{"abi":[{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"nodehash","type":"bytes32"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicallWithNodeCheck","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"multicall(bytes[])":"ac9650d8","multicallWithNodeCheck(bytes32,bytes[])":"e32954eb","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodehash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/Multicallable.sol\":\"Multicallable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/resolvers/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMulticallable {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x0334202e20bb11995997083d05963f5e8e7ed6194cba494e7f9371ab7bf4e2c3\",\"license\":\"MIT\"},\"contracts/resolvers/Multicallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMulticallable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract Multicallable is IMulticallable, ERC165 {\\n    function _multicall(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) internal returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (nodehash != bytes32(0)) {\\n                bytes32 txNamehash = bytes32(data[i][4:36]);\\n                require(\\n                    txNamehash == nodehash,\\n                    \\\"multicall: All records must have a matching namehash\\\"\\n                );\\n            }\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n            require(success);\\n            results[i] = result;\\n        }\\n        return results;\\n    }\\n\\n    // This function provides an extra security check when called\\n    // from priviledged contracts (such as EthRegistrarController)\\n    // that can set records on behalf of the node owners\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        return _multicall(nodehash, data);\\n    }\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) public override returns (bytes[] memory results) {\\n        return _multicall(bytes32(0), data);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IMulticallable).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x1063a9dd3b94ba304624d5ec6deb43c1916640758ae970eece4d4e3ef8b2fcb1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/resolvers/PublicResolver.sol":{"PublicResolver":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"coinType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"address","name":"delegate","type":"address"},{"indexed":true,"internalType":"bool","name":"approved","type":"bool"}],"name":"Approved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"record","type":"bytes"}],"name":"DNSRecordChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"}],"name":"DNSRecordDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"lastzonehash","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"zonehash","type":"bytes"}],"name":"DNSZonehashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"indexed":false,"internalType":"address","name":"implementer","type":"address"}],"name":"InterfaceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"string","name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"x","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"TextChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"delegate","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"uint16","name":"resource","type":"uint16"}],"name":"dnsRecord","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ens","outputs":[{"internalType":"contract ENS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"name":"hasDNSRecords","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract ENS","name":"_ens","type":"address"},{"internalType":"contract INameWrapper","name":"wrapperAddress","type":"address"},{"internalType":"address","name":"_trustedETHController","type":"address"},{"internalType":"address","name":"_trustedReverseRegistrar","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"delegate","type":"address"}],"name":"isApprovedFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"nodehash","type":"bytes32"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicallWithNodeCheck","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nameWrapper","outputs":[{"internalType":"contract INameWrapper","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentType","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setABI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"},{"internalType":"bytes","name":"a","type":"bytes"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"a","type":"address"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setContenthash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setDNSRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"internalType":"address","name":"implementer","type":"address"}],"name":"setInterface","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"newName","type":"string"}],"name":"setName","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"setPubkey","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"},{"internalType":"string","name":"value","type":"string"}],"name":"setText","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setZonehash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"}],"name":"text","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"trustedETHController","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trustedReverseRegistrar","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"zonehash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"ABI(bytes32,uint256)":{"params":{"contentTypes":"A bitwise OR of the ABI formats accepted by the caller.","node":"The ENS node to query"},"returns":{"_0":"contentType The content type of the return value","_1":"data The ABI data"}},"addr(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated address."}},"approve(bytes32,address,bool)":{"details":"Approve a delegate to be able to updated records on a node."},"clearRecords(bytes32)":{"params":{"node":"The node to update."}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"contenthash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}},"dnsRecord(bytes32,bytes32,uint16)":{"params":{"name":"the keccak-256 hash of the fully-qualified name for which to fetch the record","node":"the namehash of the node for which to fetch the record","resource":"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"},"returns":{"_0":"the DNS record in wire format if present, otherwise empty"}},"hasDNSRecords(bytes32,bytes32)":{"params":{"name":"the namehash of the node for which to check the records","node":"the namehash of the node for which to check the records"}},"interfaceImplementer(bytes32,bytes4)":{"params":{"interfaceID":"The EIP 165 interface ID to check for.","node":"The ENS node to query."},"returns":{"_0":"The address that implements this interface, or 0 if the interface is unsupported."}},"isApprovedFor(address,bytes32,address)":{"details":"Check to see if the delegate has been approved by the owner for the node."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"name(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated name."}},"owner()":{"details":"Returns the address of the current owner."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"pubkey(bytes32)":{"params":{"node":"The ENS node to query"},"returns":{"x":"The X coordinate of the curve point for the public key.","y":"The Y coordinate of the curve point for the public key."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setABI(bytes32,uint256,bytes)":{"params":{"contentType":"The content type of the ABI","data":"The ABI data.","node":"The node to update."}},"setAddr(bytes32,address)":{"params":{"a":"The address to set.","node":"The node to update."}},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"setContenthash(bytes32,bytes)":{"params":{"hash":"The contenthash to set","node":"The node to update."}},"setDNSRecords(bytes32,bytes)":{"params":{"data":"the DNS wire format records to set","node":"the namehash of the node for which to set the records"}},"setInterface(bytes32,bytes4,address)":{"params":{"implementer":"The address of a contract that implements this interface for this node.","interfaceID":"The EIP 165 interface ID.","node":"The node to update."}},"setName(bytes32,string)":{"params":{"node":"The node to update."}},"setPubkey(bytes32,bytes32,bytes32)":{"params":{"node":"The ENS node to query","x":"the X coordinate of the curve point for the public key.","y":"the Y coordinate of the curve point for the public key."}},"setText(bytes32,string,string)":{"params":{"key":"The key to set.","node":"The node to update.","value":"The text data value to set."}},"setZonehash(bytes32,bytes)":{"params":{"hash":"The zonehash to set","node":"The node to update."}},"text(bytes32,string)":{"params":{"key":"The text data key to query.","node":"The ENS node to query."},"returns":{"_0":"The associated text data."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"zonehash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3592":{"entryPoint":null,"id":3592,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_1069":{"entryPoint":38,"id":1069,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:608:46","statements":[{"nodeType":"YulBlock","src":"6:3:46","statements":[]},{"body":{"nodeType":"YulBlock","src":"188:229:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"205:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"216:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"198:6:46"},"nodeType":"YulFunctionCall","src":"198:21:46"},"nodeType":"YulExpressionStatement","src":"198:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"239:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"250:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"235:3:46"},"nodeType":"YulFunctionCall","src":"235:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"255:2:46","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"228:6:46"},"nodeType":"YulFunctionCall","src":"228:30:46"},"nodeType":"YulExpressionStatement","src":"228:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"278:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"289:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"274:3:46"},"nodeType":"YulFunctionCall","src":"274:18:46"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"294:34:46","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"267:6:46"},"nodeType":"YulFunctionCall","src":"267:62:46"},"nodeType":"YulExpressionStatement","src":"267:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"349:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"360:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"345:3:46"},"nodeType":"YulFunctionCall","src":"345:18:46"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"365:9:46","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"338:6:46"},"nodeType":"YulFunctionCall","src":"338:37:46"},"nodeType":"YulExpressionStatement","src":"338:37:46"},{"nodeType":"YulAssignment","src":"384:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"396:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"407:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"392:3:46"},"nodeType":"YulFunctionCall","src":"392:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"384:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"165:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"179:4:46","type":""}],"src":"14:403:46"},{"body":{"nodeType":"YulBlock","src":"519:87:46","statements":[{"nodeType":"YulAssignment","src":"529:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"541:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"552:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"537:3:46"},"nodeType":"YulFunctionCall","src":"537:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"529:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"571:9:46"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"586:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"594:4:46","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"582:3:46"},"nodeType":"YulFunctionCall","src":"582:17:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"564:6:46"},"nodeType":"YulFunctionCall","src":"564:36:46"},"nodeType":"YulExpressionStatement","src":"564:36:46"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"488:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"499:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"510:4:46","type":""}],"src":"422:184:46"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":46,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161416b6200011f600039600081816111d501528181611270015281816113a90152818161143f015261153a015261416b6000f3fe6080604052600436106102c65760003560e01c8063715018a611610179578063bc1c58d1116100d6578063e32954eb1161008a578063f1cb7e0611610064578063f1cb7e06146108d8578063f2fde38b146108f8578063f8c8765e1461091857600080fd5b8063e32954eb1461084f578063e59d895d1461086f578063e985e9c51461088f57600080fd5b8063ce3decdc116100bb578063ce3decdc146107bf578063d5fa2b00146107df578063d700ff33146107ff57600080fd5b8063bc1c58d114610737578063c86902331461075757600080fd5b8063a4b91a011161012d578063a8fa568211610112578063a8fa568214610699578063a9784b3e146106b9578063ac9650d81461070a57600080fd5b8063a4b91a0114610659578063a8e5fbc01461067957600080fd5b80638b95dd711161015e5780638b95dd71146105fb5780638da5cb5b1461061b578063a22cb4651461063957600080fd5b8063715018a6146105c657806377372213146105db57600080fd5b80633b3b57de1161022757806359d1d43c116101db578063623195b0116101c0578063623195b01461056657806362c50a1314610586578063691f3431146105a657600080fd5b806359d1d43c146105195780635c98042b1461054657600080fd5b80634cbf6ba41161020c5780634cbf6ba4146104885780634f1ef286146104e357806352d1902d146104f657600080fd5b80633b3b57de146104485780633f15457f1461046857600080fd5b806329cd62ea1161027e5780633603d758116102635780633603d758146103e85780633659cfe61461040857806337bf7a2f1461042857600080fd5b806329cd62ea146103a8578063304e6ade146103c857600080fd5b806310f13a8c116102af57806310f13a8c14610322578063124a319c146103425780632203ab561461037a57600080fd5b806301ffc9a7146102cb5780630af179d714610300575b600080fd5b3480156102d757600080fd5b506102eb6102e636600461354c565b610938565b60405190151581526020015b60405180910390f35b34801561030c57600080fd5b5061032061031b3660046135a9565b610949565b005b34801561032e57600080fd5b5061032061033d3660046135f5565b610b55565b34801561034e57600080fd5b5061036261035d36600461366f565b610c24565b6040516001600160a01b0390911681526020016102f7565b34801561038657600080fd5b5061039a61039536600461369b565b610ed2565b6040516102f792919061370d565b3480156103b457600080fd5b506103206103c3366004613726565b61100c565b3480156103d457600080fd5b506103206103e33660046135a9565b6110a8565b3480156103f457600080fd5b50610320610403366004613752565b611126565b34801561041457600080fd5b50610320610423366004613780565b6111cb565b34801561043457600080fd5b5060d654610362906001600160a01b031681565b34801561045457600080fd5b50610362610463366004613752565b61136d565b34801561047457600080fd5b5060d454610362906001600160a01b031681565b34801561049457600080fd5b506102eb6104a336600461369b565b600082815260c9602090815260408083205467ffffffffffffffff16835260cf825280832094835293815283822092825291909152205461ffff16151590565b6103206104f1366004613840565b61139f565b34801561050257600080fd5b5061050b61152d565b6040519081526020016102f7565b34801561052557600080fd5b506105396105343660046135a9565b6115f2565b6040516102f79190613890565b34801561055257600080fd5b50610539610561366004613752565b6116d4565b34801561057257600080fd5b506103206105813660046138a3565b611795565b34801561059257600080fd5b5060d754610362906001600160a01b031681565b3480156105b257600080fd5b506105396105c1366004613752565b611834565b3480156105d257600080fd5b50610320611870565b3480156105e757600080fd5b506103206105f63660046135a9565b611884565b34801561060757600080fd5b506103206106163660046138f6565b611902565b34801561062757600080fd5b506097546001600160a01b0316610362565b34801561064557600080fd5b50610320610654366004613956565b6119e4565b34801561066557600080fd5b50610320610674366004613982565b611ace565b34801561068557600080fd5b5060d554610362906001600160a01b031681565b3480156106a557600080fd5b506105396106b43660046139c0565b611b9b565b3480156106c557600080fd5b506102eb6106d4366004613a00565b6001600160a01b03928316600090815260d960209081526040808320948352938152838220929094168152925290205460ff1690565b34801561071657600080fd5b5061072a610725366004613a7c565b611beb565b6040516102f79190613abe565b34801561074357600080fd5b50610539610752366004613752565b611bf9565b34801561076357600080fd5b506107aa610772366004613752565b600081815260c9602090815260408083205467ffffffffffffffff16835260d282528083209383529290522080546001909101549091565b604080519283526020830191909152016102f7565b3480156107cb57600080fd5b506103206107da3660046135a9565b611c35565b3480156107eb57600080fd5b506103206107fa366004613b20565b611d7a565b34801561080b57600080fd5b5061083661081a366004613752565b60c96020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102f7565b34801561085b57600080fd5b5061072a61086a366004613b50565b611da1565b34801561087b57600080fd5b5061032061088a366004613b8f565b611db6565b34801561089b57600080fd5b506102eb6108aa366004613bc4565b6001600160a01b03918216600090815260d86020908152604080832093909416825291909152205460ff1690565b3480156108e457600080fd5b506105396108f336600461369b565b611e6c565b34801561090457600080fd5b50610320610913366004613780565b611f36565b34801561092457600080fd5b50610320610933366004613bf2565b611fc3565b600061094382612244565b92915050565b8261095381612282565b61095c57600080fd5b600084815260c960209081526040808320548151601f870184900484028101840190925285825283926060928392859267ffffffffffffffff9091169183916109c49183918d908d908190840183828082843760009201919091525092939250506124399050565b90505b80515160208201511015610aee578661ffff16600003610a2c57806040015196506109f18161249a565b945084604051602001610a049190613c4e565b604051602081830303815290604052805190602001209250610a25816124bb565b9350610ae0565b6000610a378261249a565b9050816040015161ffff168861ffff16141580610a5b5750610a5986826124d7565b155b15610ade57610ab78c878a8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505060208801518d9150610aae908290613c80565b8b51158a6124f5565b816040015197508160200151965080955085805190602001209350610adb826124bb565b94505b505b610ae981612762565b6109c7565b50835115610b4957610b498a85888c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c9250610b4091508290508f613c80565b895115886124f5565b50505050505050505050565b84610b5f81612282565b610b6857600080fd5b600086815260c9602090815260408083205467ffffffffffffffff16835260d3825280832089845290915290819020905184918491610baa9089908990613c93565b90815260200160405180910390209182610bc5929190613d2b565b508484604051610bd6929190613c93565b6040518091039020867f448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a187878787604051610c149493929190613e14565b60405180910390a3505050505050565b600082815260c9602090815260408083205467ffffffffffffffff16835260d0825280832085845282528083206001600160e01b0319851684529091528120546001600160a01b03168015610c7a579050610943565b6000610c858561136d565b90506001600160a01b038116610ca057600092505050610943565b6040516301ffc9a760e01b602482015260009081906001600160a01b0384169060440160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b17905251610d0d9190613c4e565b600060405180830381855afa9150503d8060008114610d48576040519150601f19603f3d011682016040523d82523d6000602084013e610d4d565b606091505b5091509150811580610d60575060208151105b80610da2575080601f81518110610d7957610d79613e46565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610db4576000945050505050610943565b6040516001600160e01b0319871660248201526001600160a01b0384169060440160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b17905251610e1f9190613c4e565b600060405180830381855afa9150503d8060008114610e5a576040519150601f19603f3d011682016040523d82523d6000602084013e610e5f565b606091505b509092509050811580610e73575060208151105b80610eb5575080601f81518110610e8c57610e8c613e46565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610ec7576000945050505050610943565b509095945050505050565b600082815260c9602090815260408083205467ffffffffffffffff16835260ca8252808320858452909152812060609060015b848111610fec5780851615801590610f35575060008181526020839052604081208054610f3190613ca3565b9050115b15610fe45780826000838152602001908152602001600020808054610f5990613ca3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8590613ca3565b8015610fd25780601f10610fa757610100808354040283529160200191610fd2565b820191906000526020600020905b815481529060010190602001808311610fb557829003601f168201915b50505050509050935093505050611005565b60011b610f05565b5060006040518060200160405280600081525092509250505b9250929050565b8261101681612282565b61101f57600080fd5b6040805180820182528481526020808201858152600088815260c983528481205467ffffffffffffffff16815260d2835284812089825283528490209251835551600190920191909155815185815290810184905285917f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4691015b60405180910390a250505050565b826110b281612282565b6110bb57600080fd5b600084815260c9602090815260408083205467ffffffffffffffff16835260cc825280832087845290915290206110f3838583613d2b565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578848460405161109a929190613e5c565b8061113081612282565b61113957600080fd5b600082815260c960205260408120805467ffffffffffffffff169161115d83613e70565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600084815260c960209081526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361126e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112c97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146113455760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401611265565b61134e8161284a565b6040805160008082526020820190925261136a91839190612852565b50565b60008061137b83603c611e6c565b9050805160000361138f5750600092915050565b611398816129f2565b9392505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361143d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401611265565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114987f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146115145760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401611265565b61151d8261284a565b61152982826001612852565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115cd5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401611265565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600083815260c9602090815260408083205467ffffffffffffffff16835260d38252808320868452909152908190209051606091906116349085908590613c93565b9081526020016040518091039020805461164d90613ca3565b80601f016020809104026020016040519081016040528092919081815260200182805461167990613ca3565b80156116c65780601f1061169b576101008083540402835291602001916116c6565b820191906000526020600020905b8154815290600101906020018083116116a957829003601f168201915b505050505090509392505050565b600081815260c9602090815260408083205467ffffffffffffffff16835260cd8252808320848452909152902080546060919061171090613ca3565b80601f016020809104026020016040519081016040528092919081815260200182805461173c90613ca3565b80156117895780601f1061175e57610100808354040283529160200191611789565b820191906000526020600020905b81548152906001019060200180831161176c57829003601f168201915b50505050509050919050565b8361179f81612282565b6117a857600080fd5b836117b4600182613c80565b16156117bf57600080fd5b600085815260c9602090815260408083205467ffffffffffffffff16835260ca8252808320888452825280832087845290915290206117ff838583613d2b565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b600081815260c9602090815260408083205467ffffffffffffffff16835260d18252808320848452909152902080546060919061171090613ca3565b611878612a1a565b6118826000612a74565b565b8261188e81612282565b61189757600080fd5b600084815260c9602090815260408083205467ffffffffffffffff16835260d1825280832087845290915290206118cf838583613d2b565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7848460405161109a929190613e5c565b8261190c81612282565b61191557600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752848460405161194792919061370d565b60405180910390a2603c830361199e57837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2611982846129f2565b6040516001600160a01b03909116815260200160405180910390a25b600084815260c9602090815260408083205467ffffffffffffffff16835260cb8252808320878452825280832086845290915290206119dd8382613e97565b5050505050565b6001600160a01b0382163303611a625760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401611265565b33600081815260d8602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b0382163303611b265760405162461bcd60e51b815260206004820181905260248201527f53657474696e672064656c65676174652073746174757320666f722073656c666044820152606401611265565b33600081815260d96020908152604080832087845282528083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519384529286917ff0ddb3b04746704017f9aa8bd728fcc2c1d11675041205350018915f5e4750a0910160405180910390a4505050565b600083815260c9602090815260408083205467ffffffffffffffff16835260ce82528083208684528252808320858452825280832061ffff85168452909152902080546060919061164d90613ca3565b606061139860008484612ad3565b600081815260c9602090815260408083205467ffffffffffffffff16835260cc8252808320848452909152902080546060919061171090613ca3565b82611c3f81612282565b611c4857600080fd5b600084815260c9602090815260408083205467ffffffffffffffff1680845260cd835281842088855290925282208054919291611c8490613ca3565b80601f0160208091040260200160405190810160405280929190818152602001828054611cb090613ca3565b8015611cfd5780601f10611cd257610100808354040283529160200191611cfd565b820191906000526020600020905b815481529060010190602001808311611ce057829003601f168201915b5050505067ffffffffffffffff8416600090815260cd602090815260408083208b84529091529020919250611d359050858783613d2b565b50857f8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f85828787604051611d6a93929190613f57565b60405180910390a2505050505050565b81611d8481612282565b611d8d57600080fd5b611d9c83603c61061685612cac565b505050565b6060611dae848484612ad3565b949350505050565b82611dc081612282565b611dc957600080fd5b600084815260c9602090815260408083205467ffffffffffffffff16835260d0825280832087845282528083206001600160e01b0319871680855290835292819020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716908117909155905190815286917f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa910160405180910390a350505050565b600082815260c9602090815260408083205467ffffffffffffffff16835260cb825280832085845282528083208484529091529020805460609190611eb090613ca3565b80601f0160208091040260200160405190810160405280929190818152602001828054611edc90613ca3565b8015611f295780601f10611efe57610100808354040283529160200191611f29565b820191906000526020600020905b815481529060010190602001808311611f0c57829003601f168201915b5050505050905092915050565b611f3e612a1a565b6001600160a01b038116611fba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401611265565b61136a81612a74565b600054610100900460ff1615808015611fe35750600054600160ff909116105b80611ffd5750303b158015611ffd575060005460ff166001145b61206f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401611265565b6000805460ff191660011790558015612092576000805461ff0019166101001790555b61209a612ce5565b60d480546001600160a01b0387811673ffffffffffffffffffffffffffffffffffffffff19928316811790935560d5805488831690841617905560d6805487831690841617905560d78054918616919092161790556040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152600091906302571be390602401602060405180830381865afa15801561214c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121709190613f7d565b6040517f1e83409a0000000000000000000000000000000000000000000000000000000081523360048201529091506001600160a01b03821690631e83409a906024016020604051808303816000875af11580156121d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f69190613f9a565b505080156119dd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60006001600160e01b031982167f59d1d43c000000000000000000000000000000000000000000000000000000001480610943575061094382612d6a565b60d6546000906001600160a01b03163314806122a8575060d7546001600160a01b031633145b156122b557506001919050565b60d4546040516302571be360e01b8152600481018490526000916001600160a01b0316906302571be390602401602060405180830381865afa1580156122ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123239190613f7d565b60d5549091506001600160a01b03908116908216036123c55760d5546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0390911690636352211e90602401602060405180830381865afa15801561239e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c29190613f7d565b90505b6001600160a01b0381163314806123ff57506001600160a01b038116600090815260d86020908152604080832033845290915290205460ff165b8061139857506001600160a01b038116600090815260d960209081526040808320868452825280832033845290915290205460ff16611398565b6124876040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c0810182905261094381612762565b60208101518151606091610943916124b29082612da8565b84519190612e02565b60a081015160c0820151606091610943916124b2908290613c80565b60008151835114801561139857506113988360008460008751612e79565b865160208801206000612509878787612e02565b905083156126335767ffffffffffffffff8316600090815260ce602090815260408083208d84528252808320858452825280832061ffff8c1684529091529020805461255490613ca3565b1590506125b35767ffffffffffffffff8316600090815260cf602090815260408083208d845282528083208584529091528120805461ffff169161259783613fb3565b91906101000a81548161ffff021916908361ffff160217905550505b67ffffffffffffffff8316600090815260ce602090815260408083208d84528252808320858452825280832061ffff8c16845290915281206125f4916134e1565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a604051612626929190613fd1565b60405180910390a2610b49565b67ffffffffffffffff8316600090815260ce602090815260408083208d84528252808320858452825280832061ffff8c1684529091529020805461267690613ca3565b90506000036126d75767ffffffffffffffff8316600090815260cf602090815260408083208d845282528083208584529091528120805461ffff16916126bb83613ff7565b91906101000a81548161ffff021916908361ffff160217905550505b67ffffffffffffffff8316600090815260ce602090815260408083208d84528252808320858452825280832061ffff8c16845290915290206127198282613e97565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a8460405161274e9392919061400e565b60405180910390a250505050505050505050565b60c081015160208201819052815151116127795750565b600061278d82600001518360200151612da8565b826020015161279c919061403d565b82519091506127ab9082612e9c565b61ffff1660408301526127bf60028261403d565b82519091506127ce9082612e9c565b61ffff1660608301526127e260028261403d565b82519091506127f19082612ec4565b63ffffffff16608083015261280760048261403d565b82519091506000906128199083612e9c565b61ffff16905061282a60028361403d565b60a08401819052915061283d818361403d565b60c0909301929092525050565b61136a612a1a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561288557611d9c83612eee565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156128df575060408051601f3d908101601f191682019092526128dc91810190613f9a565b60015b6129515760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401611265565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146129e65760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401611265565b50611d9c838383612fb9565b60008151601414612a0257600080fd5b50602001516c01000000000000000000000000900490565b6097546001600160a01b031633146118825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611265565b609780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60608167ffffffffffffffff811115612aee57612aee61379d565b604051908082528060200260200182016040528015612b2157816020015b6060815260200190600190039081612b0c5790505b50905060005b82811015612ca4578415612bec576000848483818110612b4957612b49613e46565b9050602002810190612b5b9190614050565b612b6a91602491600491614097565b612b73916140c1565b9050858114612bea5760405162461bcd60e51b815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d65686173680000000000000000000000006064820152608401611265565b505b60008030868685818110612c0257612c02613e46565b9050602002810190612c149190614050565b604051612c22929190613c93565b600060405180830381855af49150503d8060008114612c5d576040519150601f19603f3d011682016040523d82523d6000602084013e612c62565b606091505b509150915081612c7157600080fd5b80848481518110612c8457612c84613e46565b602002602001018190525050508080612c9c906140df565b915050612b27565b509392505050565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b600054610100900460ff16612d625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401611265565b611882612fe4565b60006001600160e01b031982167fc869023300000000000000000000000000000000000000000000000000000000148061094357506109438261306a565b6000815b83518110612dbc57612dbc6140f8565b6000612dc885836130a8565b60ff169050612dd881600161403d565b612de2908361403d565b915080600003612df25750612df8565b50612dac565b611dae8382613c80565b8251606090612e11838561403d565b1115612e1c57600080fd5b60008267ffffffffffffffff811115612e3757612e3761379d565b6040519080825280601f01601f191660200182016040528015612e61576020820181803683370190505b50905060208082019086860101610ec78282876130cc565b6000612e86848484613122565b612e91878785613122565b149695505050505050565b8151600090612eac83600261403d565b1115612eb757600080fd5b50016002015161ffff1690565b8151600090612ed483600461403d565b1115612edf57600080fd5b50016004015163ffffffff1690565b6001600160a01b0381163b612f6b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401611265565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b612fc283613146565b600082511180612fcf5750805b15611d9c57612fde8383613186565b50505050565b600054610100900460ff166130615760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401611265565b61188233612a74565b60006001600160e01b031982167f691f34310000000000000000000000000000000000000000000000000000000014806109435750610943826131ab565b60008282815181106130bc576130bc613e46565b016020015160f81c905092915050565b6020811061310457815183526130e360208461403d565b92506130f060208361403d565b91506130fd602082613c80565b90506130cc565b905182516020929092036101000a6000190180199091169116179052565b8251600090613131838561403d565b111561313c57600080fd5b5091016020012090565b61314f81612eee565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611398838360405180606001604052806027815260200161410f602791396131e9565b60006001600160e01b031982167f124a319c000000000000000000000000000000000000000000000000000000001480610943575061094382613261565b6060600080856001600160a01b0316856040516132069190613c4e565b600060405180830381855af49150503d8060008114613241576040519150601f19603f3d011682016040523d82523d6000602084013e613246565b606091505b5091509150613257868383876132d3565b9695505050505050565b60006001600160e01b031982167fa8fa56820000000000000000000000000000000000000000000000000000000014806132c457506001600160e01b031982167f5c98042b00000000000000000000000000000000000000000000000000000000145b8061094357506109438261334c565b6060831561334257825160000361333b576001600160a01b0385163b61333b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611265565b5081611dae565b611dae838361338a565b60006001600160e01b031982167fbc1c58d10000000000000000000000000000000000000000000000000000000014806109435750610943826133b4565b81511561339a5781518083602001fd5b8060405162461bcd60e51b81526004016112659190613890565b60006001600160e01b031982167f3b3b57de00000000000000000000000000000000000000000000000000000000148061341757506001600160e01b031982167ff1cb7e0600000000000000000000000000000000000000000000000000000000145b8061094357506109438260006001600160e01b031982167f2203ab5600000000000000000000000000000000000000000000000000000000148061094357506109438260006001600160e01b031982167fd700ff3300000000000000000000000000000000000000000000000000000000148061094357506109438260006001600160e01b031982167f4fbf043300000000000000000000000000000000000000000000000000000000148061094357506301ffc9a760e01b6001600160e01b0319831614610943565b5080546134ed90613ca3565b6000825580601f106134fd575050565b601f01602090049060005260206000209081019061136a91905b8082111561352b5760008155600101613517565b5090565b80356001600160e01b03198116811461354757600080fd5b919050565b60006020828403121561355e57600080fd5b6113988261352f565b60008083601f84011261357957600080fd5b50813567ffffffffffffffff81111561359157600080fd5b60208301915083602082850101111561100557600080fd5b6000806000604084860312156135be57600080fd5b83359250602084013567ffffffffffffffff8111156135dc57600080fd5b6135e886828701613567565b9497909650939450505050565b60008060008060006060868803121561360d57600080fd5b85359450602086013567ffffffffffffffff8082111561362c57600080fd5b61363889838a01613567565b9096509450604088013591508082111561365157600080fd5b5061365e88828901613567565b969995985093965092949392505050565b6000806040838503121561368257600080fd5b823591506136926020840161352f565b90509250929050565b600080604083850312156136ae57600080fd5b50508035926020909101359150565b60005b838110156136d85781810151838201526020016136c0565b50506000910152565b600081518084526136f98160208601602086016136bd565b601f01601f19169290920160200192915050565b828152604060208201526000611dae60408301846136e1565b60008060006060848603121561373b57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561376457600080fd5b5035919050565b6001600160a01b038116811461136a57600080fd5b60006020828403121561379257600080fd5b81356113988161376b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126137c457600080fd5b813567ffffffffffffffff808211156137df576137df61379d565b604051601f8301601f19908116603f011681019082821181831017156138075761380761379d565b8160405283815286602085880101111561382057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561385357600080fd5b823561385e8161376b565b9150602083013567ffffffffffffffff81111561387a57600080fd5b613886858286016137b3565b9150509250929050565b60208152600061139860208301846136e1565b600080600080606085870312156138b957600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156138de57600080fd5b6138ea87828801613567565b95989497509550505050565b60008060006060848603121561390b57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561393057600080fd5b61393c868287016137b3565b9150509250925092565b8035801515811461354757600080fd5b6000806040838503121561396957600080fd5b82356139748161376b565b915061369260208401613946565b60008060006060848603121561399757600080fd5b8335925060208401356139a98161376b565b91506139b760408501613946565b90509250925092565b6000806000606084860312156139d557600080fd5b8335925060208401359150604084013561ffff811681146139f557600080fd5b809150509250925092565b600080600060608486031215613a1557600080fd5b8335613a208161376b565b92506020840135915060408401356139f58161376b565b60008083601f840112613a4957600080fd5b50813567ffffffffffffffff811115613a6157600080fd5b6020830191508360208260051b850101111561100557600080fd5b60008060208385031215613a8f57600080fd5b823567ffffffffffffffff811115613aa657600080fd5b613ab285828601613a37565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613b1357603f19888603018452613b018583516136e1565b94509285019290850190600101613ae5565b5092979650505050505050565b60008060408385031215613b3357600080fd5b823591506020830135613b458161376b565b809150509250929050565b600080600060408486031215613b6557600080fd5b83359250602084013567ffffffffffffffff811115613b8357600080fd5b6135e886828701613a37565b600080600060608486031215613ba457600080fd5b83359250613bb46020850161352f565b915060408401356139f58161376b565b60008060408385031215613bd757600080fd5b8235613be28161376b565b91506020830135613b458161376b565b60008060008060808587031215613c0857600080fd5b8435613c138161376b565b93506020850135613c238161376b565b92506040850135613c338161376b565b91506060850135613c438161376b565b939692955090935050565b60008251613c608184602087016136bd565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561094357610943613c6a565b8183823760009101908152919050565b600181811c90821680613cb757607f821691505b602082108103613cd757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611d9c57600081815260208120601f850160051c81016020861015613d045750805b601f850160051c820191505b81811015613d2357828155600101613d10565b505050505050565b67ffffffffffffffff831115613d4357613d4361379d565b613d5783613d518354613ca3565b83613cdd565b6000601f841160018114613d8b5760008515613d735750838201355b600019600387901b1c1916600186901b1783556119dd565b600083815260209020601f19861690835b82811015613dbc5786850135825560209485019460019092019101613d9c565b5086821015613dd95760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000613e28604083018688613deb565b8281036020840152613e3b818587613deb565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b602081526000611dae602083018486613deb565b600067ffffffffffffffff808316818103613e8d57613e8d613c6a565b6001019392505050565b815167ffffffffffffffff811115613eb157613eb161379d565b613ec581613ebf8454613ca3565b84613cdd565b602080601f831160018114613efa5760008415613ee25750858301515b600019600386901b1c1916600185901b178555613d23565b600085815260208120601f198616915b82811015613f2957888601518255948401946001909101908401613f0a565b5085821015613f475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000613f6a60408301866136e1565b8281036020840152613257818587613deb565b600060208284031215613f8f57600080fd5b81516113988161376b565b600060208284031215613fac57600080fd5b5051919050565b600061ffff821680613fc757613fc7613c6a565b6000190192915050565b604081526000613fe460408301856136e1565b905061ffff831660208301529392505050565b600061ffff808316818103613e8d57613e8d613c6a565b60608152600061402160608301866136e1565b61ffff85166020840152828103604084015261325781856136e1565b8082018082111561094357610943613c6a565b6000808335601e1984360301811261406757600080fd5b83018035915067ffffffffffffffff82111561408257600080fd5b60200191503681900382131561100557600080fd5b600080858511156140a757600080fd5b838611156140b457600080fd5b5050820193919092039150565b8035602083101561094357600019602084900360031b1b1692915050565b6000600182016140f1576140f1613c6a565b5060010190565b634e487b7160e01b600052600160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122010099458684fb48ad38c646845de2e82b477a5a9f6590e8c199e0205caf4bfbb64736f6c63430008110033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x20 PUSH3 0x26 JUMP JUMPDEST PUSH3 0xE7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND EQ PUSH3 0xE5 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x416B PUSH3 0x11F PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x11D5 ADD MSTORE DUP2 DUP2 PUSH2 0x1270 ADD MSTORE DUP2 DUP2 PUSH2 0x13A9 ADD MSTORE DUP2 DUP2 PUSH2 0x143F ADD MSTORE PUSH2 0x153A ADD MSTORE PUSH2 0x416B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2C6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x179 JUMPI DUP1 PUSH4 0xBC1C58D1 GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0xE32954EB GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xF1CB7E06 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF1CB7E06 EQ PUSH2 0x8D8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x8F8 JUMPI DUP1 PUSH4 0xF8C8765E EQ PUSH2 0x918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE32954EB EQ PUSH2 0x84F JUMPI DUP1 PUSH4 0xE59D895D EQ PUSH2 0x86F JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x88F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCE3DECDC GT PUSH2 0xBB JUMPI DUP1 PUSH4 0xCE3DECDC EQ PUSH2 0x7BF JUMPI DUP1 PUSH4 0xD5FA2B00 EQ PUSH2 0x7DF JUMPI DUP1 PUSH4 0xD700FF33 EQ PUSH2 0x7FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC1C58D1 EQ PUSH2 0x737 JUMPI DUP1 PUSH4 0xC8690233 EQ PUSH2 0x757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA4B91A01 GT PUSH2 0x12D JUMPI DUP1 PUSH4 0xA8FA5682 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0xA8FA5682 EQ PUSH2 0x699 JUMPI DUP1 PUSH4 0xA9784B3E EQ PUSH2 0x6B9 JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x70A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA4B91A01 EQ PUSH2 0x659 JUMPI DUP1 PUSH4 0xA8E5FBC0 EQ PUSH2 0x679 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8B95DD71 GT PUSH2 0x15E JUMPI DUP1 PUSH4 0x8B95DD71 EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x61B JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5C6 JUMPI DUP1 PUSH4 0x77372213 EQ PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3B3B57DE GT PUSH2 0x227 JUMPI DUP1 PUSH4 0x59D1D43C GT PUSH2 0x1DB JUMPI DUP1 PUSH4 0x623195B0 GT PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x623195B0 EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x62C50A13 EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0x691F3431 EQ PUSH2 0x5A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x59D1D43C EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x5C98042B EQ PUSH2 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4CBF6BA4 GT PUSH2 0x20C JUMPI DUP1 PUSH4 0x4CBF6BA4 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x4F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3B3B57DE EQ PUSH2 0x448 JUMPI DUP1 PUSH4 0x3F15457F EQ PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x29CD62EA GT PUSH2 0x27E JUMPI DUP1 PUSH4 0x3603D758 GT PUSH2 0x263 JUMPI DUP1 PUSH4 0x3603D758 EQ PUSH2 0x3E8 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0x37BF7A2F EQ PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x29CD62EA EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0x304E6ADE EQ PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10F13A8C GT PUSH2 0x2AF JUMPI DUP1 PUSH4 0x10F13A8C EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0x124A319C EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0x2203AB56 EQ PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2CB JUMPI DUP1 PUSH4 0xAF179D7 EQ PUSH2 0x300 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x2E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x354C JUMP JUMPDEST PUSH2 0x938 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x35A9 JUMP JUMPDEST PUSH2 0x949 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0x35F5 JUMP JUMPDEST PUSH2 0xB55 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x362 PUSH2 0x35D CALLDATASIZE PUSH1 0x4 PUSH2 0x366F JUMP JUMPDEST PUSH2 0xC24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x395 CALLDATASIZE PUSH1 0x4 PUSH2 0x369B JUMP JUMPDEST PUSH2 0xED2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F7 SWAP3 SWAP2 SWAP1 PUSH2 0x370D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x3C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3726 JUMP JUMPDEST PUSH2 0x100C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x3E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x35A9 JUMP JUMPDEST PUSH2 0x10A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x403 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH2 0x1126 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x423 CALLDATASIZE PUSH1 0x4 PUSH2 0x3780 JUMP JUMPDEST PUSH2 0x11CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD6 SLOAD PUSH2 0x362 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x362 PUSH2 0x463 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH2 0x136D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD4 SLOAD PUSH2 0x362 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x369B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCF DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 DUP4 MSTORE SWAP4 DUP2 MSTORE DUP4 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH2 0xFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x320 PUSH2 0x4F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3840 JUMP JUMPDEST PUSH2 0x139F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x50B PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x534 CALLDATASIZE PUSH1 0x4 PUSH2 0x35A9 JUMP JUMPDEST PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x3890 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH2 0x16D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A3 JUMP JUMPDEST PUSH2 0x1795 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD7 SLOAD PUSH2 0x362 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x5C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH2 0x1834 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x1870 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x5F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x35A9 JUMP JUMPDEST PUSH2 0x1884 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x607 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x616 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F6 JUMP JUMPDEST PUSH2 0x1902 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x362 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x654 CALLDATASIZE PUSH1 0x4 PUSH2 0x3956 JUMP JUMPDEST PUSH2 0x19E4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x674 CALLDATASIZE PUSH1 0x4 PUSH2 0x3982 JUMP JUMPDEST PUSH2 0x1ACE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x685 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD5 SLOAD PUSH2 0x362 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x6B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x39C0 JUMP JUMPDEST PUSH2 0x1B9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x6D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A00 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP4 MSTORE SWAP4 DUP2 MSTORE DUP4 DUP3 KECCAK256 SWAP3 SWAP1 SWAP5 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x72A PUSH2 0x725 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A7C JUMP JUMPDEST PUSH2 0x1BEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x3ABE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x743 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x752 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH2 0x1BF9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x763 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7AA PUSH2 0x772 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD2 DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x7DA CALLDATASIZE PUSH1 0x4 PUSH2 0x35A9 JUMP JUMPDEST PUSH2 0x1C35 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x7FA CALLDATASIZE PUSH1 0x4 PUSH2 0x3B20 JUMP JUMPDEST PUSH2 0x1D7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x836 PUSH2 0x81A CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x85B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x72A PUSH2 0x86A CALLDATASIZE PUSH1 0x4 PUSH2 0x3B50 JUMP JUMPDEST PUSH2 0x1DA1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x88A CALLDATASIZE PUSH1 0x4 PUSH2 0x3B8F JUMP JUMPDEST PUSH2 0x1DB6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x89B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x8AA CALLDATASIZE PUSH1 0x4 PUSH2 0x3BC4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x8F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x369B JUMP JUMPDEST PUSH2 0x1E6C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x904 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x913 CALLDATASIZE PUSH1 0x4 PUSH2 0x3780 JUMP JUMPDEST PUSH2 0x1F36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x933 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BF2 JUMP JUMPDEST PUSH2 0x1FC3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x943 DUP3 PUSH2 0x2244 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH2 0x953 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x95C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH1 0x1F DUP8 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP6 DUP3 MSTORE DUP4 SWAP3 PUSH1 0x60 SWAP3 DUP4 SWAP3 DUP6 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 DUP4 SWAP2 PUSH2 0x9C4 SWAP2 DUP4 SWAP2 DUP14 SWAP1 DUP14 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP4 SWAP3 POP POP PUSH2 0x2439 SWAP1 POP JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 MLOAD MLOAD PUSH1 0x20 DUP3 ADD MLOAD LT ISZERO PUSH2 0xAEE JUMPI DUP7 PUSH2 0xFFFF AND PUSH1 0x0 SUB PUSH2 0xA2C JUMPI DUP1 PUSH1 0x40 ADD MLOAD SWAP7 POP PUSH2 0x9F1 DUP2 PUSH2 0x249A JUMP JUMPDEST SWAP5 POP DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA04 SWAP2 SWAP1 PUSH2 0x3C4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0xA25 DUP2 PUSH2 0x24BB JUMP JUMPDEST SWAP4 POP PUSH2 0xAE0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA37 DUP3 PUSH2 0x249A JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD PUSH2 0xFFFF AND DUP9 PUSH2 0xFFFF AND EQ ISZERO DUP1 PUSH2 0xA5B JUMPI POP PUSH2 0xA59 DUP7 DUP3 PUSH2 0x24D7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xADE JUMPI PUSH2 0xAB7 DUP13 DUP8 DUP11 DUP15 DUP15 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP PUSH1 0x20 DUP9 ADD MLOAD DUP14 SWAP2 POP PUSH2 0xAAE SWAP1 DUP3 SWAP1 PUSH2 0x3C80 JUMP JUMPDEST DUP12 MLOAD ISZERO DUP11 PUSH2 0x24F5 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD SWAP8 POP DUP2 PUSH1 0x20 ADD MLOAD SWAP7 POP DUP1 SWAP6 POP DUP6 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP4 POP PUSH2 0xADB DUP3 PUSH2 0x24BB JUMP JUMPDEST SWAP5 POP JUMPDEST POP JUMPDEST PUSH2 0xAE9 DUP2 PUSH2 0x2762 JUMP JUMPDEST PUSH2 0x9C7 JUMP JUMPDEST POP DUP4 MLOAD ISZERO PUSH2 0xB49 JUMPI PUSH2 0xB49 DUP11 DUP6 DUP9 DUP13 DUP13 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP13 SWAP3 POP PUSH2 0xB40 SWAP2 POP DUP3 SWAP1 POP DUP16 PUSH2 0x3C80 JUMP JUMPDEST DUP10 MLOAD ISZERO DUP9 PUSH2 0x24F5 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 PUSH2 0xB5F DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0xB68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD3 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 MLOAD DUP5 SWAP2 DUP5 SWAP2 PUSH2 0xBAA SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH2 0x3C93 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP2 DUP3 PUSH2 0xBC5 SWAP3 SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST POP DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xBD6 SWAP3 SWAP2 SWAP1 PUSH2 0x3C93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP7 PUSH32 0x448BC014F1536726CF8D54FF3D6481ED3CBC683C2591CA204274009AFA09B1A1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0xC14 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3E14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD0 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xC7A JUMPI SWAP1 POP PUSH2 0x943 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC85 DUP6 PUSH2 0x136D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCA0 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x943 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0xD0D SWAP2 SWAP1 PUSH2 0x3C4E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD48 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD4D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 PUSH2 0xD60 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT JUMPDEST DUP1 PUSH2 0xDA2 JUMPI POP DUP1 PUSH1 0x1F DUP2 MLOAD DUP2 LT PUSH2 0xD79 JUMPI PUSH2 0xD79 PUSH2 0x3E46 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO JUMPDEST ISZERO PUSH2 0xDB4 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x943 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0xE1F SWAP2 SWAP1 PUSH2 0x3C4E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE5A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0xE73 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT JUMPDEST DUP1 PUSH2 0xEB5 JUMPI POP DUP1 PUSH1 0x1F DUP2 MLOAD DUP2 LT PUSH2 0xE8C JUMPI PUSH2 0xE8C PUSH2 0x3E46 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO JUMPDEST ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x943 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCA DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x60 SWAP1 PUSH1 0x1 JUMPDEST DUP5 DUP2 GT PUSH2 0xFEC JUMPI DUP1 DUP6 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xF35 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xF31 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST SWAP1 POP GT JUMPDEST ISZERO PUSH2 0xFE4 JUMPI DUP1 DUP3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 DUP1 SLOAD PUSH2 0xF59 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF85 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFD2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFA7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFD2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFB5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 POP SWAP4 POP POP POP PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x1 SHL PUSH2 0xF05 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP3 PUSH2 0x1016 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x101F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0xC9 DUP4 MSTORE DUP5 DUP2 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0xD2 DUP4 MSTORE DUP5 DUP2 KECCAK256 DUP10 DUP3 MSTORE DUP4 MSTORE DUP5 SWAP1 KECCAK256 SWAP3 MLOAD DUP4 SSTORE MLOAD PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE DUP6 SWAP2 PUSH32 0x1D6F5E03D3F63EB58751986629A5439BAEE5079FF04F345BECB66E23EB154E46 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP3 PUSH2 0x10B2 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x10BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCC DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x10F3 DUP4 DUP6 DUP4 PUSH2 0x3D2B JUMP JUMPDEST POP DUP4 PUSH32 0xE379C1624ED7E714CC0937528A32359D69D5281337765313DBA4E081B72D7578 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x109A SWAP3 SWAP2 SWAP1 PUSH2 0x3E5C JUMP JUMPDEST DUP1 PUSH2 0x1130 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP2 PUSH2 0x115D DUP4 PUSH2 0x3E70 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x100 SWAP3 SWAP1 SWAP3 EXP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 DUP2 MUL NOT SWAP1 SWAP4 AND SWAP2 DUP4 AND MUL OR SWAP1 SWAP2 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND DUP2 MSTORE DUP5 SWAP3 POP PUSH32 0xC6621CCB8F3F5A04BB6502154B2CAF6ADF5983FE76DFEF1CFC9C42E3579DB444 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x126E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12C9 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1345 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x134E DUP2 PUSH2 0x284A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x136A SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x2852 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x137B DUP4 PUSH1 0x3C PUSH2 0x1E6C JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x138F JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1398 DUP2 PUSH2 0x29F2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x143D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1498 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1514 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x151D DUP3 PUSH2 0x284A JUMP JUMPDEST PUSH2 0x1529 DUP3 DUP3 PUSH1 0x1 PUSH2 0x2852 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x15CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD3 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 MLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1634 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x3C93 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x164D SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1679 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x16C6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x169B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x16C6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x16A9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCD DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1710 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x173C SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1789 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x175E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1789 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x176C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP4 PUSH2 0x179F DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x17A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x17B4 PUSH1 0x1 DUP3 PUSH2 0x3C80 JUMP JUMPDEST AND ISZERO PUSH2 0x17BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCA DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x17FF DUP4 DUP6 DUP4 PUSH2 0x3D2B JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP5 SWAP1 DUP7 SWAP1 PUSH32 0xAA121BBEEF5F32F5961A2A28966E769023910FC9479059EE3495D4C1A696EFE3 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD1 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1710 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST PUSH2 0x1878 PUSH2 0x2A1A JUMP JUMPDEST PUSH2 0x1882 PUSH1 0x0 PUSH2 0x2A74 JUMP JUMPDEST JUMP JUMPDEST DUP3 PUSH2 0x188E DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1897 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD1 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x18CF DUP4 DUP6 DUP4 PUSH2 0x3D2B JUMP JUMPDEST POP DUP4 PUSH32 0xB7D29E911041E8D9B843369E890BCB72C9388692BA48B65AC54E7214C4C348F7 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x109A SWAP3 SWAP2 SWAP1 PUSH2 0x3E5C JUMP JUMPDEST DUP3 PUSH2 0x190C DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1915 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH32 0x65412581168E88A1E60C6459D7F44AE83AD0832E670826C05A4E2476B57AF752 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1947 SWAP3 SWAP2 SWAP1 PUSH2 0x370D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x3C DUP4 SUB PUSH2 0x199E JUMPI DUP4 PUSH32 0x52D7D861F09AB3D26239D492E8968629F95E9E318CF0B73BFDDC441522A15FD2 PUSH2 0x1982 DUP5 PUSH2 0x29F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCB DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x19DD DUP4 DUP3 PUSH2 0x3E97 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER SUB PUSH2 0x1A62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER SUB PUSH2 0x1B26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53657474696E672064656C65676174652073746174757320666F722073656C66 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1265 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP4 DUP5 MSTORE SWAP3 DUP7 SWAP2 PUSH32 0xF0DDB3B04746704017F9AA8BD728FCC2C1D11675041205350018915F5E4750A0 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x164D SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1398 PUSH1 0x0 DUP5 DUP5 PUSH2 0x2AD3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCC DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1710 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP3 PUSH2 0x1C3F DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1C48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP1 DUP5 MSTORE PUSH1 0xCD DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP9 DUP6 MSTORE SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH2 0x1C84 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB0 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1CFD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1CD2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1CFD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CE0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH8 0xFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP2 SWAP3 POP PUSH2 0x1D35 SWAP1 POP DUP6 DUP8 DUP4 PUSH2 0x3D2B JUMP JUMPDEST POP DUP6 PUSH32 0x8F15ED4B723EF428F250961DA8315675B507046737E19319FC1A4D81BFE87F85 DUP3 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1D6A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3F57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x1D84 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1D8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D9C DUP4 PUSH1 0x3C PUSH2 0x616 DUP6 PUSH2 0x2CAC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DAE DUP5 DUP5 DUP5 PUSH2 0x2AD3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH2 0x1DC0 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1DC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD0 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE DUP7 SWAP2 PUSH32 0x7C69F06BEA0BDEF565B709E93A147836B0063BA2DD89F02D0B7E8D931E6A6DAA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCB DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1EB0 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1EDC SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1F29 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1EFE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1F29 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1F0C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1F3E PUSH2 0x2A1A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1FBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x136A DUP2 PUSH2 0x2A74 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1FE3 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x1FFD JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FFD JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x206F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x2092 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x209A PUSH2 0x2CE5 JUMP JUMPDEST PUSH1 0xD4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP3 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0xD5 DUP1 SLOAD DUP9 DUP4 AND SWAP1 DUP5 AND OR SWAP1 SSTORE PUSH1 0xD6 DUP1 SLOAD DUP8 DUP4 AND SWAP1 DUP5 AND OR SWAP1 SSTORE PUSH1 0xD7 DUP1 SLOAD SWAP2 DUP7 AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x214C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2170 SWAP2 SWAP1 PUSH2 0x3F7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1E83409A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x1E83409A SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x21D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21F6 SWAP2 SWAP1 PUSH2 0x3F9A JUMP JUMPDEST POP POP DUP1 ISZERO PUSH2 0x19DD JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x59D1D43C00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x2D6A JUMP JUMPDEST PUSH1 0xD6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x22A8 JUMPI POP PUSH1 0xD7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST ISZERO PUSH2 0x22B5 JUMPI POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xD4 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2323 SWAP2 SWAP1 PUSH2 0x3F7D JUMP JUMPDEST PUSH1 0xD5 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP3 AND SUB PUSH2 0x23C5 JUMPI PUSH1 0xD5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x239E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23C2 SWAP2 SWAP1 PUSH2 0x3F7D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x23FF JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x1398 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1398 JUMP JUMPDEST PUSH2 0x2487 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x943 DUP2 PUSH2 0x2762 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 SWAP2 PUSH2 0x943 SWAP2 PUSH2 0x24B2 SWAP1 DUP3 PUSH2 0x2DA8 JUMP JUMPDEST DUP5 MLOAD SWAP2 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x60 SWAP2 PUSH2 0x943 SWAP2 PUSH2 0x24B2 SWAP1 DUP3 SWAP1 PUSH2 0x3C80 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x1398 JUMPI POP PUSH2 0x1398 DUP4 PUSH1 0x0 DUP5 PUSH1 0x0 DUP8 MLOAD PUSH2 0x2E79 JUMP JUMPDEST DUP7 MLOAD PUSH1 0x20 DUP9 ADD KECCAK256 PUSH1 0x0 PUSH2 0x2509 DUP8 DUP8 DUP8 PUSH2 0x2E02 JUMP JUMPDEST SWAP1 POP DUP4 ISZERO PUSH2 0x2633 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x2554 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST ISZERO SWAP1 POP PUSH2 0x25B3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF AND SWAP2 PUSH2 0x2597 DUP4 PUSH2 0x3FB3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x25F4 SWAP2 PUSH2 0x34E1 JUMP JUMPDEST DUP10 PUSH32 0x3528ED0C2A3EBC993B12CE3C16BB382F9C7D88EF7D8A1BF290EAF35955A1207 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0x2626 SWAP3 SWAP2 SWAP1 PUSH2 0x3FD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xB49 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x2676 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SUB PUSH2 0x26D7 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF AND SWAP2 PUSH2 0x26BB DUP4 PUSH2 0x3FF7 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x2719 DUP3 DUP3 PUSH2 0x3E97 JUMP JUMPDEST POP DUP10 PUSH32 0x52A608B3303A48862D07A73D82FA221318C0027FBBCFB1B2329BFACE3F19FF2B DUP11 DUP11 DUP5 PUSH1 0x40 MLOAD PUSH2 0x274E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x400E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 MLOAD MLOAD GT PUSH2 0x2779 JUMPI POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278D DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x2DA8 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x279C SWAP2 SWAP1 PUSH2 0x403D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH2 0x27AB SWAP1 DUP3 PUSH2 0x2E9C JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x27BF PUSH1 0x2 DUP3 PUSH2 0x403D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH2 0x27CE SWAP1 DUP3 PUSH2 0x2E9C JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x27E2 PUSH1 0x2 DUP3 PUSH2 0x403D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH2 0x27F1 SWAP1 DUP3 PUSH2 0x2EC4 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x2807 PUSH1 0x4 DUP3 PUSH2 0x403D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2819 SWAP1 DUP4 PUSH2 0x2E9C JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 POP PUSH2 0x282A PUSH1 0x2 DUP4 PUSH2 0x403D JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 POP PUSH2 0x283D DUP2 DUP4 PUSH2 0x403D JUMP JUMPDEST PUSH1 0xC0 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x136A PUSH2 0x2A1A JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2885 JUMPI PUSH2 0x1D9C DUP4 PUSH2 0x2EEE JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x28DF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x28DC SWAP2 DUP2 ADD SWAP1 PUSH2 0x3F9A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2951 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x29E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST POP PUSH2 0x1D9C DUP4 DUP4 DUP4 PUSH2 0x2FB9 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x14 EQ PUSH2 0x2A02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 ADD MLOAD PUSH13 0x1000000000000000000000000 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1882 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2AEE JUMPI PUSH2 0x2AEE PUSH2 0x379D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B21 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2B0C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2CA4 JUMPI DUP5 ISZERO PUSH2 0x2BEC JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x2B49 JUMPI PUSH2 0x2B49 PUSH2 0x3E46 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2B5B SWAP2 SWAP1 PUSH2 0x4050 JUMP JUMPDEST PUSH2 0x2B6A SWAP2 PUSH1 0x24 SWAP2 PUSH1 0x4 SWAP2 PUSH2 0x4097 JUMP JUMPDEST PUSH2 0x2B73 SWAP2 PUSH2 0x40C1 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 EQ PUSH2 0x2BEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D756C746963616C6C3A20416C6C207265636F726473206D7573742068617665 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2061206D61746368696E67206E616D6568617368000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x2C02 JUMPI PUSH2 0x2C02 PUSH2 0x3E46 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2C14 SWAP2 SWAP1 PUSH2 0x4050 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C22 SWAP3 SWAP2 SWAP1 PUSH2 0x3C93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2C5D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2C62 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2C71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2C84 JUMPI PUSH2 0x2C84 PUSH2 0x3E46 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP DUP1 DUP1 PUSH2 0x2C9C SWAP1 PUSH2 0x40DF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2B27 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x14 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP PUSH13 0x1000000000000000000000000 SWAP3 SWAP1 SWAP3 MUL PUSH1 0x20 DUP4 ADD MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2D62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x1882 PUSH2 0x2FE4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xC869023300000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x306A JUMP JUMPDEST PUSH1 0x0 DUP2 JUMPDEST DUP4 MLOAD DUP2 LT PUSH2 0x2DBC JUMPI PUSH2 0x2DBC PUSH2 0x40F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DC8 DUP6 DUP4 PUSH2 0x30A8 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH2 0x2DD8 DUP2 PUSH1 0x1 PUSH2 0x403D JUMP JUMPDEST PUSH2 0x2DE2 SWAP1 DUP4 PUSH2 0x403D JUMP JUMPDEST SWAP2 POP DUP1 PUSH1 0x0 SUB PUSH2 0x2DF2 JUMPI POP PUSH2 0x2DF8 JUMP JUMPDEST POP PUSH2 0x2DAC JUMP JUMPDEST PUSH2 0x1DAE DUP4 DUP3 PUSH2 0x3C80 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x2E11 DUP4 DUP6 PUSH2 0x403D JUMP JUMPDEST GT ISZERO PUSH2 0x2E1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2E37 JUMPI PUSH2 0x2E37 PUSH2 0x379D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2E61 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP7 DUP7 ADD ADD PUSH2 0xEC7 DUP3 DUP3 DUP8 PUSH2 0x30CC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E86 DUP5 DUP5 DUP5 PUSH2 0x3122 JUMP JUMPDEST PUSH2 0x2E91 DUP8 DUP8 DUP6 PUSH2 0x3122 JUMP JUMPDEST EQ SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2EAC DUP4 PUSH1 0x2 PUSH2 0x403D JUMP JUMPDEST GT ISZERO PUSH2 0x2EB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x2 ADD MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2ED4 DUP4 PUSH1 0x4 PUSH2 0x403D JUMP JUMPDEST GT ISZERO PUSH2 0x2EDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x4 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x2F6B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2FC2 DUP4 PUSH2 0x3146 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x2FCF JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x1D9C JUMPI PUSH2 0x2FDE DUP4 DUP4 PUSH2 0x3186 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3061 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x1882 CALLER PUSH2 0x2A74 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x691F343100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x31AB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x30BC JUMPI PUSH2 0x30BC PUSH2 0x3E46 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x3104 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH2 0x30E3 PUSH1 0x20 DUP5 PUSH2 0x403D JUMP JUMPDEST SWAP3 POP PUSH2 0x30F0 PUSH1 0x20 DUP4 PUSH2 0x403D JUMP JUMPDEST SWAP2 POP PUSH2 0x30FD PUSH1 0x20 DUP3 PUSH2 0x3C80 JUMP JUMPDEST SWAP1 POP PUSH2 0x30CC JUMP JUMPDEST SWAP1 MLOAD DUP3 MLOAD PUSH1 0x20 SWAP3 SWAP1 SWAP3 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP2 AND OR SWAP1 MSTORE JUMP JUMPDEST DUP3 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x3131 DUP4 DUP6 PUSH2 0x403D JUMP JUMPDEST GT ISZERO PUSH2 0x313C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x314F DUP2 PUSH2 0x2EEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1398 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x410F PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x31E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x124A319C00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x3261 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x3206 SWAP2 SWAP1 PUSH2 0x3C4E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3241 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3246 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3257 DUP7 DUP4 DUP4 DUP8 PUSH2 0x32D3 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xA8FA568200000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x32C4 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x5C98042B00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x334C JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3342 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x333B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x333B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1265 JUMP JUMPDEST POP DUP2 PUSH2 0x1DAE JUMP JUMPDEST PUSH2 0x1DAE DUP4 DUP4 PUSH2 0x338A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xBC1C58D100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x33B4 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x339A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1265 SWAP2 SWAP1 PUSH2 0x3890 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x3B3B57DE00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x3417 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xF1CB7E0600000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x2203AB5600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xD700FF3300000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x4FBF043300000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x943 JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x34ED SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x34FD JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x136A SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x352B JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3517 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x3547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x355E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1398 DUP3 PUSH2 0x352F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3579 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3591 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x35BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x35DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35E8 DUP7 DUP3 DUP8 ADD PUSH2 0x3567 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x360D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x362C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3638 DUP10 DUP4 DUP11 ADD PUSH2 0x3567 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x365E DUP9 DUP3 DUP10 ADD PUSH2 0x3567 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3682 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x3692 PUSH1 0x20 DUP5 ADD PUSH2 0x352F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x36AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x36D8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x36C0 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x36F9 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x36BD JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1DAE PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x36E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x373B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x136A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3792 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1398 DUP2 PUSH2 0x376B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x37C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x37DF JUMPI PUSH2 0x37DF PUSH2 0x379D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x3807 JUMPI PUSH2 0x3807 PUSH2 0x379D JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x3820 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x385E DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x387A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3886 DUP6 DUP3 DUP7 ADD PUSH2 0x37B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1398 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x36E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x38B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x38DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38EA DUP8 DUP3 DUP9 ADD PUSH2 0x3567 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x390B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3930 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x393C DUP7 DUP3 DUP8 ADD PUSH2 0x37B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3974 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP2 POP PUSH2 0x3692 PUSH1 0x20 DUP5 ADD PUSH2 0x3946 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x39A9 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP2 POP PUSH2 0x39B7 PUSH1 0x40 DUP6 ADD PUSH2 0x3946 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x39F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3A15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3A20 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x39F5 DUP2 PUSH2 0x376B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3A49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AB2 DUP6 DUP3 DUP7 ADD PUSH2 0x3A37 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3B13 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x3B01 DUP6 DUP4 MLOAD PUSH2 0x36E1 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3AE5 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3B45 DUP2 PUSH2 0x376B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3B65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35E8 DUP7 DUP3 DUP8 ADD PUSH2 0x3A37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3BA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x3BB4 PUSH1 0x20 DUP6 ADD PUSH2 0x352F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x39F5 DUP2 PUSH2 0x376B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3BD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3BE2 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3B45 DUP2 PUSH2 0x376B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3C08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3C13 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3C23 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x3C33 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x3C43 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3C60 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x36BD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x943 JUMPI PUSH2 0x943 PUSH2 0x3C6A JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3CB7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3CD7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1D9C JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x3D04 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D23 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3D10 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x3D43 JUMPI PUSH2 0x3D43 PUSH2 0x379D JUMP JUMPDEST PUSH2 0x3D57 DUP4 PUSH2 0x3D51 DUP4 SLOAD PUSH2 0x3CA3 JUMP JUMPDEST DUP4 PUSH2 0x3CDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3D8B JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x3D73 JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x19DD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3DBC JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x3D9C JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x3DD9 JUMPI PUSH1 0x0 NOT PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3E28 PUSH1 0x40 DUP4 ADD DUP7 DUP9 PUSH2 0x3DEB JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3E3B DUP2 DUP6 DUP8 PUSH2 0x3DEB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1DAE PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x3DEB JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x3E8D JUMPI PUSH2 0x3E8D PUSH2 0x3C6A JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EB1 JUMPI PUSH2 0x3EB1 PUSH2 0x379D JUMP JUMPDEST PUSH2 0x3EC5 DUP2 PUSH2 0x3EBF DUP5 SLOAD PUSH2 0x3CA3 JUMP JUMPDEST DUP5 PUSH2 0x3CDD JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3EFA JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3EE2 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x3D23 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3F29 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x3F0A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x3F47 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3F6A PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x36E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3257 DUP2 DUP6 DUP8 PUSH2 0x3DEB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1398 DUP2 PUSH2 0x376B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND DUP1 PUSH2 0x3FC7 JUMPI PUSH2 0x3FC7 PUSH2 0x3C6A JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3FE4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x36E1 JUMP JUMPDEST SWAP1 POP PUSH2 0xFFFF DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x3E8D JUMPI PUSH2 0x3E8D PUSH2 0x3C6A JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4021 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x36E1 JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x20 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3257 DUP2 DUP6 PUSH2 0x36E1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x943 JUMPI PUSH2 0x943 PUSH2 0x3C6A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x4067 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4082 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x40A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x40B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x20 DUP4 LT ISZERO PUSH2 0x943 JUMPI PUSH1 0x0 NOT PUSH1 0x20 DUP5 SWAP1 SUB PUSH1 0x3 SHL SHL AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x40F1 JUMPI PUSH2 0x40F1 PUSH2 0x3C6A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220100994 PC PUSH9 0x4FB48AD38C646845DE 0x2E DUP3 0xB4 PUSH24 0xA5A9F6590E8C199E0205CAF4BFBB64736F6C634300081100 CALLER ","sourceMap":"833:4654:20:-:0;;;1198:4:7;1155:48;;2457:53:20;;;;;;;;;-1:-1:-1;2481:22:20;:20;:22::i;:::-;833:4654;;5939:280:6;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:6;;216:2:46;5998:66:6;;;198:21:46;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:46;;;338:37;392:19;;5998:66:6;;;;;;;;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:6;6140:15;6125:30;;;;;;6174:28;;564:36:46;;;6174:28:6;;552:2:46;537:18;6174:28:6;;;;;;;6074:139;5939:280::o;422:184:46:-;833:4654:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ABI_4053":{"entryPoint":3794,"id":4053,"parameterSlots":2,"returnSlots":2},"@__Ownable_init_448":{"entryPoint":11493,"id":448,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_459":{"entryPoint":12260,"id":459,"parameterSlots":0,"returnSlots":0},"@_authorizeUpgrade_3654":{"entryPoint":10314,"id":3654,"parameterSlots":1,"returnSlots":0},"@_checkOwner_490":{"entryPoint":10778,"id":490,"parameterSlots":0,"returnSlots":0},"@_getImplementation_630":{"entryPoint":null,"id":630,"parameterSlots":0,"returnSlots":1},"@_msgSender_1583":{"entryPoint":null,"id":1583,"parameterSlots":0,"returnSlots":1},"@_multicall_3438":{"entryPoint":10963,"id":3438,"parameterSlots":3,"returnSlots":1},"@_revert_1554":{"entryPoint":13194,"id":1554,"parameterSlots":2,"returnSlots":0},"@_setImplementation_654":{"entryPoint":12014,"id":654,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_547":{"entryPoint":10868,"id":547,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_752":{"entryPoint":10322,"id":752,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_699":{"entryPoint":12217,"id":699,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_669":{"entryPoint":12614,"id":669,"parameterSlots":1,"returnSlots":0},"@addr_4149":{"entryPoint":4973,"id":4149,"parameterSlots":1,"returnSlots":1},"@addr_4213":{"entryPoint":7788,"id":4213,"parameterSlots":2,"returnSlots":1},"@addressToBytes_4273":{"entryPoint":11436,"id":4273,"parameterSlots":1,"returnSlots":1},"@approve_3742":{"entryPoint":6862,"id":3742,"parameterSlots":3,"returnSlots":0},"@bytesToAddress_4257":{"entryPoint":10738,"id":4257,"parameterSlots":1,"returnSlots":1},"@clearRecords_3905":{"entryPoint":4390,"id":3905,"parameterSlots":1,"returnSlots":0},"@contenthash_4333":{"entryPoint":7161,"id":4333,"parameterSlots":1,"returnSlots":1},"@dnsRecord_4599":{"entryPoint":7067,"id":4599,"parameterSlots":3,"returnSlots":1},"@done_2344":{"entryPoint":null,"id":2344,"parameterSlots":1,"returnSlots":1},"@ens_3543":{"entryPoint":null,"id":3543,"parameterSlots":0,"returnSlots":0},"@equals_5965":{"entryPoint":11897,"id":5965,"parameterSlots":5,"returnSlots":1},"@equals_6051":{"entryPoint":9431,"id":6051,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_1442":{"entryPoint":12678,"id":1442,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_1471":{"entryPoint":12777,"id":1471,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_1638":{"entryPoint":null,"id":1638,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_1649":{"entryPoint":null,"id":1649,"parameterSlots":1,"returnSlots":1},"@hasDNSRecords_4623":{"entryPoint":null,"id":4623,"parameterSlots":2,"returnSlots":1},"@initialize_3644":{"entryPoint":8131,"id":3644,"parameterSlots":4,"returnSlots":0},"@interfaceImplementer_5232":{"entryPoint":3108,"id":5232,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_3704":{"entryPoint":null,"id":3704,"parameterSlots":2,"returnSlots":1},"@isApprovedFor_3763":{"entryPoint":null,"id":3763,"parameterSlots":3,"returnSlots":1},"@isAuthorised_3828":{"entryPoint":8834,"id":3828,"parameterSlots":1,"returnSlots":1},"@isContract_1243":{"entryPoint":null,"id":1243,"parameterSlots":1,"returnSlots":1},"@iterateRRs_2327":{"entryPoint":9273,"id":2327,"parameterSlots":2,"returnSlots":1},"@keccak_5627":{"entryPoint":12578,"id":5627,"parameterSlots":3,"returnSlots":1},"@memcpy_6218":{"entryPoint":12492,"id":6218,"parameterSlots":3,"returnSlots":0},"@multicallWithNodeCheck_3455":{"entryPoint":7585,"id":3455,"parameterSlots":3,"returnSlots":1},"@multicall_3474":{"entryPoint":7147,"id":3474,"parameterSlots":2,"returnSlots":1},"@nameLength_2047":{"entryPoint":11688,"id":2047,"parameterSlots":2,"returnSlots":1},"@nameWrapper_3546":{"entryPoint":null,"id":3546,"parameterSlots":0,"returnSlots":0},"@name_2471":{"entryPoint":9370,"id":2471,"parameterSlots":1,"returnSlots":1},"@name_5313":{"entryPoint":6196,"id":5313,"parameterSlots":1,"returnSlots":1},"@next_2448":{"entryPoint":10082,"id":2448,"parameterSlots":1,"returnSlots":0},"@owner_476":{"entryPoint":null,"id":476,"parameterSlots":0,"returnSlots":1},"@proxiableUUID_1170":{"entryPoint":5421,"id":1170,"parameterSlots":0,"returnSlots":1},"@pubkey_5420":{"entryPoint":null,"id":5420,"parameterSlots":1,"returnSlots":2},"@rdata_2493":{"entryPoint":9403,"id":2493,"parameterSlots":1,"returnSlots":1},"@readUint16_6088":{"entryPoint":11932,"id":6088,"parameterSlots":2,"returnSlots":1},"@readUint32_6108":{"entryPoint":11972,"id":6108,"parameterSlots":2,"returnSlots":1},"@readUint8_6068":{"entryPoint":12456,"id":6068,"parameterSlots":2,"returnSlots":1},"@recordVersions_3864":{"entryPoint":null,"id":3864,"parameterSlots":0,"returnSlots":0},"@renounceOwnership_504":{"entryPoint":6256,"id":504,"parameterSlots":0,"returnSlots":0},"@setABI_3986":{"entryPoint":6037,"id":3986,"parameterSlots":4,"returnSlots":0},"@setAddr_4117":{"entryPoint":7546,"id":4117,"parameterSlots":2,"returnSlots":0},"@setAddr_4192":{"entryPoint":6402,"id":4192,"parameterSlots":3,"returnSlots":0},"@setApprovalForAll_3687":{"entryPoint":6628,"id":3687,"parameterSlots":2,"returnSlots":0},"@setContenthash_4315":{"entryPoint":4264,"id":4315,"parameterSlots":3,"returnSlots":0},"@setDNSRRSet_4830":{"entryPoint":9461,"id":4830,"parameterSlots":8,"returnSlots":0},"@setDNSRecords_4573":{"entryPoint":2377,"id":4573,"parameterSlots":3,"returnSlots":0},"@setInterface_5108":{"entryPoint":7606,"id":5108,"parameterSlots":3,"returnSlots":0},"@setName_5295":{"entryPoint":6276,"id":5295,"parameterSlots":3,"returnSlots":0},"@setPubkey_5388":{"entryPoint":4108,"id":5388,"parameterSlots":3,"returnSlots":0},"@setText_5491":{"entryPoint":2901,"id":5491,"parameterSlots":5,"returnSlots":0},"@setZonehash_4663":{"entryPoint":7221,"id":4663,"parameterSlots":3,"returnSlots":0},"@substring_6261":{"entryPoint":11778,"id":6261,"parameterSlots":3,"returnSlots":1},"@supportsInterface_1977":{"entryPoint":null,"id":1977,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3495":{"entryPoint":null,"id":3495,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3851":{"entryPoint":2360,"id":3851,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3926":{"entryPoint":null,"id":3926,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4074":{"entryPoint":null,"id":4074,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4241":{"entryPoint":13236,"id":4241,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4354":{"entryPoint":13132,"id":4354,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4709":{"entryPoint":12897,"id":4709,"parameterSlots":1,"returnSlots":1},"@supportsInterface_5253":{"entryPoint":12715,"id":5253,"parameterSlots":1,"returnSlots":1},"@supportsInterface_5334":{"entryPoint":12394,"id":5334,"parameterSlots":1,"returnSlots":1},"@supportsInterface_5441":{"entryPoint":11626,"id":5441,"parameterSlots":1,"returnSlots":1},"@supportsInterface_5534":{"entryPoint":8772,"id":5534,"parameterSlots":1,"returnSlots":1},"@text_5513":{"entryPoint":5618,"id":5513,"parameterSlots":3,"returnSlots":1},"@transferOwnership_527":{"entryPoint":7990,"id":527,"parameterSlots":1,"returnSlots":0},"@trustedETHController_3548":{"entryPoint":null,"id":3548,"parameterSlots":0,"returnSlots":0},"@trustedReverseRegistrar_3550":{"entryPoint":null,"id":3550,"parameterSlots":0,"returnSlots":0},"@upgradeToAndCall_1213":{"entryPoint":5023,"id":1213,"parameterSlots":2,"returnSlots":0},"@upgradeTo_1192":{"entryPoint":4555,"id":1192,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1510":{"entryPoint":13011,"id":1510,"parameterSlots":4,"returnSlots":1},"@zonehash_4681":{"entryPoint":5844,"id":4681,"parameterSlots":1,"returnSlots":1},"abi_decode_array_bytes_calldata_dyn_calldata":{"entryPoint":14903,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bool":{"entryPoint":14662,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":14259,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes4":{"entryPoint":13615,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":13671,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":14208,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":16253,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":15300,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bool":{"entryPoint":14678,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes32t_address":{"entryPoint":14848,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":14400,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":14972,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":14162,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":16282,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":15136,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":14722,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":15184,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32t_bytes32":{"entryPoint":14118,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_bytes32t_uint16":{"entryPoint":14784,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_bytes4":{"entryPoint":13935,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes4t_address":{"entryPoint":15247,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_bytes_calldata_ptr":{"entryPoint":13737,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_string_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_string_calldata_ptr":{"entryPoint":13813,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":13979,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256t_bytes_calldata_ptr":{"entryPoint":14499,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32t_uint256t_bytes_memory_ptr":{"entryPoint":14582,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes4":{"entryPoint":13644,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_ENS_$3320t_contract$_INameWrapper_$6917t_addresst_address":{"entryPoint":15346,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_bytes":{"entryPoint":14049,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":15851,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":15438,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":15507,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":15038,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":15964,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":16215,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_uint16__to_t_bytes_memory_ptr_t_uint16__fromStack_reversed":{"entryPoint":16337,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_uint16_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_uint16_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":16398,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_contract$_ENS_$3320__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_INameWrapper_$6917__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_string_calldata_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15892,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14480,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e0f8a6e7bdab31ebf5fea1195446f6f12fddc8619df8ea22a3ed3edf179dde30__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb190b006810059edc9ead724b9a58ef6d76fdad1e4f0c7d2965b67f98b3914a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14093,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":16464,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":16535,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":16445,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":15488,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":15581,"id":null,"parameterSlots":3,"returnSlots":0},"convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes32":{"entryPoint":16577,"id":null,"parameterSlots":2,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":16023,"id":null,"parameterSlots":2,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage":{"entryPoint":15659,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":14013,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint16":{"entryPoint":16307,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":15523,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint16":{"entryPoint":16375,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":16607,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint64":{"entryPoint":15984,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x01":{"entryPoint":16632,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x11":{"entryPoint":15466,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":15942,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":14237,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":14187,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:33354:46","statements":[{"nodeType":"YulBlock","src":"6:3:46","statements":[]},{"body":{"nodeType":"YulBlock","src":"62:171:46","statements":[{"nodeType":"YulAssignment","src":"72:29:46","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"94:6:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"81:12:46"},"nodeType":"YulFunctionCall","src":"81:20:46"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"72:5:46"}]},{"body":{"nodeType":"YulBlock","src":"211:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"220:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"223:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"213:6:46"},"nodeType":"YulFunctionCall","src":"213:12:46"},"nodeType":"YulExpressionStatement","src":"213:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"123:5:46"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"134:5:46"},{"kind":"number","nodeType":"YulLiteral","src":"141:66:46","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"130:3:46"},"nodeType":"YulFunctionCall","src":"130:78:46"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"120:2:46"},"nodeType":"YulFunctionCall","src":"120:89:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"113:6:46"},"nodeType":"YulFunctionCall","src":"113:97:46"},"nodeType":"YulIf","src":"110:117:46"}]},"name":"abi_decode_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"41:6:46","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"52:5:46","type":""}],"src":"14:219:46"},{"body":{"nodeType":"YulBlock","src":"307:115:46","statements":[{"body":{"nodeType":"YulBlock","src":"353:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"362:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"365:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"355:6:46"},"nodeType":"YulFunctionCall","src":"355:12:46"},"nodeType":"YulExpressionStatement","src":"355:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"328:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"337:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"324:3:46"},"nodeType":"YulFunctionCall","src":"324:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"349:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"320:3:46"},"nodeType":"YulFunctionCall","src":"320:32:46"},"nodeType":"YulIf","src":"317:52:46"},{"nodeType":"YulAssignment","src":"378:38:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"406:9:46"}],"functionName":{"name":"abi_decode_bytes4","nodeType":"YulIdentifier","src":"388:17:46"},"nodeType":"YulFunctionCall","src":"388:28:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"378:6:46"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"273:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"284:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"296:6:46","type":""}],"src":"238:184:46"},{"body":{"nodeType":"YulBlock","src":"522:92:46","statements":[{"nodeType":"YulAssignment","src":"532:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"544:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"555:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"540:3:46"},"nodeType":"YulFunctionCall","src":"540:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"532:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"574:9:46"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"599:6:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"592:6:46"},"nodeType":"YulFunctionCall","src":"592:14:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"585:6:46"},"nodeType":"YulFunctionCall","src":"585:22:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"567:6:46"},"nodeType":"YulFunctionCall","src":"567:41:46"},"nodeType":"YulExpressionStatement","src":"567:41:46"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"491:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"502:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"513:4:46","type":""}],"src":"427:187:46"},{"body":{"nodeType":"YulBlock","src":"691:275:46","statements":[{"body":{"nodeType":"YulBlock","src":"740:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"752:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"742:6:46"},"nodeType":"YulFunctionCall","src":"742:12:46"},"nodeType":"YulExpressionStatement","src":"742:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"719:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"727:4:46","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"715:3:46"},"nodeType":"YulFunctionCall","src":"715:17:46"},{"name":"end","nodeType":"YulIdentifier","src":"734:3:46"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"711:3:46"},"nodeType":"YulFunctionCall","src":"711:27:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"704:6:46"},"nodeType":"YulFunctionCall","src":"704:35:46"},"nodeType":"YulIf","src":"701:55:46"},{"nodeType":"YulAssignment","src":"765:30:46","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"788:6:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"775:12:46"},"nodeType":"YulFunctionCall","src":"775:20:46"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"765:6:46"}]},{"body":{"nodeType":"YulBlock","src":"838:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"847:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"850:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"840:6:46"},"nodeType":"YulFunctionCall","src":"840:12:46"},"nodeType":"YulExpressionStatement","src":"840:12:46"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"810:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"818:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"807:2:46"},"nodeType":"YulFunctionCall","src":"807:30:46"},"nodeType":"YulIf","src":"804:50:46"},{"nodeType":"YulAssignment","src":"863:29:46","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"879:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"887:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"875:3:46"},"nodeType":"YulFunctionCall","src":"875:17:46"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"863:8:46"}]},{"body":{"nodeType":"YulBlock","src":"944:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"953:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"956:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"946:6:46"},"nodeType":"YulFunctionCall","src":"946:12:46"},"nodeType":"YulExpressionStatement","src":"946:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"915:6:46"},{"name":"length","nodeType":"YulIdentifier","src":"923:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"911:3:46"},"nodeType":"YulFunctionCall","src":"911:19:46"},{"kind":"number","nodeType":"YulLiteral","src":"932:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"907:3:46"},"nodeType":"YulFunctionCall","src":"907:30:46"},{"name":"end","nodeType":"YulIdentifier","src":"939:3:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"904:2:46"},"nodeType":"YulFunctionCall","src":"904:39:46"},"nodeType":"YulIf","src":"901:59:46"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"654:6:46","type":""},{"name":"end","nodeType":"YulTypedName","src":"662:3:46","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"670:8:46","type":""},{"name":"length","nodeType":"YulTypedName","src":"680:6:46","type":""}],"src":"619:347:46"},{"body":{"nodeType":"YulBlock","src":"1077:371:46","statements":[{"body":{"nodeType":"YulBlock","src":"1123:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1132:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1135:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1125:6:46"},"nodeType":"YulFunctionCall","src":"1125:12:46"},"nodeType":"YulExpressionStatement","src":"1125:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1098:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"1107:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1094:3:46"},"nodeType":"YulFunctionCall","src":"1094:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"1119:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1090:3:46"},"nodeType":"YulFunctionCall","src":"1090:32:46"},"nodeType":"YulIf","src":"1087:52:46"},{"nodeType":"YulAssignment","src":"1148:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1171:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1158:12:46"},"nodeType":"YulFunctionCall","src":"1158:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1148:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"1190:46:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1221:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"1232:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1217:3:46"},"nodeType":"YulFunctionCall","src":"1217:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1204:12:46"},"nodeType":"YulFunctionCall","src":"1204:32:46"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1194:6:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"1279:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1288:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1291:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1281:6:46"},"nodeType":"YulFunctionCall","src":"1281:12:46"},"nodeType":"YulExpressionStatement","src":"1281:12:46"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1251:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"1259:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1248:2:46"},"nodeType":"YulFunctionCall","src":"1248:30:46"},"nodeType":"YulIf","src":"1245:50:46"},{"nodeType":"YulVariableDeclaration","src":"1304:84:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1360:9:46"},{"name":"offset","nodeType":"YulIdentifier","src":"1371:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1356:3:46"},"nodeType":"YulFunctionCall","src":"1356:22:46"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1380:7:46"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"1330:25:46"},"nodeType":"YulFunctionCall","src":"1330:58:46"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"1308:8:46","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"1318:8:46","type":""}]},{"nodeType":"YulAssignment","src":"1397:18:46","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1407:8:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1397:6:46"}]},{"nodeType":"YulAssignment","src":"1424:18:46","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"1434:8:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1424:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1027:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1038:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1050:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1058:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1066:6:46","type":""}],"src":"971:477:46"},{"body":{"nodeType":"YulBlock","src":"1597:643:46","statements":[{"body":{"nodeType":"YulBlock","src":"1643:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1652:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1655:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1645:6:46"},"nodeType":"YulFunctionCall","src":"1645:12:46"},"nodeType":"YulExpressionStatement","src":"1645:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1618:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"1627:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1614:3:46"},"nodeType":"YulFunctionCall","src":"1614:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"1639:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1610:3:46"},"nodeType":"YulFunctionCall","src":"1610:32:46"},"nodeType":"YulIf","src":"1607:52:46"},{"nodeType":"YulAssignment","src":"1668:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1691:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1678:12:46"},"nodeType":"YulFunctionCall","src":"1678:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1668:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"1710:46:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1741:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"1752:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1737:3:46"},"nodeType":"YulFunctionCall","src":"1737:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1724:12:46"},"nodeType":"YulFunctionCall","src":"1724:32:46"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1714:6:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1765:28:46","value":{"kind":"number","nodeType":"YulLiteral","src":"1775:18:46","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1769:2:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"1820:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1829:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1832:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1822:6:46"},"nodeType":"YulFunctionCall","src":"1822:12:46"},"nodeType":"YulExpressionStatement","src":"1822:12:46"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1808:6:46"},{"name":"_1","nodeType":"YulIdentifier","src":"1816:2:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1805:2:46"},"nodeType":"YulFunctionCall","src":"1805:14:46"},"nodeType":"YulIf","src":"1802:34:46"},{"nodeType":"YulVariableDeclaration","src":"1845:84:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1901:9:46"},{"name":"offset","nodeType":"YulIdentifier","src":"1912:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1897:3:46"},"nodeType":"YulFunctionCall","src":"1897:22:46"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1921:7:46"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"1871:25:46"},"nodeType":"YulFunctionCall","src":"1871:58:46"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"1849:8:46","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"1859:8:46","type":""}]},{"nodeType":"YulAssignment","src":"1938:18:46","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1948:8:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1938:6:46"}]},{"nodeType":"YulAssignment","src":"1965:18:46","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"1975:8:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1965:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"1992:48:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2025:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"2036:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2021:3:46"},"nodeType":"YulFunctionCall","src":"2021:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2008:12:46"},"nodeType":"YulFunctionCall","src":"2008:32:46"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1996:8:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"2069:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2078:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2081:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2071:6:46"},"nodeType":"YulFunctionCall","src":"2071:12:46"},"nodeType":"YulExpressionStatement","src":"2071:12:46"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2055:8:46"},{"name":"_1","nodeType":"YulIdentifier","src":"2065:2:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2052:2:46"},"nodeType":"YulFunctionCall","src":"2052:16:46"},"nodeType":"YulIf","src":"2049:36:46"},{"nodeType":"YulVariableDeclaration","src":"2094:86:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2150:9:46"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2161:8:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2146:3:46"},"nodeType":"YulFunctionCall","src":"2146:24:46"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2172:7:46"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"2120:25:46"},"nodeType":"YulFunctionCall","src":"2120:60:46"},"variables":[{"name":"value3_1","nodeType":"YulTypedName","src":"2098:8:46","type":""},{"name":"value4_1","nodeType":"YulTypedName","src":"2108:8:46","type":""}]},{"nodeType":"YulAssignment","src":"2189:18:46","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"2199:8:46"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2189:6:46"}]},{"nodeType":"YulAssignment","src":"2216:18:46","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"2226:8:46"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2216:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1531:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1542:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1554:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1562:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1570:6:46","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1578:6:46","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1586:6:46","type":""}],"src":"1453:787:46"},{"body":{"nodeType":"YulBlock","src":"2331:166:46","statements":[{"body":{"nodeType":"YulBlock","src":"2377:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2386:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2389:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2379:6:46"},"nodeType":"YulFunctionCall","src":"2379:12:46"},"nodeType":"YulExpressionStatement","src":"2379:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2352:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"2361:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2348:3:46"},"nodeType":"YulFunctionCall","src":"2348:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"2373:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2344:3:46"},"nodeType":"YulFunctionCall","src":"2344:32:46"},"nodeType":"YulIf","src":"2341:52:46"},{"nodeType":"YulAssignment","src":"2402:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2425:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2412:12:46"},"nodeType":"YulFunctionCall","src":"2412:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2402:6:46"}]},{"nodeType":"YulAssignment","src":"2444:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2476:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"2487:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2472:3:46"},"nodeType":"YulFunctionCall","src":"2472:18:46"}],"functionName":{"name":"abi_decode_bytes4","nodeType":"YulIdentifier","src":"2454:17:46"},"nodeType":"YulFunctionCall","src":"2454:37:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2444:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2289:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2300:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2312:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2320:6:46","type":""}],"src":"2245:252:46"},{"body":{"nodeType":"YulBlock","src":"2603:125:46","statements":[{"nodeType":"YulAssignment","src":"2613:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2625:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"2636:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2621:3:46"},"nodeType":"YulFunctionCall","src":"2621:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2613:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2655:9:46"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2670:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"2678:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2666:3:46"},"nodeType":"YulFunctionCall","src":"2666:55:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2648:6:46"},"nodeType":"YulFunctionCall","src":"2648:74:46"},"nodeType":"YulExpressionStatement","src":"2648:74:46"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2572:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2583:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2594:4:46","type":""}],"src":"2502:226:46"},{"body":{"nodeType":"YulBlock","src":"2820:161:46","statements":[{"body":{"nodeType":"YulBlock","src":"2866:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2875:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2878:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2868:6:46"},"nodeType":"YulFunctionCall","src":"2868:12:46"},"nodeType":"YulExpressionStatement","src":"2868:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2841:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"2850:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2837:3:46"},"nodeType":"YulFunctionCall","src":"2837:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"2862:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2833:3:46"},"nodeType":"YulFunctionCall","src":"2833:32:46"},"nodeType":"YulIf","src":"2830:52:46"},{"nodeType":"YulAssignment","src":"2891:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2914:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2901:12:46"},"nodeType":"YulFunctionCall","src":"2901:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2891:6:46"}]},{"nodeType":"YulAssignment","src":"2933:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2960:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"2971:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2956:3:46"},"nodeType":"YulFunctionCall","src":"2956:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2943:12:46"},"nodeType":"YulFunctionCall","src":"2943:32:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2933:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2778:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2789:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2801:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2809:6:46","type":""}],"src":"2733:248:46"},{"body":{"nodeType":"YulBlock","src":"3052:184:46","statements":[{"nodeType":"YulVariableDeclaration","src":"3062:10:46","value":{"kind":"number","nodeType":"YulLiteral","src":"3071:1:46","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3066:1:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"3131:63:46","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3156:3:46"},{"name":"i","nodeType":"YulIdentifier","src":"3161:1:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3152:3:46"},"nodeType":"YulFunctionCall","src":"3152:11:46"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3175:3:46"},{"name":"i","nodeType":"YulIdentifier","src":"3180:1:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3171:3:46"},"nodeType":"YulFunctionCall","src":"3171:11:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3165:5:46"},"nodeType":"YulFunctionCall","src":"3165:18:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3145:6:46"},"nodeType":"YulFunctionCall","src":"3145:39:46"},"nodeType":"YulExpressionStatement","src":"3145:39:46"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3092:1:46"},{"name":"length","nodeType":"YulIdentifier","src":"3095:6:46"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3089:2:46"},"nodeType":"YulFunctionCall","src":"3089:13:46"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3103:19:46","statements":[{"nodeType":"YulAssignment","src":"3105:15:46","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3114:1:46"},{"kind":"number","nodeType":"YulLiteral","src":"3117:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3110:3:46"},"nodeType":"YulFunctionCall","src":"3110:10:46"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3105:1:46"}]}]},"pre":{"nodeType":"YulBlock","src":"3085:3:46","statements":[]},"src":"3081:113:46"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3214:3:46"},{"name":"length","nodeType":"YulIdentifier","src":"3219:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3210:3:46"},"nodeType":"YulFunctionCall","src":"3210:16:46"},{"kind":"number","nodeType":"YulLiteral","src":"3228:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3203:6:46"},"nodeType":"YulFunctionCall","src":"3203:27:46"},"nodeType":"YulExpressionStatement","src":"3203:27:46"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3030:3:46","type":""},{"name":"dst","nodeType":"YulTypedName","src":"3035:3:46","type":""},{"name":"length","nodeType":"YulTypedName","src":"3040:6:46","type":""}],"src":"2986:250:46"},{"body":{"nodeType":"YulBlock","src":"3290:221:46","statements":[{"nodeType":"YulVariableDeclaration","src":"3300:26:46","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3320:5:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3314:5:46"},"nodeType":"YulFunctionCall","src":"3314:12:46"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3304:6:46","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3342:3:46"},{"name":"length","nodeType":"YulIdentifier","src":"3347:6:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3335:6:46"},"nodeType":"YulFunctionCall","src":"3335:19:46"},"nodeType":"YulExpressionStatement","src":"3335:19:46"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3402:5:46"},{"kind":"number","nodeType":"YulLiteral","src":"3409:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3398:3:46"},"nodeType":"YulFunctionCall","src":"3398:16:46"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3420:3:46"},{"kind":"number","nodeType":"YulLiteral","src":"3425:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3416:3:46"},"nodeType":"YulFunctionCall","src":"3416:14:46"},{"name":"length","nodeType":"YulIdentifier","src":"3432:6:46"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3363:34:46"},"nodeType":"YulFunctionCall","src":"3363:76:46"},"nodeType":"YulExpressionStatement","src":"3363:76:46"},{"nodeType":"YulAssignment","src":"3448:57:46","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3463:3:46"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3476:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"3484:2:46","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3472:3:46"},"nodeType":"YulFunctionCall","src":"3472:15:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3493:2:46","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3489:3:46"},"nodeType":"YulFunctionCall","src":"3489:7:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3468:3:46"},"nodeType":"YulFunctionCall","src":"3468:29:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3459:3:46"},"nodeType":"YulFunctionCall","src":"3459:39:46"},{"kind":"number","nodeType":"YulLiteral","src":"3500:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3455:3:46"},"nodeType":"YulFunctionCall","src":"3455:50:46"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3448:3:46"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3267:5:46","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3274:3:46","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3282:3:46","type":""}],"src":"3241:270:46"},{"body":{"nodeType":"YulBlock","src":"3663:141:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3680:9:46"},{"name":"value0","nodeType":"YulIdentifier","src":"3691:6:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3673:6:46"},"nodeType":"YulFunctionCall","src":"3673:25:46"},"nodeType":"YulExpressionStatement","src":"3673:25:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3718:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"3729:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3714:3:46"},"nodeType":"YulFunctionCall","src":"3714:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"3734:2:46","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3707:6:46"},"nodeType":"YulFunctionCall","src":"3707:30:46"},"nodeType":"YulExpressionStatement","src":"3707:30:46"},{"nodeType":"YulAssignment","src":"3746:52:46","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3771:6:46"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3783:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"3794:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3779:3:46"},"nodeType":"YulFunctionCall","src":"3779:18:46"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"3754:16:46"},"nodeType":"YulFunctionCall","src":"3754:44:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3746:4:46"}]}]},"name":"abi_encode_tuple_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3624:9:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3635:6:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3643:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3654:4:46","type":""}],"src":"3516:288:46"},{"body":{"nodeType":"YulBlock","src":"3913:212:46","statements":[{"body":{"nodeType":"YulBlock","src":"3959:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3968:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3971:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3961:6:46"},"nodeType":"YulFunctionCall","src":"3961:12:46"},"nodeType":"YulExpressionStatement","src":"3961:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3934:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"3943:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3930:3:46"},"nodeType":"YulFunctionCall","src":"3930:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"3955:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3926:3:46"},"nodeType":"YulFunctionCall","src":"3926:32:46"},"nodeType":"YulIf","src":"3923:52:46"},{"nodeType":"YulAssignment","src":"3984:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4007:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3994:12:46"},"nodeType":"YulFunctionCall","src":"3994:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3984:6:46"}]},{"nodeType":"YulAssignment","src":"4026:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4053:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"4064:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4049:3:46"},"nodeType":"YulFunctionCall","src":"4049:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4036:12:46"},"nodeType":"YulFunctionCall","src":"4036:32:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4026:6:46"}]},{"nodeType":"YulAssignment","src":"4077:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4104:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"4115:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4100:3:46"},"nodeType":"YulFunctionCall","src":"4100:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4087:12:46"},"nodeType":"YulFunctionCall","src":"4087:32:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4077:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3863:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3874:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3886:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3894:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3902:6:46","type":""}],"src":"3809:316:46"},{"body":{"nodeType":"YulBlock","src":"4200:110:46","statements":[{"body":{"nodeType":"YulBlock","src":"4246:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4255:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4258:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4248:6:46"},"nodeType":"YulFunctionCall","src":"4248:12:46"},"nodeType":"YulExpressionStatement","src":"4248:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4221:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"4230:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4217:3:46"},"nodeType":"YulFunctionCall","src":"4217:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"4242:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4213:3:46"},"nodeType":"YulFunctionCall","src":"4213:32:46"},"nodeType":"YulIf","src":"4210:52:46"},{"nodeType":"YulAssignment","src":"4271:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4294:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4281:12:46"},"nodeType":"YulFunctionCall","src":"4281:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4271:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4166:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4177:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4189:6:46","type":""}],"src":"4130:180:46"},{"body":{"nodeType":"YulBlock","src":"4360:109:46","statements":[{"body":{"nodeType":"YulBlock","src":"4447:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4456:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4459:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4449:6:46"},"nodeType":"YulFunctionCall","src":"4449:12:46"},"nodeType":"YulExpressionStatement","src":"4449:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4383:5:46"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4394:5:46"},{"kind":"number","nodeType":"YulLiteral","src":"4401:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4390:3:46"},"nodeType":"YulFunctionCall","src":"4390:54:46"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4380:2:46"},"nodeType":"YulFunctionCall","src":"4380:65:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4373:6:46"},"nodeType":"YulFunctionCall","src":"4373:73:46"},"nodeType":"YulIf","src":"4370:93:46"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4349:5:46","type":""}],"src":"4315:154:46"},{"body":{"nodeType":"YulBlock","src":"4544:177:46","statements":[{"body":{"nodeType":"YulBlock","src":"4590:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4599:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4602:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4592:6:46"},"nodeType":"YulFunctionCall","src":"4592:12:46"},"nodeType":"YulExpressionStatement","src":"4592:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4565:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"4574:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4561:3:46"},"nodeType":"YulFunctionCall","src":"4561:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"4586:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4557:3:46"},"nodeType":"YulFunctionCall","src":"4557:32:46"},"nodeType":"YulIf","src":"4554:52:46"},{"nodeType":"YulVariableDeclaration","src":"4615:36:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4641:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4628:12:46"},"nodeType":"YulFunctionCall","src":"4628:23:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4619:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4685:5:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4660:24:46"},"nodeType":"YulFunctionCall","src":"4660:31:46"},"nodeType":"YulExpressionStatement","src":"4660:31:46"},{"nodeType":"YulAssignment","src":"4700:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"4710:5:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4700:6:46"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4510:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4521:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4533:6:46","type":""}],"src":"4474:247:46"},{"body":{"nodeType":"YulBlock","src":"4843:125:46","statements":[{"nodeType":"YulAssignment","src":"4853:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4865:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"4876:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4861:3:46"},"nodeType":"YulFunctionCall","src":"4861:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4853:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4895:9:46"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4910:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"4918:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4906:3:46"},"nodeType":"YulFunctionCall","src":"4906:55:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4888:6:46"},"nodeType":"YulFunctionCall","src":"4888:74:46"},"nodeType":"YulExpressionStatement","src":"4888:74:46"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4812:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4823:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4834:4:46","type":""}],"src":"4726:242:46"},{"body":{"nodeType":"YulBlock","src":"5086:125:46","statements":[{"nodeType":"YulAssignment","src":"5096:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5108:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"5119:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5104:3:46"},"nodeType":"YulFunctionCall","src":"5104:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5096:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5138:9:46"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5153:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"5161:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5149:3:46"},"nodeType":"YulFunctionCall","src":"5149:55:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5131:6:46"},"nodeType":"YulFunctionCall","src":"5131:74:46"},"nodeType":"YulExpressionStatement","src":"5131:74:46"}]},"name":"abi_encode_tuple_t_contract$_ENS_$3320__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5055:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5066:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5077:4:46","type":""}],"src":"4973:238:46"},{"body":{"nodeType":"YulBlock","src":"5303:161:46","statements":[{"body":{"nodeType":"YulBlock","src":"5349:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5358:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5361:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5351:6:46"},"nodeType":"YulFunctionCall","src":"5351:12:46"},"nodeType":"YulExpressionStatement","src":"5351:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5324:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"5333:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5320:3:46"},"nodeType":"YulFunctionCall","src":"5320:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"5345:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5316:3:46"},"nodeType":"YulFunctionCall","src":"5316:32:46"},"nodeType":"YulIf","src":"5313:52:46"},{"nodeType":"YulAssignment","src":"5374:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5397:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5384:12:46"},"nodeType":"YulFunctionCall","src":"5384:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5374:6:46"}]},{"nodeType":"YulAssignment","src":"5416:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5443:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"5454:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5439:3:46"},"nodeType":"YulFunctionCall","src":"5439:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5426:12:46"},"nodeType":"YulFunctionCall","src":"5426:32:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5416:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5261:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5272:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5284:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5292:6:46","type":""}],"src":"5216:248:46"},{"body":{"nodeType":"YulBlock","src":"5501:152:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5518:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5521:77:46","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5511:6:46"},"nodeType":"YulFunctionCall","src":"5511:88:46"},"nodeType":"YulExpressionStatement","src":"5511:88:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5615:1:46","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5618:4:46","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5608:6:46"},"nodeType":"YulFunctionCall","src":"5608:15:46"},"nodeType":"YulExpressionStatement","src":"5608:15:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5639:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5642:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5632:6:46"},"nodeType":"YulFunctionCall","src":"5632:15:46"},"nodeType":"YulExpressionStatement","src":"5632:15:46"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5469:184:46"},{"body":{"nodeType":"YulBlock","src":"5710:666:46","statements":[{"body":{"nodeType":"YulBlock","src":"5759:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5768:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5771:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5761:6:46"},"nodeType":"YulFunctionCall","src":"5761:12:46"},"nodeType":"YulExpressionStatement","src":"5761:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5738:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"5746:4:46","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5734:3:46"},"nodeType":"YulFunctionCall","src":"5734:17:46"},{"name":"end","nodeType":"YulIdentifier","src":"5753:3:46"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5730:3:46"},"nodeType":"YulFunctionCall","src":"5730:27:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5723:6:46"},"nodeType":"YulFunctionCall","src":"5723:35:46"},"nodeType":"YulIf","src":"5720:55:46"},{"nodeType":"YulVariableDeclaration","src":"5784:30:46","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5807:6:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5794:12:46"},"nodeType":"YulFunctionCall","src":"5794:20:46"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5788:2:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5823:28:46","value":{"kind":"number","nodeType":"YulLiteral","src":"5833:18:46","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5827:2:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"5874:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5876:16:46"},"nodeType":"YulFunctionCall","src":"5876:18:46"},"nodeType":"YulExpressionStatement","src":"5876:18:46"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5866:2:46"},{"name":"_2","nodeType":"YulIdentifier","src":"5870:2:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5863:2:46"},"nodeType":"YulFunctionCall","src":"5863:10:46"},"nodeType":"YulIf","src":"5860:36:46"},{"nodeType":"YulVariableDeclaration","src":"5905:17:46","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5919:2:46","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5915:3:46"},"nodeType":"YulFunctionCall","src":"5915:7:46"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5909:2:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5931:23:46","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5951:2:46","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5945:5:46"},"nodeType":"YulFunctionCall","src":"5945:9:46"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5935:6:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5963:71:46","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5985:6:46"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6009:2:46"},{"kind":"number","nodeType":"YulLiteral","src":"6013:4:46","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6005:3:46"},"nodeType":"YulFunctionCall","src":"6005:13:46"},{"name":"_3","nodeType":"YulIdentifier","src":"6020:2:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6001:3:46"},"nodeType":"YulFunctionCall","src":"6001:22:46"},{"kind":"number","nodeType":"YulLiteral","src":"6025:2:46","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5997:3:46"},"nodeType":"YulFunctionCall","src":"5997:31:46"},{"name":"_3","nodeType":"YulIdentifier","src":"6030:2:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5993:3:46"},"nodeType":"YulFunctionCall","src":"5993:40:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5981:3:46"},"nodeType":"YulFunctionCall","src":"5981:53:46"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5967:10:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"6093:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6095:16:46"},"nodeType":"YulFunctionCall","src":"6095:18:46"},"nodeType":"YulExpressionStatement","src":"6095:18:46"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6052:10:46"},{"name":"_2","nodeType":"YulIdentifier","src":"6064:2:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6049:2:46"},"nodeType":"YulFunctionCall","src":"6049:18:46"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6072:10:46"},{"name":"memPtr","nodeType":"YulIdentifier","src":"6084:6:46"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6069:2:46"},"nodeType":"YulFunctionCall","src":"6069:22:46"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6046:2:46"},"nodeType":"YulFunctionCall","src":"6046:46:46"},"nodeType":"YulIf","src":"6043:72:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6131:2:46","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6135:10:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6124:6:46"},"nodeType":"YulFunctionCall","src":"6124:22:46"},"nodeType":"YulExpressionStatement","src":"6124:22:46"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6162:6:46"},{"name":"_1","nodeType":"YulIdentifier","src":"6170:2:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6155:6:46"},"nodeType":"YulFunctionCall","src":"6155:18:46"},"nodeType":"YulExpressionStatement","src":"6155:18:46"},{"body":{"nodeType":"YulBlock","src":"6221:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6230:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6233:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6223:6:46"},"nodeType":"YulFunctionCall","src":"6223:12:46"},"nodeType":"YulExpressionStatement","src":"6223:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6196:6:46"},{"name":"_1","nodeType":"YulIdentifier","src":"6204:2:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6192:3:46"},"nodeType":"YulFunctionCall","src":"6192:15:46"},{"kind":"number","nodeType":"YulLiteral","src":"6209:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6188:3:46"},"nodeType":"YulFunctionCall","src":"6188:26:46"},{"name":"end","nodeType":"YulIdentifier","src":"6216:3:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6185:2:46"},"nodeType":"YulFunctionCall","src":"6185:35:46"},"nodeType":"YulIf","src":"6182:55:46"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6263:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"6271:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6259:3:46"},"nodeType":"YulFunctionCall","src":"6259:17:46"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6282:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"6290:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6278:3:46"},"nodeType":"YulFunctionCall","src":"6278:17:46"},{"name":"_1","nodeType":"YulIdentifier","src":"6297:2:46"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"6246:12:46"},"nodeType":"YulFunctionCall","src":"6246:54:46"},"nodeType":"YulExpressionStatement","src":"6246:54:46"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6324:6:46"},{"name":"_1","nodeType":"YulIdentifier","src":"6332:2:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6320:3:46"},"nodeType":"YulFunctionCall","src":"6320:15:46"},{"kind":"number","nodeType":"YulLiteral","src":"6337:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6316:3:46"},"nodeType":"YulFunctionCall","src":"6316:26:46"},{"kind":"number","nodeType":"YulLiteral","src":"6344:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6309:6:46"},"nodeType":"YulFunctionCall","src":"6309:37:46"},"nodeType":"YulExpressionStatement","src":"6309:37:46"},{"nodeType":"YulAssignment","src":"6355:15:46","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"6364:6:46"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6355:5:46"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5684:6:46","type":""},{"name":"end","nodeType":"YulTypedName","src":"5692:3:46","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"5700:5:46","type":""}],"src":"5658:718:46"},{"body":{"nodeType":"YulBlock","src":"6477:359:46","statements":[{"body":{"nodeType":"YulBlock","src":"6523:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6532:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6535:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6525:6:46"},"nodeType":"YulFunctionCall","src":"6525:12:46"},"nodeType":"YulExpressionStatement","src":"6525:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6498:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"6507:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6494:3:46"},"nodeType":"YulFunctionCall","src":"6494:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"6519:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6490:3:46"},"nodeType":"YulFunctionCall","src":"6490:32:46"},"nodeType":"YulIf","src":"6487:52:46"},{"nodeType":"YulVariableDeclaration","src":"6548:36:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6574:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6561:12:46"},"nodeType":"YulFunctionCall","src":"6561:23:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6552:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6618:5:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6593:24:46"},"nodeType":"YulFunctionCall","src":"6593:31:46"},"nodeType":"YulExpressionStatement","src":"6593:31:46"},{"nodeType":"YulAssignment","src":"6633:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"6643:5:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6633:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"6657:46:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6688:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"6699:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6684:3:46"},"nodeType":"YulFunctionCall","src":"6684:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6671:12:46"},"nodeType":"YulFunctionCall","src":"6671:32:46"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6661:6:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"6746:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6755:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6758:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6748:6:46"},"nodeType":"YulFunctionCall","src":"6748:12:46"},"nodeType":"YulExpressionStatement","src":"6748:12:46"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6718:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"6726:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6715:2:46"},"nodeType":"YulFunctionCall","src":"6715:30:46"},"nodeType":"YulIf","src":"6712:50:46"},{"nodeType":"YulAssignment","src":"6771:59:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6802:9:46"},{"name":"offset","nodeType":"YulIdentifier","src":"6813:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6798:3:46"},"nodeType":"YulFunctionCall","src":"6798:22:46"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6822:7:46"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6781:16:46"},"nodeType":"YulFunctionCall","src":"6781:49:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6771:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6435:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6446:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6458:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6466:6:46","type":""}],"src":"6381:455:46"},{"body":{"nodeType":"YulBlock","src":"6942:76:46","statements":[{"nodeType":"YulAssignment","src":"6952:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6964:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"6975:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6960:3:46"},"nodeType":"YulFunctionCall","src":"6960:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6952:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6994:9:46"},{"name":"value0","nodeType":"YulIdentifier","src":"7005:6:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6987:6:46"},"nodeType":"YulFunctionCall","src":"6987:25:46"},"nodeType":"YulExpressionStatement","src":"6987:25:46"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6911:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6922:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6933:4:46","type":""}],"src":"6841:177:46"},{"body":{"nodeType":"YulBlock","src":"7130:371:46","statements":[{"body":{"nodeType":"YulBlock","src":"7176:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7185:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7188:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7178:6:46"},"nodeType":"YulFunctionCall","src":"7178:12:46"},"nodeType":"YulExpressionStatement","src":"7178:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7151:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"7160:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7147:3:46"},"nodeType":"YulFunctionCall","src":"7147:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"7172:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7143:3:46"},"nodeType":"YulFunctionCall","src":"7143:32:46"},"nodeType":"YulIf","src":"7140:52:46"},{"nodeType":"YulAssignment","src":"7201:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7224:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7211:12:46"},"nodeType":"YulFunctionCall","src":"7211:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7201:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"7243:46:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7274:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"7285:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7270:3:46"},"nodeType":"YulFunctionCall","src":"7270:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7257:12:46"},"nodeType":"YulFunctionCall","src":"7257:32:46"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7247:6:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"7332:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7341:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7344:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7334:6:46"},"nodeType":"YulFunctionCall","src":"7334:12:46"},"nodeType":"YulExpressionStatement","src":"7334:12:46"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7304:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"7312:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7301:2:46"},"nodeType":"YulFunctionCall","src":"7301:30:46"},"nodeType":"YulIf","src":"7298:50:46"},{"nodeType":"YulVariableDeclaration","src":"7357:84:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7413:9:46"},{"name":"offset","nodeType":"YulIdentifier","src":"7424:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7409:3:46"},"nodeType":"YulFunctionCall","src":"7409:22:46"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7433:7:46"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"7383:25:46"},"nodeType":"YulFunctionCall","src":"7383:58:46"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"7361:8:46","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"7371:8:46","type":""}]},{"nodeType":"YulAssignment","src":"7450:18:46","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"7460:8:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7450:6:46"}]},{"nodeType":"YulAssignment","src":"7477:18:46","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"7487:8:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7477:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7080:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7091:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7103:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7111:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7119:6:46","type":""}],"src":"7023:478:46"},{"body":{"nodeType":"YulBlock","src":"7627:98:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7644:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"7655:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7637:6:46"},"nodeType":"YulFunctionCall","src":"7637:21:46"},"nodeType":"YulExpressionStatement","src":"7637:21:46"},{"nodeType":"YulAssignment","src":"7667:52:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7692:6:46"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7704:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"7715:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7700:3:46"},"nodeType":"YulFunctionCall","src":"7700:18:46"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"7675:16:46"},"nodeType":"YulFunctionCall","src":"7675:44:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7667:4:46"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7596:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7607:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7618:4:46","type":""}],"src":"7506:219:46"},{"body":{"nodeType":"YulBlock","src":"7849:98:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7866:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"7877:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7859:6:46"},"nodeType":"YulFunctionCall","src":"7859:21:46"},"nodeType":"YulExpressionStatement","src":"7859:21:46"},{"nodeType":"YulAssignment","src":"7889:52:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7914:6:46"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7926:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"7937:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7922:3:46"},"nodeType":"YulFunctionCall","src":"7922:18:46"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"7897:16:46"},"nodeType":"YulFunctionCall","src":"7897:44:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7889:4:46"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7818:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7829:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7840:4:46","type":""}],"src":"7730:217:46"},{"body":{"nodeType":"YulBlock","src":"8075:422:46","statements":[{"body":{"nodeType":"YulBlock","src":"8121:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8130:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8133:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8123:6:46"},"nodeType":"YulFunctionCall","src":"8123:12:46"},"nodeType":"YulExpressionStatement","src":"8123:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8096:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"8105:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8092:3:46"},"nodeType":"YulFunctionCall","src":"8092:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"8117:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8088:3:46"},"nodeType":"YulFunctionCall","src":"8088:32:46"},"nodeType":"YulIf","src":"8085:52:46"},{"nodeType":"YulAssignment","src":"8146:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8169:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8156:12:46"},"nodeType":"YulFunctionCall","src":"8156:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8146:6:46"}]},{"nodeType":"YulAssignment","src":"8188:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8215:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"8226:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8211:3:46"},"nodeType":"YulFunctionCall","src":"8211:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8198:12:46"},"nodeType":"YulFunctionCall","src":"8198:32:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8188:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"8239:46:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8270:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"8281:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8266:3:46"},"nodeType":"YulFunctionCall","src":"8266:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8253:12:46"},"nodeType":"YulFunctionCall","src":"8253:32:46"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8243:6:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"8328:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8337:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8340:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8330:6:46"},"nodeType":"YulFunctionCall","src":"8330:12:46"},"nodeType":"YulExpressionStatement","src":"8330:12:46"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8300:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"8308:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8297:2:46"},"nodeType":"YulFunctionCall","src":"8297:30:46"},"nodeType":"YulIf","src":"8294:50:46"},{"nodeType":"YulVariableDeclaration","src":"8353:84:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8409:9:46"},{"name":"offset","nodeType":"YulIdentifier","src":"8420:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8405:3:46"},"nodeType":"YulFunctionCall","src":"8405:22:46"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8429:7:46"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"8379:25:46"},"nodeType":"YulFunctionCall","src":"8379:58:46"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"8357:8:46","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"8367:8:46","type":""}]},{"nodeType":"YulAssignment","src":"8446:18:46","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"8456:8:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8446:6:46"}]},{"nodeType":"YulAssignment","src":"8473:18:46","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"8483:8:46"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8473:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8017:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8028:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8040:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8048:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8056:6:46","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8064:6:46","type":""}],"src":"7952:545:46"},{"body":{"nodeType":"YulBlock","src":"8615:343:46","statements":[{"body":{"nodeType":"YulBlock","src":"8661:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8670:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8673:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8663:6:46"},"nodeType":"YulFunctionCall","src":"8663:12:46"},"nodeType":"YulExpressionStatement","src":"8663:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8636:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"8645:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8632:3:46"},"nodeType":"YulFunctionCall","src":"8632:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"8657:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8628:3:46"},"nodeType":"YulFunctionCall","src":"8628:32:46"},"nodeType":"YulIf","src":"8625:52:46"},{"nodeType":"YulAssignment","src":"8686:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8709:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8696:12:46"},"nodeType":"YulFunctionCall","src":"8696:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8686:6:46"}]},{"nodeType":"YulAssignment","src":"8728:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8755:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"8766:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8751:3:46"},"nodeType":"YulFunctionCall","src":"8751:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8738:12:46"},"nodeType":"YulFunctionCall","src":"8738:32:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8728:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"8779:46:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8810:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"8821:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8806:3:46"},"nodeType":"YulFunctionCall","src":"8806:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8793:12:46"},"nodeType":"YulFunctionCall","src":"8793:32:46"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8783:6:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"8868:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8877:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8880:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8870:6:46"},"nodeType":"YulFunctionCall","src":"8870:12:46"},"nodeType":"YulExpressionStatement","src":"8870:12:46"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8840:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"8848:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8837:2:46"},"nodeType":"YulFunctionCall","src":"8837:30:46"},"nodeType":"YulIf","src":"8834:50:46"},{"nodeType":"YulAssignment","src":"8893:59:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8924:9:46"},{"name":"offset","nodeType":"YulIdentifier","src":"8935:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8920:3:46"},"nodeType":"YulFunctionCall","src":"8920:22:46"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8944:7:46"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"8903:16:46"},"nodeType":"YulFunctionCall","src":"8903:49:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8893:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8565:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8576:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8588:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8596:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8604:6:46","type":""}],"src":"8502:456:46"},{"body":{"nodeType":"YulBlock","src":"9009:114:46","statements":[{"nodeType":"YulAssignment","src":"9019:29:46","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9041:6:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9028:12:46"},"nodeType":"YulFunctionCall","src":"9028:20:46"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9019:5:46"}]},{"body":{"nodeType":"YulBlock","src":"9101:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9110:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9113:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9103:6:46"},"nodeType":"YulFunctionCall","src":"9103:12:46"},"nodeType":"YulExpressionStatement","src":"9103:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9070:5:46"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9091:5:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9084:6:46"},"nodeType":"YulFunctionCall","src":"9084:13:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9077:6:46"},"nodeType":"YulFunctionCall","src":"9077:21:46"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9067:2:46"},"nodeType":"YulFunctionCall","src":"9067:32:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9060:6:46"},"nodeType":"YulFunctionCall","src":"9060:40:46"},"nodeType":"YulIf","src":"9057:60:46"}]},"name":"abi_decode_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8988:6:46","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8999:5:46","type":""}],"src":"8963:160:46"},{"body":{"nodeType":"YulBlock","src":"9212:231:46","statements":[{"body":{"nodeType":"YulBlock","src":"9258:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9267:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9270:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9260:6:46"},"nodeType":"YulFunctionCall","src":"9260:12:46"},"nodeType":"YulExpressionStatement","src":"9260:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9233:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"9242:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9229:3:46"},"nodeType":"YulFunctionCall","src":"9229:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"9254:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9225:3:46"},"nodeType":"YulFunctionCall","src":"9225:32:46"},"nodeType":"YulIf","src":"9222:52:46"},{"nodeType":"YulVariableDeclaration","src":"9283:36:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9309:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9296:12:46"},"nodeType":"YulFunctionCall","src":"9296:23:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9287:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9353:5:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9328:24:46"},"nodeType":"YulFunctionCall","src":"9328:31:46"},"nodeType":"YulExpressionStatement","src":"9328:31:46"},{"nodeType":"YulAssignment","src":"9368:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"9378:5:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9368:6:46"}]},{"nodeType":"YulAssignment","src":"9392:45:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9422:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"9433:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9418:3:46"},"nodeType":"YulFunctionCall","src":"9418:18:46"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"9402:15:46"},"nodeType":"YulFunctionCall","src":"9402:35:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9392:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9170:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9181:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9193:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9201:6:46","type":""}],"src":"9128:315:46"},{"body":{"nodeType":"YulBlock","src":"9549:282:46","statements":[{"body":{"nodeType":"YulBlock","src":"9595:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9604:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9607:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9597:6:46"},"nodeType":"YulFunctionCall","src":"9597:12:46"},"nodeType":"YulExpressionStatement","src":"9597:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9570:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"9579:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9566:3:46"},"nodeType":"YulFunctionCall","src":"9566:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"9591:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9562:3:46"},"nodeType":"YulFunctionCall","src":"9562:32:46"},"nodeType":"YulIf","src":"9559:52:46"},{"nodeType":"YulAssignment","src":"9620:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9643:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9630:12:46"},"nodeType":"YulFunctionCall","src":"9630:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9620:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"9662:45:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9692:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"9703:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9688:3:46"},"nodeType":"YulFunctionCall","src":"9688:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9675:12:46"},"nodeType":"YulFunctionCall","src":"9675:32:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9666:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9741:5:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9716:24:46"},"nodeType":"YulFunctionCall","src":"9716:31:46"},"nodeType":"YulExpressionStatement","src":"9716:31:46"},{"nodeType":"YulAssignment","src":"9756:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"9766:5:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9756:6:46"}]},{"nodeType":"YulAssignment","src":"9780:45:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9810:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"9821:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9806:3:46"},"nodeType":"YulFunctionCall","src":"9806:18:46"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"9790:15:46"},"nodeType":"YulFunctionCall","src":"9790:35:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9780:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9499:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9510:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9522:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9530:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9538:6:46","type":""}],"src":"9448:383:46"},{"body":{"nodeType":"YulBlock","src":"9958:125:46","statements":[{"nodeType":"YulAssignment","src":"9968:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9980:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"9991:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9976:3:46"},"nodeType":"YulFunctionCall","src":"9976:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9968:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10010:9:46"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10025:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"10033:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10021:3:46"},"nodeType":"YulFunctionCall","src":"10021:55:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10003:6:46"},"nodeType":"YulFunctionCall","src":"10003:74:46"},"nodeType":"YulExpressionStatement","src":"10003:74:46"}]},"name":"abi_encode_tuple_t_contract$_INameWrapper_$6917__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9927:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9938:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9949:4:46","type":""}],"src":"9836:247:46"},{"body":{"nodeType":"YulBlock","src":"10191:305:46","statements":[{"body":{"nodeType":"YulBlock","src":"10237:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10246:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10249:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10239:6:46"},"nodeType":"YulFunctionCall","src":"10239:12:46"},"nodeType":"YulExpressionStatement","src":"10239:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10212:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"10221:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10208:3:46"},"nodeType":"YulFunctionCall","src":"10208:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"10233:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10204:3:46"},"nodeType":"YulFunctionCall","src":"10204:32:46"},"nodeType":"YulIf","src":"10201:52:46"},{"nodeType":"YulAssignment","src":"10262:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10285:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10272:12:46"},"nodeType":"YulFunctionCall","src":"10272:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10262:6:46"}]},{"nodeType":"YulAssignment","src":"10304:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10331:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"10342:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10327:3:46"},"nodeType":"YulFunctionCall","src":"10327:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10314:12:46"},"nodeType":"YulFunctionCall","src":"10314:32:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10304:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"10355:45:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10385:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"10396:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10381:3:46"},"nodeType":"YulFunctionCall","src":"10381:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10368:12:46"},"nodeType":"YulFunctionCall","src":"10368:32:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10359:5:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"10450:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10459:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10462:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10452:6:46"},"nodeType":"YulFunctionCall","src":"10452:12:46"},"nodeType":"YulExpressionStatement","src":"10452:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10422:5:46"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10433:5:46"},{"kind":"number","nodeType":"YulLiteral","src":"10440:6:46","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10429:3:46"},"nodeType":"YulFunctionCall","src":"10429:18:46"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10419:2:46"},"nodeType":"YulFunctionCall","src":"10419:29:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10412:6:46"},"nodeType":"YulFunctionCall","src":"10412:37:46"},"nodeType":"YulIf","src":"10409:57:46"},{"nodeType":"YulAssignment","src":"10475:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"10485:5:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10475:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10141:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10152:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10164:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10172:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10180:6:46","type":""}],"src":"10088:408:46"},{"body":{"nodeType":"YulBlock","src":"10605:352:46","statements":[{"body":{"nodeType":"YulBlock","src":"10651:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10660:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10663:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10653:6:46"},"nodeType":"YulFunctionCall","src":"10653:12:46"},"nodeType":"YulExpressionStatement","src":"10653:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10626:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"10635:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10622:3:46"},"nodeType":"YulFunctionCall","src":"10622:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"10647:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10618:3:46"},"nodeType":"YulFunctionCall","src":"10618:32:46"},"nodeType":"YulIf","src":"10615:52:46"},{"nodeType":"YulVariableDeclaration","src":"10676:36:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10702:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10689:12:46"},"nodeType":"YulFunctionCall","src":"10689:23:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10680:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10746:5:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10721:24:46"},"nodeType":"YulFunctionCall","src":"10721:31:46"},"nodeType":"YulExpressionStatement","src":"10721:31:46"},{"nodeType":"YulAssignment","src":"10761:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"10771:5:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10761:6:46"}]},{"nodeType":"YulAssignment","src":"10785:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10812:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"10823:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10808:3:46"},"nodeType":"YulFunctionCall","src":"10808:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10795:12:46"},"nodeType":"YulFunctionCall","src":"10795:32:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10785:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"10836:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10868:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"10879:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10864:3:46"},"nodeType":"YulFunctionCall","src":"10864:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10851:12:46"},"nodeType":"YulFunctionCall","src":"10851:32:46"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"10840:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"10917:7:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10892:24:46"},"nodeType":"YulFunctionCall","src":"10892:33:46"},"nodeType":"YulExpressionStatement","src":"10892:33:46"},{"nodeType":"YulAssignment","src":"10934:17:46","value":{"name":"value_1","nodeType":"YulIdentifier","src":"10944:7:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10934:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10555:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10566:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10578:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10586:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10594:6:46","type":""}],"src":"10501:456:46"},{"body":{"nodeType":"YulBlock","src":"11053:283:46","statements":[{"body":{"nodeType":"YulBlock","src":"11102:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11111:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11114:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11104:6:46"},"nodeType":"YulFunctionCall","src":"11104:12:46"},"nodeType":"YulExpressionStatement","src":"11104:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11081:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"11089:4:46","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11077:3:46"},"nodeType":"YulFunctionCall","src":"11077:17:46"},{"name":"end","nodeType":"YulIdentifier","src":"11096:3:46"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11073:3:46"},"nodeType":"YulFunctionCall","src":"11073:27:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11066:6:46"},"nodeType":"YulFunctionCall","src":"11066:35:46"},"nodeType":"YulIf","src":"11063:55:46"},{"nodeType":"YulAssignment","src":"11127:30:46","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11150:6:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11137:12:46"},"nodeType":"YulFunctionCall","src":"11137:20:46"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11127:6:46"}]},{"body":{"nodeType":"YulBlock","src":"11200:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11209:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11212:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11202:6:46"},"nodeType":"YulFunctionCall","src":"11202:12:46"},"nodeType":"YulExpressionStatement","src":"11202:12:46"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11172:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"11180:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11169:2:46"},"nodeType":"YulFunctionCall","src":"11169:30:46"},"nodeType":"YulIf","src":"11166:50:46"},{"nodeType":"YulAssignment","src":"11225:29:46","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11241:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"11249:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11237:3:46"},"nodeType":"YulFunctionCall","src":"11237:17:46"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"11225:8:46"}]},{"body":{"nodeType":"YulBlock","src":"11314:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11323:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11326:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11316:6:46"},"nodeType":"YulFunctionCall","src":"11316:12:46"},"nodeType":"YulExpressionStatement","src":"11316:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11277:6:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11289:1:46","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"11292:6:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11285:3:46"},"nodeType":"YulFunctionCall","src":"11285:14:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11273:3:46"},"nodeType":"YulFunctionCall","src":"11273:27:46"},{"kind":"number","nodeType":"YulLiteral","src":"11302:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11269:3:46"},"nodeType":"YulFunctionCall","src":"11269:38:46"},{"name":"end","nodeType":"YulIdentifier","src":"11309:3:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11266:2:46"},"nodeType":"YulFunctionCall","src":"11266:47:46"},"nodeType":"YulIf","src":"11263:67:46"}]},"name":"abi_decode_array_bytes_calldata_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"11016:6:46","type":""},{"name":"end","nodeType":"YulTypedName","src":"11024:3:46","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"11032:8:46","type":""},{"name":"length","nodeType":"YulTypedName","src":"11042:6:46","type":""}],"src":"10962:374:46"},{"body":{"nodeType":"YulBlock","src":"11457:339:46","statements":[{"body":{"nodeType":"YulBlock","src":"11503:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11512:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11515:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11505:6:46"},"nodeType":"YulFunctionCall","src":"11505:12:46"},"nodeType":"YulExpressionStatement","src":"11505:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11478:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"11487:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11474:3:46"},"nodeType":"YulFunctionCall","src":"11474:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"11499:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11470:3:46"},"nodeType":"YulFunctionCall","src":"11470:32:46"},"nodeType":"YulIf","src":"11467:52:46"},{"nodeType":"YulVariableDeclaration","src":"11528:37:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11555:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11542:12:46"},"nodeType":"YulFunctionCall","src":"11542:23:46"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11532:6:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"11608:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11617:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11620:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11610:6:46"},"nodeType":"YulFunctionCall","src":"11610:12:46"},"nodeType":"YulExpressionStatement","src":"11610:12:46"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11580:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"11588:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11577:2:46"},"nodeType":"YulFunctionCall","src":"11577:30:46"},"nodeType":"YulIf","src":"11574:50:46"},{"nodeType":"YulVariableDeclaration","src":"11633:103:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11708:9:46"},{"name":"offset","nodeType":"YulIdentifier","src":"11719:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11704:3:46"},"nodeType":"YulFunctionCall","src":"11704:22:46"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11728:7:46"}],"functionName":{"name":"abi_decode_array_bytes_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"11659:44:46"},"nodeType":"YulFunctionCall","src":"11659:77:46"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"11637:8:46","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"11647:8:46","type":""}]},{"nodeType":"YulAssignment","src":"11745:18:46","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"11755:8:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11745:6:46"}]},{"nodeType":"YulAssignment","src":"11772:18:46","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"11782:8:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11772:6:46"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11415:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11426:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11438:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11446:6:46","type":""}],"src":"11341:455:46"},{"body":{"nodeType":"YulBlock","src":"11970:631:46","statements":[{"nodeType":"YulVariableDeclaration","src":"11980:12:46","value":{"kind":"number","nodeType":"YulLiteral","src":"11990:2:46","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11984:2:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12001:32:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12019:9:46"},{"name":"_1","nodeType":"YulIdentifier","src":"12030:2:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12015:3:46"},"nodeType":"YulFunctionCall","src":"12015:18:46"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"12005:6:46","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12049:9:46"},{"name":"_1","nodeType":"YulIdentifier","src":"12060:2:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12042:6:46"},"nodeType":"YulFunctionCall","src":"12042:21:46"},"nodeType":"YulExpressionStatement","src":"12042:21:46"},{"nodeType":"YulVariableDeclaration","src":"12072:17:46","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"12083:6:46"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"12076:3:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12098:27:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12118:6:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12112:5:46"},"nodeType":"YulFunctionCall","src":"12112:13:46"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12102:6:46","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"12141:6:46"},{"name":"length","nodeType":"YulIdentifier","src":"12149:6:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12134:6:46"},"nodeType":"YulFunctionCall","src":"12134:22:46"},"nodeType":"YulExpressionStatement","src":"12134:22:46"},{"nodeType":"YulAssignment","src":"12165:25:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12176:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"12187:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12172:3:46"},"nodeType":"YulFunctionCall","src":"12172:18:46"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12165:3:46"}]},{"nodeType":"YulVariableDeclaration","src":"12199:53:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12221:9:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12236:1:46","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"12239:6:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12232:3:46"},"nodeType":"YulFunctionCall","src":"12232:14:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12217:3:46"},"nodeType":"YulFunctionCall","src":"12217:30:46"},{"kind":"number","nodeType":"YulLiteral","src":"12249:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12213:3:46"},"nodeType":"YulFunctionCall","src":"12213:39:46"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"12203:6:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12261:29:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12279:6:46"},{"name":"_1","nodeType":"YulIdentifier","src":"12287:2:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12275:3:46"},"nodeType":"YulFunctionCall","src":"12275:15:46"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"12265:6:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12299:10:46","value":{"kind":"number","nodeType":"YulLiteral","src":"12308:1:46","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12303:1:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"12367:205:46","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12388:3:46"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"12401:6:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"12409:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12397:3:46"},"nodeType":"YulFunctionCall","src":"12397:22:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12425:2:46","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12421:3:46"},"nodeType":"YulFunctionCall","src":"12421:7:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12393:3:46"},"nodeType":"YulFunctionCall","src":"12393:36:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12381:6:46"},"nodeType":"YulFunctionCall","src":"12381:49:46"},"nodeType":"YulExpressionStatement","src":"12381:49:46"},{"nodeType":"YulAssignment","src":"12443:49:46","value":{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12476:6:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12470:5:46"},"nodeType":"YulFunctionCall","src":"12470:13:46"},{"name":"tail_2","nodeType":"YulIdentifier","src":"12485:6:46"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"12453:16:46"},"nodeType":"YulFunctionCall","src":"12453:39:46"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"12443:6:46"}]},{"nodeType":"YulAssignment","src":"12505:25:46","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12519:6:46"},{"name":"_1","nodeType":"YulIdentifier","src":"12527:2:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12515:3:46"},"nodeType":"YulFunctionCall","src":"12515:15:46"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12505:6:46"}]},{"nodeType":"YulAssignment","src":"12543:19:46","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12554:3:46"},{"name":"_1","nodeType":"YulIdentifier","src":"12559:2:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12550:3:46"},"nodeType":"YulFunctionCall","src":"12550:12:46"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12543:3:46"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12329:1:46"},{"name":"length","nodeType":"YulIdentifier","src":"12332:6:46"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12326:2:46"},"nodeType":"YulFunctionCall","src":"12326:13:46"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12340:18:46","statements":[{"nodeType":"YulAssignment","src":"12342:14:46","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12351:1:46"},{"kind":"number","nodeType":"YulLiteral","src":"12354:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12347:3:46"},"nodeType":"YulFunctionCall","src":"12347:9:46"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12342:1:46"}]}]},"pre":{"nodeType":"YulBlock","src":"12322:3:46","statements":[]},"src":"12318:254:46"},{"nodeType":"YulAssignment","src":"12581:14:46","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"12589:6:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12581:4:46"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11939:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11950:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11961:4:46","type":""}],"src":"11801:800:46"},{"body":{"nodeType":"YulBlock","src":"12735:119:46","statements":[{"nodeType":"YulAssignment","src":"12745:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12757:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"12768:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12753:3:46"},"nodeType":"YulFunctionCall","src":"12753:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12745:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12787:9:46"},{"name":"value0","nodeType":"YulIdentifier","src":"12798:6:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12780:6:46"},"nodeType":"YulFunctionCall","src":"12780:25:46"},"nodeType":"YulExpressionStatement","src":"12780:25:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12825:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"12836:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12821:3:46"},"nodeType":"YulFunctionCall","src":"12821:18:46"},{"name":"value1","nodeType":"YulIdentifier","src":"12841:6:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12814:6:46"},"nodeType":"YulFunctionCall","src":"12814:34:46"},"nodeType":"YulExpressionStatement","src":"12814:34:46"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12696:9:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12707:6:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12715:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12726:4:46","type":""}],"src":"12606:248:46"},{"body":{"nodeType":"YulBlock","src":"12946:228:46","statements":[{"body":{"nodeType":"YulBlock","src":"12992:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13001:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13004:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12994:6:46"},"nodeType":"YulFunctionCall","src":"12994:12:46"},"nodeType":"YulExpressionStatement","src":"12994:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12967:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"12976:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12963:3:46"},"nodeType":"YulFunctionCall","src":"12963:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"12988:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12959:3:46"},"nodeType":"YulFunctionCall","src":"12959:32:46"},"nodeType":"YulIf","src":"12956:52:46"},{"nodeType":"YulAssignment","src":"13017:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13040:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13027:12:46"},"nodeType":"YulFunctionCall","src":"13027:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13017:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"13059:45:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13089:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"13100:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13085:3:46"},"nodeType":"YulFunctionCall","src":"13085:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13072:12:46"},"nodeType":"YulFunctionCall","src":"13072:32:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13063:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13138:5:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"13113:24:46"},"nodeType":"YulFunctionCall","src":"13113:31:46"},"nodeType":"YulExpressionStatement","src":"13113:31:46"},{"nodeType":"YulAssignment","src":"13153:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"13163:5:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13153:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12904:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12915:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12927:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12935:6:46","type":""}],"src":"12859:315:46"},{"body":{"nodeType":"YulBlock","src":"13278:101:46","statements":[{"nodeType":"YulAssignment","src":"13288:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13300:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"13311:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13296:3:46"},"nodeType":"YulFunctionCall","src":"13296:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13288:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13330:9:46"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13345:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"13353:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13341:3:46"},"nodeType":"YulFunctionCall","src":"13341:31:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13323:6:46"},"nodeType":"YulFunctionCall","src":"13323:50:46"},"nodeType":"YulExpressionStatement","src":"13323:50:46"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13247:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13258:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13269:4:46","type":""}],"src":"13179:200:46"},{"body":{"nodeType":"YulBlock","src":"13517:390:46","statements":[{"body":{"nodeType":"YulBlock","src":"13563:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13572:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13575:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13565:6:46"},"nodeType":"YulFunctionCall","src":"13565:12:46"},"nodeType":"YulExpressionStatement","src":"13565:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13538:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"13547:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13534:3:46"},"nodeType":"YulFunctionCall","src":"13534:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"13559:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13530:3:46"},"nodeType":"YulFunctionCall","src":"13530:32:46"},"nodeType":"YulIf","src":"13527:52:46"},{"nodeType":"YulAssignment","src":"13588:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13611:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13598:12:46"},"nodeType":"YulFunctionCall","src":"13598:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13588:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"13630:46:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13661:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"13672:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13657:3:46"},"nodeType":"YulFunctionCall","src":"13657:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13644:12:46"},"nodeType":"YulFunctionCall","src":"13644:32:46"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13634:6:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"13719:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13728:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13731:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13721:6:46"},"nodeType":"YulFunctionCall","src":"13721:12:46"},"nodeType":"YulExpressionStatement","src":"13721:12:46"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13691:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"13699:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13688:2:46"},"nodeType":"YulFunctionCall","src":"13688:30:46"},"nodeType":"YulIf","src":"13685:50:46"},{"nodeType":"YulVariableDeclaration","src":"13744:103:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13819:9:46"},{"name":"offset","nodeType":"YulIdentifier","src":"13830:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13815:3:46"},"nodeType":"YulFunctionCall","src":"13815:22:46"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13839:7:46"}],"functionName":{"name":"abi_decode_array_bytes_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"13770:44:46"},"nodeType":"YulFunctionCall","src":"13770:77:46"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"13748:8:46","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"13758:8:46","type":""}]},{"nodeType":"YulAssignment","src":"13856:18:46","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"13866:8:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13856:6:46"}]},{"nodeType":"YulAssignment","src":"13883:18:46","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"13893:8:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"13883:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13467:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13478:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13490:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13498:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13506:6:46","type":""}],"src":"13384:523:46"},{"body":{"nodeType":"YulBlock","src":"14015:284:46","statements":[{"body":{"nodeType":"YulBlock","src":"14061:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14070:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14073:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14063:6:46"},"nodeType":"YulFunctionCall","src":"14063:12:46"},"nodeType":"YulExpressionStatement","src":"14063:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14036:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"14045:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14032:3:46"},"nodeType":"YulFunctionCall","src":"14032:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"14057:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14028:3:46"},"nodeType":"YulFunctionCall","src":"14028:32:46"},"nodeType":"YulIf","src":"14025:52:46"},{"nodeType":"YulAssignment","src":"14086:33:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14109:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14096:12:46"},"nodeType":"YulFunctionCall","src":"14096:23:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14086:6:46"}]},{"nodeType":"YulAssignment","src":"14128:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14160:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"14171:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14156:3:46"},"nodeType":"YulFunctionCall","src":"14156:18:46"}],"functionName":{"name":"abi_decode_bytes4","nodeType":"YulIdentifier","src":"14138:17:46"},"nodeType":"YulFunctionCall","src":"14138:37:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14128:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"14184:45:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14214:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"14225:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14210:3:46"},"nodeType":"YulFunctionCall","src":"14210:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14197:12:46"},"nodeType":"YulFunctionCall","src":"14197:32:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14188:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14263:5:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"14238:24:46"},"nodeType":"YulFunctionCall","src":"14238:31:46"},"nodeType":"YulExpressionStatement","src":"14238:31:46"},{"nodeType":"YulAssignment","src":"14278:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"14288:5:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"14278:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes4t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13965:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13976:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13988:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13996:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14004:6:46","type":""}],"src":"13912:387:46"},{"body":{"nodeType":"YulBlock","src":"14391:301:46","statements":[{"body":{"nodeType":"YulBlock","src":"14437:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14446:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14449:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14439:6:46"},"nodeType":"YulFunctionCall","src":"14439:12:46"},"nodeType":"YulExpressionStatement","src":"14439:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14412:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"14421:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14408:3:46"},"nodeType":"YulFunctionCall","src":"14408:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"14433:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14404:3:46"},"nodeType":"YulFunctionCall","src":"14404:32:46"},"nodeType":"YulIf","src":"14401:52:46"},{"nodeType":"YulVariableDeclaration","src":"14462:36:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14488:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14475:12:46"},"nodeType":"YulFunctionCall","src":"14475:23:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14466:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14532:5:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"14507:24:46"},"nodeType":"YulFunctionCall","src":"14507:31:46"},"nodeType":"YulExpressionStatement","src":"14507:31:46"},{"nodeType":"YulAssignment","src":"14547:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"14557:5:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14547:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"14571:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14603:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"14614:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14599:3:46"},"nodeType":"YulFunctionCall","src":"14599:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14586:12:46"},"nodeType":"YulFunctionCall","src":"14586:32:46"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"14575:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"14652:7:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"14627:24:46"},"nodeType":"YulFunctionCall","src":"14627:33:46"},"nodeType":"YulExpressionStatement","src":"14627:33:46"},{"nodeType":"YulAssignment","src":"14669:17:46","value":{"name":"value_1","nodeType":"YulIdentifier","src":"14679:7:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14669:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14349:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14360:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14372:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14380:6:46","type":""}],"src":"14304:388:46"},{"body":{"nodeType":"YulBlock","src":"14851:550:46","statements":[{"body":{"nodeType":"YulBlock","src":"14898:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14907:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14910:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14900:6:46"},"nodeType":"YulFunctionCall","src":"14900:12:46"},"nodeType":"YulExpressionStatement","src":"14900:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14872:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"14881:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14868:3:46"},"nodeType":"YulFunctionCall","src":"14868:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"14893:3:46","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14864:3:46"},"nodeType":"YulFunctionCall","src":"14864:33:46"},"nodeType":"YulIf","src":"14861:53:46"},{"nodeType":"YulVariableDeclaration","src":"14923:36:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14949:9:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14936:12:46"},"nodeType":"YulFunctionCall","src":"14936:23:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14927:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14993:5:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"14968:24:46"},"nodeType":"YulFunctionCall","src":"14968:31:46"},"nodeType":"YulExpressionStatement","src":"14968:31:46"},{"nodeType":"YulAssignment","src":"15008:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"15018:5:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15008:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"15032:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15064:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"15075:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15060:3:46"},"nodeType":"YulFunctionCall","src":"15060:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15047:12:46"},"nodeType":"YulFunctionCall","src":"15047:32:46"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"15036:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"15113:7:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"15088:24:46"},"nodeType":"YulFunctionCall","src":"15088:33:46"},"nodeType":"YulExpressionStatement","src":"15088:33:46"},{"nodeType":"YulAssignment","src":"15130:17:46","value":{"name":"value_1","nodeType":"YulIdentifier","src":"15140:7:46"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15130:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"15156:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15188:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"15199:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15184:3:46"},"nodeType":"YulFunctionCall","src":"15184:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15171:12:46"},"nodeType":"YulFunctionCall","src":"15171:32:46"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"15160:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"15237:7:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"15212:24:46"},"nodeType":"YulFunctionCall","src":"15212:33:46"},"nodeType":"YulExpressionStatement","src":"15212:33:46"},{"nodeType":"YulAssignment","src":"15254:17:46","value":{"name":"value_2","nodeType":"YulIdentifier","src":"15264:7:46"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15254:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"15280:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15312:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"15323:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15308:3:46"},"nodeType":"YulFunctionCall","src":"15308:18:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15295:12:46"},"nodeType":"YulFunctionCall","src":"15295:32:46"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"15284:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"15361:7:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"15336:24:46"},"nodeType":"YulFunctionCall","src":"15336:33:46"},"nodeType":"YulExpressionStatement","src":"15336:33:46"},{"nodeType":"YulAssignment","src":"15378:17:46","value":{"name":"value_3","nodeType":"YulIdentifier","src":"15388:7:46"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"15378:6:46"}]}]},"name":"abi_decode_tuple_t_contract$_ENS_$3320t_contract$_INameWrapper_$6917t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14793:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14804:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14816:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14824:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14832:6:46","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14840:6:46","type":""}],"src":"14697:704:46"},{"body":{"nodeType":"YulBlock","src":"15543:150:46","statements":[{"nodeType":"YulVariableDeclaration","src":"15553:27:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15573:6:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15567:5:46"},"nodeType":"YulFunctionCall","src":"15567:13:46"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15557:6:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15628:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"15636:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15624:3:46"},"nodeType":"YulFunctionCall","src":"15624:17:46"},{"name":"pos","nodeType":"YulIdentifier","src":"15643:3:46"},{"name":"length","nodeType":"YulIdentifier","src":"15648:6:46"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15589:34:46"},"nodeType":"YulFunctionCall","src":"15589:66:46"},"nodeType":"YulExpressionStatement","src":"15589:66:46"},{"nodeType":"YulAssignment","src":"15664:23:46","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15675:3:46"},{"name":"length","nodeType":"YulIdentifier","src":"15680:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15671:3:46"},"nodeType":"YulFunctionCall","src":"15671:16:46"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15664:3:46"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15519:3:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15524:6:46","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15535:3:46","type":""}],"src":"15406:287:46"},{"body":{"nodeType":"YulBlock","src":"15730:152:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15747:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15750:77:46","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15740:6:46"},"nodeType":"YulFunctionCall","src":"15740:88:46"},"nodeType":"YulExpressionStatement","src":"15740:88:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15844:1:46","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15847:4:46","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15837:6:46"},"nodeType":"YulFunctionCall","src":"15837:15:46"},"nodeType":"YulExpressionStatement","src":"15837:15:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15868:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15871:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15861:6:46"},"nodeType":"YulFunctionCall","src":"15861:15:46"},"nodeType":"YulExpressionStatement","src":"15861:15:46"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"15698:184:46"},{"body":{"nodeType":"YulBlock","src":"15936:79:46","statements":[{"nodeType":"YulAssignment","src":"15946:17:46","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15958:1:46"},{"name":"y","nodeType":"YulIdentifier","src":"15961:1:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15954:3:46"},"nodeType":"YulFunctionCall","src":"15954:9:46"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"15946:4:46"}]},{"body":{"nodeType":"YulBlock","src":"15987:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15989:16:46"},"nodeType":"YulFunctionCall","src":"15989:18:46"},"nodeType":"YulExpressionStatement","src":"15989:18:46"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"15978:4:46"},{"name":"x","nodeType":"YulIdentifier","src":"15984:1:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15975:2:46"},"nodeType":"YulFunctionCall","src":"15975:11:46"},"nodeType":"YulIf","src":"15972:37:46"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15918:1:46","type":""},{"name":"y","nodeType":"YulTypedName","src":"15921:1:46","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"15927:4:46","type":""}],"src":"15887:128:46"},{"body":{"nodeType":"YulBlock","src":"16169:124:46","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16192:3:46"},{"name":"value0","nodeType":"YulIdentifier","src":"16197:6:46"},{"name":"value1","nodeType":"YulIdentifier","src":"16205:6:46"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"16179:12:46"},"nodeType":"YulFunctionCall","src":"16179:33:46"},"nodeType":"YulExpressionStatement","src":"16179:33:46"},{"nodeType":"YulVariableDeclaration","src":"16221:26:46","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16235:3:46"},{"name":"value1","nodeType":"YulIdentifier","src":"16240:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16231:3:46"},"nodeType":"YulFunctionCall","src":"16231:16:46"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16225:2:46","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"16263:2:46"},{"kind":"number","nodeType":"YulLiteral","src":"16267:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16256:6:46"},"nodeType":"YulFunctionCall","src":"16256:13:46"},"nodeType":"YulExpressionStatement","src":"16256:13:46"},{"nodeType":"YulAssignment","src":"16278:9:46","value":{"name":"_1","nodeType":"YulIdentifier","src":"16285:2:46"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16278:3:46"}]}]},"name":"abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16137:3:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16142:6:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16150:6:46","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16161:3:46","type":""}],"src":"16020:273:46"},{"body":{"nodeType":"YulBlock","src":"16353:382:46","statements":[{"nodeType":"YulAssignment","src":"16363:22:46","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16377:1:46","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"16380:4:46"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16373:3:46"},"nodeType":"YulFunctionCall","src":"16373:12:46"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16363:6:46"}]},{"nodeType":"YulVariableDeclaration","src":"16394:38:46","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"16424:4:46"},{"kind":"number","nodeType":"YulLiteral","src":"16430:1:46","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16420:3:46"},"nodeType":"YulFunctionCall","src":"16420:12:46"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"16398:18:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"16471:31:46","statements":[{"nodeType":"YulAssignment","src":"16473:27:46","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16487:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"16495:4:46","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16483:3:46"},"nodeType":"YulFunctionCall","src":"16483:17:46"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16473:6:46"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"16451:18:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16444:6:46"},"nodeType":"YulFunctionCall","src":"16444:26:46"},"nodeType":"YulIf","src":"16441:61:46"},{"body":{"nodeType":"YulBlock","src":"16561:168:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16582:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16585:77:46","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16575:6:46"},"nodeType":"YulFunctionCall","src":"16575:88:46"},"nodeType":"YulExpressionStatement","src":"16575:88:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16683:1:46","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16686:4:46","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16676:6:46"},"nodeType":"YulFunctionCall","src":"16676:15:46"},"nodeType":"YulExpressionStatement","src":"16676:15:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16711:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16714:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16704:6:46"},"nodeType":"YulFunctionCall","src":"16704:15:46"},"nodeType":"YulExpressionStatement","src":"16704:15:46"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"16517:18:46"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16540:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"16548:2:46","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16537:2:46"},"nodeType":"YulFunctionCall","src":"16537:14:46"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16514:2:46"},"nodeType":"YulFunctionCall","src":"16514:38:46"},"nodeType":"YulIf","src":"16511:218:46"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"16333:4:46","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"16342:6:46","type":""}],"src":"16298:437:46"},{"body":{"nodeType":"YulBlock","src":"16796:65:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16813:1:46","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"16816:3:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16806:6:46"},"nodeType":"YulFunctionCall","src":"16806:14:46"},"nodeType":"YulExpressionStatement","src":"16806:14:46"},{"nodeType":"YulAssignment","src":"16829:26:46","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16847:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16850:4:46","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"16837:9:46"},"nodeType":"YulFunctionCall","src":"16837:18:46"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"16829:4:46"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"16779:3:46","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"16787:4:46","type":""}],"src":"16740:121:46"},{"body":{"nodeType":"YulBlock","src":"16947:464:46","statements":[{"body":{"nodeType":"YulBlock","src":"16980:425:46","statements":[{"nodeType":"YulVariableDeclaration","src":"16994:11:46","value":{"kind":"number","nodeType":"YulLiteral","src":"17004:1:46","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16998:2:46","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17025:2:46"},{"name":"array","nodeType":"YulIdentifier","src":"17029:5:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17018:6:46"},"nodeType":"YulFunctionCall","src":"17018:17:46"},"nodeType":"YulExpressionStatement","src":"17018:17:46"},{"nodeType":"YulVariableDeclaration","src":"17048:31:46","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17070:2:46"},{"kind":"number","nodeType":"YulLiteral","src":"17074:4:46","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"17060:9:46"},"nodeType":"YulFunctionCall","src":"17060:19:46"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"17052:4:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17092:57:46","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17115:4:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17125:1:46","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"17132:10:46"},{"kind":"number","nodeType":"YulLiteral","src":"17144:2:46","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17128:3:46"},"nodeType":"YulFunctionCall","src":"17128:19:46"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17121:3:46"},"nodeType":"YulFunctionCall","src":"17121:27:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17111:3:46"},"nodeType":"YulFunctionCall","src":"17111:38:46"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"17096:11:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"17186:23:46","statements":[{"nodeType":"YulAssignment","src":"17188:19:46","value":{"name":"data","nodeType":"YulIdentifier","src":"17203:4:46"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"17188:11:46"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"17168:10:46"},{"kind":"number","nodeType":"YulLiteral","src":"17180:4:46","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17165:2:46"},"nodeType":"YulFunctionCall","src":"17165:20:46"},"nodeType":"YulIf","src":"17162:47:46"},{"nodeType":"YulVariableDeclaration","src":"17222:41:46","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17236:4:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17246:1:46","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"17253:3:46"},{"kind":"number","nodeType":"YulLiteral","src":"17258:2:46","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17249:3:46"},"nodeType":"YulFunctionCall","src":"17249:12:46"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17242:3:46"},"nodeType":"YulFunctionCall","src":"17242:20:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17232:3:46"},"nodeType":"YulFunctionCall","src":"17232:31:46"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"17226:2:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17276:24:46","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"17289:11:46"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"17280:5:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"17374:21:46","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17383:5:46"},{"name":"_1","nodeType":"YulIdentifier","src":"17390:2:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"17376:6:46"},"nodeType":"YulFunctionCall","src":"17376:17:46"},"nodeType":"YulExpressionStatement","src":"17376:17:46"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17324:5:46"},{"name":"_2","nodeType":"YulIdentifier","src":"17331:2:46"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17321:2:46"},"nodeType":"YulFunctionCall","src":"17321:13:46"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17335:26:46","statements":[{"nodeType":"YulAssignment","src":"17337:22:46","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17350:5:46"},{"kind":"number","nodeType":"YulLiteral","src":"17357:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17346:3:46"},"nodeType":"YulFunctionCall","src":"17346:13:46"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"17337:5:46"}]}]},"pre":{"nodeType":"YulBlock","src":"17317:3:46","statements":[]},"src":"17313:82:46"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"16963:3:46"},{"kind":"number","nodeType":"YulLiteral","src":"16968:2:46","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16960:2:46"},"nodeType":"YulFunctionCall","src":"16960:11:46"},"nodeType":"YulIf","src":"16957:448:46"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"16919:5:46","type":""},{"name":"len","nodeType":"YulTypedName","src":"16926:3:46","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"16931:10:46","type":""}],"src":"16866:545:46"},{"body":{"nodeType":"YulBlock","src":"17501:81:46","statements":[{"nodeType":"YulAssignment","src":"17511:65:46","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17526:4:46"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17544:1:46","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"17547:3:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17540:3:46"},"nodeType":"YulFunctionCall","src":"17540:11:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17557:1:46","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17553:3:46"},"nodeType":"YulFunctionCall","src":"17553:6:46"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17536:3:46"},"nodeType":"YulFunctionCall","src":"17536:24:46"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17532:3:46"},"nodeType":"YulFunctionCall","src":"17532:29:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17522:3:46"},"nodeType":"YulFunctionCall","src":"17522:40:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17568:1:46","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"17571:3:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17564:3:46"},"nodeType":"YulFunctionCall","src":"17564:11:46"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"17519:2:46"},"nodeType":"YulFunctionCall","src":"17519:57:46"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"17511:4:46"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"17478:4:46","type":""},{"name":"len","nodeType":"YulTypedName","src":"17484:3:46","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"17492:4:46","type":""}],"src":"17416:166:46"},{"body":{"nodeType":"YulBlock","src":"17690:1103:46","statements":[{"body":{"nodeType":"YulBlock","src":"17731:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"17733:16:46"},"nodeType":"YulFunctionCall","src":"17733:18:46"},"nodeType":"YulExpressionStatement","src":"17733:18:46"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"17706:3:46"},{"kind":"number","nodeType":"YulLiteral","src":"17711:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17703:2:46"},"nodeType":"YulFunctionCall","src":"17703:27:46"},"nodeType":"YulIf","src":"17700:53:46"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"17806:4:46"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"17844:4:46"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"17838:5:46"},"nodeType":"YulFunctionCall","src":"17838:11:46"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"17812:25:46"},"nodeType":"YulFunctionCall","src":"17812:38:46"},{"name":"len","nodeType":"YulIdentifier","src":"17852:3:46"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"17762:43:46"},"nodeType":"YulFunctionCall","src":"17762:94:46"},"nodeType":"YulExpressionStatement","src":"17762:94:46"},{"nodeType":"YulVariableDeclaration","src":"17865:18:46","value":{"kind":"number","nodeType":"YulLiteral","src":"17882:1:46","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"17869:9:46","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"17926:609:46","statements":[{"nodeType":"YulVariableDeclaration","src":"17940:32:46","value":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"17959:3:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17968:2:46","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17964:3:46"},"nodeType":"YulFunctionCall","src":"17964:7:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17955:3:46"},"nodeType":"YulFunctionCall","src":"17955:17:46"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"17944:7:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17985:49:46","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18029:4:46"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"17999:29:46"},"nodeType":"YulFunctionCall","src":"17999:35:46"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"17989:6:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18047:18:46","value":{"name":"srcOffset","nodeType":"YulIdentifier","src":"18056:9:46"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"18051:1:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"18135:172:46","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18160:6:46"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18185:3:46"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"18190:9:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18181:3:46"},"nodeType":"YulFunctionCall","src":"18181:19:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18168:12:46"},"nodeType":"YulFunctionCall","src":"18168:33:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18153:6:46"},"nodeType":"YulFunctionCall","src":"18153:49:46"},"nodeType":"YulExpressionStatement","src":"18153:49:46"},{"nodeType":"YulAssignment","src":"18219:24:46","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18233:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"18241:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18229:3:46"},"nodeType":"YulFunctionCall","src":"18229:14:46"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18219:6:46"}]},{"nodeType":"YulAssignment","src":"18260:33:46","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18277:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"18288:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18273:3:46"},"nodeType":"YulFunctionCall","src":"18273:20:46"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18260:9:46"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18089:1:46"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"18092:7:46"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18086:2:46"},"nodeType":"YulFunctionCall","src":"18086:14:46"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18101:21:46","statements":[{"nodeType":"YulAssignment","src":"18103:17:46","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18112:1:46"},{"kind":"number","nodeType":"YulLiteral","src":"18115:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18108:3:46"},"nodeType":"YulFunctionCall","src":"18108:12:46"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"18103:1:46"}]}]},"pre":{"nodeType":"YulBlock","src":"18082:3:46","statements":[]},"src":"18078:229:46"},{"body":{"nodeType":"YulBlock","src":"18352:127:46","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18377:6:46"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18406:3:46"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"18411:9:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18402:3:46"},"nodeType":"YulFunctionCall","src":"18402:19:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18389:12:46"},"nodeType":"YulFunctionCall","src":"18389:33:46"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18440:1:46","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"18443:3:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18436:3:46"},"nodeType":"YulFunctionCall","src":"18436:11:46"},{"kind":"number","nodeType":"YulLiteral","src":"18449:3:46","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18432:3:46"},"nodeType":"YulFunctionCall","src":"18432:21:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18459:1:46","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18455:3:46"},"nodeType":"YulFunctionCall","src":"18455:6:46"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"18428:3:46"},"nodeType":"YulFunctionCall","src":"18428:34:46"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18424:3:46"},"nodeType":"YulFunctionCall","src":"18424:39:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18385:3:46"},"nodeType":"YulFunctionCall","src":"18385:79:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18370:6:46"},"nodeType":"YulFunctionCall","src":"18370:95:46"},"nodeType":"YulExpressionStatement","src":"18370:95:46"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"18326:7:46"},{"name":"len","nodeType":"YulIdentifier","src":"18335:3:46"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18323:2:46"},"nodeType":"YulFunctionCall","src":"18323:16:46"},"nodeType":"YulIf","src":"18320:159:46"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18499:4:46"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18513:1:46","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"18516:3:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18509:3:46"},"nodeType":"YulFunctionCall","src":"18509:11:46"},{"kind":"number","nodeType":"YulLiteral","src":"18522:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18505:3:46"},"nodeType":"YulFunctionCall","src":"18505:19:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18492:6:46"},"nodeType":"YulFunctionCall","src":"18492:33:46"},"nodeType":"YulExpressionStatement","src":"18492:33:46"}]},"nodeType":"YulCase","src":"17919:616:46","value":{"kind":"number","nodeType":"YulLiteral","src":"17924:1:46","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"18552:235:46","statements":[{"nodeType":"YulVariableDeclaration","src":"18566:14:46","value":{"kind":"number","nodeType":"YulLiteral","src":"18579:1:46","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"18570:5:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"18612:74:46","statements":[{"nodeType":"YulAssignment","src":"18630:42:46","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18656:3:46"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"18661:9:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18652:3:46"},"nodeType":"YulFunctionCall","src":"18652:19:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18639:12:46"},"nodeType":"YulFunctionCall","src":"18639:33:46"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18630:5:46"}]}]},"condition":{"name":"len","nodeType":"YulIdentifier","src":"18596:3:46"},"nodeType":"YulIf","src":"18593:93:46"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18706:4:46"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18765:5:46"},{"name":"len","nodeType":"YulIdentifier","src":"18772:3:46"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"18712:52:46"},"nodeType":"YulFunctionCall","src":"18712:64:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18699:6:46"},"nodeType":"YulFunctionCall","src":"18699:78:46"},"nodeType":"YulExpressionStatement","src":"18699:78:46"}]},"nodeType":"YulCase","src":"18544:243:46","value":"default"}],"expression":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"17902:3:46"},{"kind":"number","nodeType":"YulLiteral","src":"17907:2:46","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17899:2:46"},"nodeType":"YulFunctionCall","src":"17899:11:46"},"nodeType":"YulSwitch","src":"17892:895:46"}]},"name":"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"17670:4:46","type":""},{"name":"src","nodeType":"YulTypedName","src":"17676:3:46","type":""},{"name":"len","nodeType":"YulTypedName","src":"17681:3:46","type":""}],"src":"17587:1206:46"},{"body":{"nodeType":"YulBlock","src":"18865:200:46","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18882:3:46"},{"name":"length","nodeType":"YulIdentifier","src":"18887:6:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18875:6:46"},"nodeType":"YulFunctionCall","src":"18875:19:46"},"nodeType":"YulExpressionStatement","src":"18875:19:46"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18920:3:46"},{"kind":"number","nodeType":"YulLiteral","src":"18925:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18916:3:46"},"nodeType":"YulFunctionCall","src":"18916:14:46"},{"name":"start","nodeType":"YulIdentifier","src":"18932:5:46"},{"name":"length","nodeType":"YulIdentifier","src":"18939:6:46"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"18903:12:46"},"nodeType":"YulFunctionCall","src":"18903:43:46"},"nodeType":"YulExpressionStatement","src":"18903:43:46"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18970:3:46"},{"name":"length","nodeType":"YulIdentifier","src":"18975:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18966:3:46"},"nodeType":"YulFunctionCall","src":"18966:16:46"},{"kind":"number","nodeType":"YulLiteral","src":"18984:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18962:3:46"},"nodeType":"YulFunctionCall","src":"18962:27:46"},{"kind":"number","nodeType":"YulLiteral","src":"18991:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18955:6:46"},"nodeType":"YulFunctionCall","src":"18955:38:46"},"nodeType":"YulExpressionStatement","src":"18955:38:46"},{"nodeType":"YulAssignment","src":"19002:57:46","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19017:3:46"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19030:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"19038:2:46","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19026:3:46"},"nodeType":"YulFunctionCall","src":"19026:15:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19047:2:46","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19043:3:46"},"nodeType":"YulFunctionCall","src":"19043:7:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19022:3:46"},"nodeType":"YulFunctionCall","src":"19022:29:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19013:3:46"},"nodeType":"YulFunctionCall","src":"19013:39:46"},{"kind":"number","nodeType":"YulLiteral","src":"19054:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19009:3:46"},"nodeType":"YulFunctionCall","src":"19009:50:46"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19002:3:46"}]}]},"name":"abi_encode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"18834:5:46","type":""},{"name":"length","nodeType":"YulTypedName","src":"18841:6:46","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18849:3:46","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18857:3:46","type":""}],"src":"18798:267:46"},{"body":{"nodeType":"YulBlock","src":"19259:248:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19276:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"19287:2:46","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19269:6:46"},"nodeType":"YulFunctionCall","src":"19269:21:46"},"nodeType":"YulExpressionStatement","src":"19269:21:46"},{"nodeType":"YulVariableDeclaration","src":"19299:76:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19340:6:46"},{"name":"value1","nodeType":"YulIdentifier","src":"19348:6:46"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19360:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"19371:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19356:3:46"},"nodeType":"YulFunctionCall","src":"19356:18:46"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"19313:26:46"},"nodeType":"YulFunctionCall","src":"19313:62:46"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"19303:6:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19395:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"19406:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19391:3:46"},"nodeType":"YulFunctionCall","src":"19391:18:46"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"19415:6:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"19423:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19411:3:46"},"nodeType":"YulFunctionCall","src":"19411:22:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19384:6:46"},"nodeType":"YulFunctionCall","src":"19384:50:46"},"nodeType":"YulExpressionStatement","src":"19384:50:46"},{"nodeType":"YulAssignment","src":"19443:58:46","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"19478:6:46"},{"name":"value3","nodeType":"YulIdentifier","src":"19486:6:46"},{"name":"tail_1","nodeType":"YulIdentifier","src":"19494:6:46"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"19451:26:46"},"nodeType":"YulFunctionCall","src":"19451:50:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19443:4:46"}]}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_string_calldata_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19204:9:46","type":""},{"name":"value3","nodeType":"YulTypedName","src":"19215:6:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19223:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19231:6:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19239:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19250:4:46","type":""}],"src":"19070:437:46"},{"body":{"nodeType":"YulBlock","src":"19611:149:46","statements":[{"nodeType":"YulAssignment","src":"19621:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19633:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"19644:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19629:3:46"},"nodeType":"YulFunctionCall","src":"19629:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19621:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19663:9:46"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19678:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"19686:66:46","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19674:3:46"},"nodeType":"YulFunctionCall","src":"19674:79:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19656:6:46"},"nodeType":"YulFunctionCall","src":"19656:98:46"},"nodeType":"YulExpressionStatement","src":"19656:98:46"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19580:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19591:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19602:4:46","type":""}],"src":"19512:248:46"},{"body":{"nodeType":"YulBlock","src":"19797:152:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19814:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19817:77:46","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19807:6:46"},"nodeType":"YulFunctionCall","src":"19807:88:46"},"nodeType":"YulExpressionStatement","src":"19807:88:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19911:1:46","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19914:4:46","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19904:6:46"},"nodeType":"YulFunctionCall","src":"19904:15:46"},"nodeType":"YulExpressionStatement","src":"19904:15:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19935:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19938:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19928:6:46"},"nodeType":"YulFunctionCall","src":"19928:15:46"},"nodeType":"YulExpressionStatement","src":"19928:15:46"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"19765:184:46"},{"body":{"nodeType":"YulBlock","src":"20055:1103:46","statements":[{"body":{"nodeType":"YulBlock","src":"20096:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"20098:16:46"},"nodeType":"YulFunctionCall","src":"20098:18:46"},"nodeType":"YulExpressionStatement","src":"20098:18:46"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"20071:3:46"},{"kind":"number","nodeType":"YulLiteral","src":"20076:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20068:2:46"},"nodeType":"YulFunctionCall","src":"20068:27:46"},"nodeType":"YulIf","src":"20065:53:46"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"20171:4:46"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"20209:4:46"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"20203:5:46"},"nodeType":"YulFunctionCall","src":"20203:11:46"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"20177:25:46"},"nodeType":"YulFunctionCall","src":"20177:38:46"},{"name":"len","nodeType":"YulIdentifier","src":"20217:3:46"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"20127:43:46"},"nodeType":"YulFunctionCall","src":"20127:94:46"},"nodeType":"YulExpressionStatement","src":"20127:94:46"},{"nodeType":"YulVariableDeclaration","src":"20230:18:46","value":{"kind":"number","nodeType":"YulLiteral","src":"20247:1:46","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"20234:9:46","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"20291:609:46","statements":[{"nodeType":"YulVariableDeclaration","src":"20305:32:46","value":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"20324:3:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20333:2:46","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20329:3:46"},"nodeType":"YulFunctionCall","src":"20329:7:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20320:3:46"},"nodeType":"YulFunctionCall","src":"20320:17:46"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"20309:7:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20350:49:46","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"20394:4:46"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"20364:29:46"},"nodeType":"YulFunctionCall","src":"20364:35:46"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"20354:6:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20412:18:46","value":{"name":"srcOffset","nodeType":"YulIdentifier","src":"20421:9:46"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"20416:1:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"20500:172:46","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"20525:6:46"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"20550:3:46"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"20555:9:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20546:3:46"},"nodeType":"YulFunctionCall","src":"20546:19:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20533:12:46"},"nodeType":"YulFunctionCall","src":"20533:33:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"20518:6:46"},"nodeType":"YulFunctionCall","src":"20518:49:46"},"nodeType":"YulExpressionStatement","src":"20518:49:46"},{"nodeType":"YulAssignment","src":"20584:24:46","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"20598:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"20606:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20594:3:46"},"nodeType":"YulFunctionCall","src":"20594:14:46"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"20584:6:46"}]},{"nodeType":"YulAssignment","src":"20625:33:46","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"20642:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"20653:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20638:3:46"},"nodeType":"YulFunctionCall","src":"20638:20:46"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"20625:9:46"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"20454:1:46"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"20457:7:46"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"20451:2:46"},"nodeType":"YulFunctionCall","src":"20451:14:46"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"20466:21:46","statements":[{"nodeType":"YulAssignment","src":"20468:17:46","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"20477:1:46"},{"kind":"number","nodeType":"YulLiteral","src":"20480:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20473:3:46"},"nodeType":"YulFunctionCall","src":"20473:12:46"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"20468:1:46"}]}]},"pre":{"nodeType":"YulBlock","src":"20447:3:46","statements":[]},"src":"20443:229:46"},{"body":{"nodeType":"YulBlock","src":"20717:127:46","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"20742:6:46"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"20771:3:46"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"20776:9:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20767:3:46"},"nodeType":"YulFunctionCall","src":"20767:19:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20754:12:46"},"nodeType":"YulFunctionCall","src":"20754:33:46"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20805:1:46","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"20808:3:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20801:3:46"},"nodeType":"YulFunctionCall","src":"20801:11:46"},{"kind":"number","nodeType":"YulLiteral","src":"20814:3:46","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20797:3:46"},"nodeType":"YulFunctionCall","src":"20797:21:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20824:1:46","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20820:3:46"},"nodeType":"YulFunctionCall","src":"20820:6:46"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"20793:3:46"},"nodeType":"YulFunctionCall","src":"20793:34:46"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20789:3:46"},"nodeType":"YulFunctionCall","src":"20789:39:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20750:3:46"},"nodeType":"YulFunctionCall","src":"20750:79:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"20735:6:46"},"nodeType":"YulFunctionCall","src":"20735:95:46"},"nodeType":"YulExpressionStatement","src":"20735:95:46"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"20691:7:46"},{"name":"len","nodeType":"YulIdentifier","src":"20700:3:46"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"20688:2:46"},"nodeType":"YulFunctionCall","src":"20688:16:46"},"nodeType":"YulIf","src":"20685:159:46"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"20864:4:46"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20878:1:46","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"20881:3:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20874:3:46"},"nodeType":"YulFunctionCall","src":"20874:11:46"},{"kind":"number","nodeType":"YulLiteral","src":"20887:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20870:3:46"},"nodeType":"YulFunctionCall","src":"20870:19:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"20857:6:46"},"nodeType":"YulFunctionCall","src":"20857:33:46"},"nodeType":"YulExpressionStatement","src":"20857:33:46"}]},"nodeType":"YulCase","src":"20284:616:46","value":{"kind":"number","nodeType":"YulLiteral","src":"20289:1:46","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"20917:235:46","statements":[{"nodeType":"YulVariableDeclaration","src":"20931:14:46","value":{"kind":"number","nodeType":"YulLiteral","src":"20944:1:46","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"20935:5:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"20977:74:46","statements":[{"nodeType":"YulAssignment","src":"20995:42:46","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"21021:3:46"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"21026:9:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21017:3:46"},"nodeType":"YulFunctionCall","src":"21017:19:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"21004:12:46"},"nodeType":"YulFunctionCall","src":"21004:33:46"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"20995:5:46"}]}]},"condition":{"name":"len","nodeType":"YulIdentifier","src":"20961:3:46"},"nodeType":"YulIf","src":"20958:93:46"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"21071:4:46"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21130:5:46"},{"name":"len","nodeType":"YulIdentifier","src":"21137:3:46"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"21077:52:46"},"nodeType":"YulFunctionCall","src":"21077:64:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"21064:6:46"},"nodeType":"YulFunctionCall","src":"21064:78:46"},"nodeType":"YulExpressionStatement","src":"21064:78:46"}]},"nodeType":"YulCase","src":"20909:243:46","value":"default"}],"expression":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"20267:3:46"},{"kind":"number","nodeType":"YulLiteral","src":"20272:2:46","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20264:2:46"},"nodeType":"YulFunctionCall","src":"20264:11:46"},"nodeType":"YulSwitch","src":"20257:895:46"}]},"name":"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"20035:4:46","type":""},{"name":"src","nodeType":"YulTypedName","src":"20041:3:46","type":""},{"name":"len","nodeType":"YulTypedName","src":"20046:3:46","type":""}],"src":"19954:1204:46"},{"body":{"nodeType":"YulBlock","src":"21292:116:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21309:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"21320:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21302:6:46"},"nodeType":"YulFunctionCall","src":"21302:21:46"},"nodeType":"YulExpressionStatement","src":"21302:21:46"},{"nodeType":"YulAssignment","src":"21332:70:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21367:6:46"},{"name":"value1","nodeType":"YulIdentifier","src":"21375:6:46"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21387:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"21398:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21383:3:46"},"nodeType":"YulFunctionCall","src":"21383:18:46"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"21340:26:46"},"nodeType":"YulFunctionCall","src":"21340:62:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21332:4:46"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21253:9:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21264:6:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21272:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21283:4:46","type":""}],"src":"21163:245:46"},{"body":{"nodeType":"YulBlock","src":"21459:163:46","statements":[{"nodeType":"YulVariableDeclaration","src":"21469:28:46","value":{"kind":"number","nodeType":"YulLiteral","src":"21479:18:46","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21473:2:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21506:29:46","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21525:5:46"},{"name":"_1","nodeType":"YulIdentifier","src":"21532:2:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21521:3:46"},"nodeType":"YulFunctionCall","src":"21521:14:46"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"21510:7:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"21563:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21565:16:46"},"nodeType":"YulFunctionCall","src":"21565:18:46"},"nodeType":"YulExpressionStatement","src":"21565:18:46"}]},"condition":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"21550:7:46"},{"name":"_1","nodeType":"YulIdentifier","src":"21559:2:46"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"21547:2:46"},"nodeType":"YulFunctionCall","src":"21547:15:46"},"nodeType":"YulIf","src":"21544:41:46"},{"nodeType":"YulAssignment","src":"21594:22:46","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"21605:7:46"},{"kind":"number","nodeType":"YulLiteral","src":"21614:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21601:3:46"},"nodeType":"YulFunctionCall","src":"21601:15:46"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"21594:3:46"}]}]},"name":"increment_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21441:5:46","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"21451:3:46","type":""}],"src":"21413:209:46"},{"body":{"nodeType":"YulBlock","src":"21801:234:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21818:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"21829:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21811:6:46"},"nodeType":"YulFunctionCall","src":"21811:21:46"},"nodeType":"YulExpressionStatement","src":"21811:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21852:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"21863:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21848:3:46"},"nodeType":"YulFunctionCall","src":"21848:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"21868:2:46","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21841:6:46"},"nodeType":"YulFunctionCall","src":"21841:30:46"},"nodeType":"YulExpressionStatement","src":"21841:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21891:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"21902:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21887:3:46"},"nodeType":"YulFunctionCall","src":"21887:18:46"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"21907:34:46","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21880:6:46"},"nodeType":"YulFunctionCall","src":"21880:62:46"},"nodeType":"YulExpressionStatement","src":"21880:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21962:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"21973:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21958:3:46"},"nodeType":"YulFunctionCall","src":"21958:18:46"},{"hexValue":"64656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"21978:14:46","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21951:6:46"},"nodeType":"YulFunctionCall","src":"21951:42:46"},"nodeType":"YulExpressionStatement","src":"21951:42:46"},{"nodeType":"YulAssignment","src":"22002:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22014:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22025:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22010:3:46"},"nodeType":"YulFunctionCall","src":"22010:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22002:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21778:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21792:4:46","type":""}],"src":"21627:408:46"},{"body":{"nodeType":"YulBlock","src":"22214:234:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22231:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22242:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22224:6:46"},"nodeType":"YulFunctionCall","src":"22224:21:46"},"nodeType":"YulExpressionStatement","src":"22224:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22265:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22276:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22261:3:46"},"nodeType":"YulFunctionCall","src":"22261:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"22281:2:46","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22254:6:46"},"nodeType":"YulFunctionCall","src":"22254:30:46"},"nodeType":"YulExpressionStatement","src":"22254:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22304:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22315:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22300:3:46"},"nodeType":"YulFunctionCall","src":"22300:18:46"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"22320:34:46","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22293:6:46"},"nodeType":"YulFunctionCall","src":"22293:62:46"},"nodeType":"YulExpressionStatement","src":"22293:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22375:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22386:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22371:3:46"},"nodeType":"YulFunctionCall","src":"22371:18:46"},{"hexValue":"6163746976652070726f7879","kind":"string","nodeType":"YulLiteral","src":"22391:14:46","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22364:6:46"},"nodeType":"YulFunctionCall","src":"22364:42:46"},"nodeType":"YulExpressionStatement","src":"22364:42:46"},{"nodeType":"YulAssignment","src":"22415:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22427:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22438:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22423:3:46"},"nodeType":"YulFunctionCall","src":"22423:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22415:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22191:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22205:4:46","type":""}],"src":"22040:408:46"},{"body":{"nodeType":"YulBlock","src":"22627:246:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22644:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22655:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22637:6:46"},"nodeType":"YulFunctionCall","src":"22637:21:46"},"nodeType":"YulExpressionStatement","src":"22637:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22678:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22689:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22674:3:46"},"nodeType":"YulFunctionCall","src":"22674:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"22694:2:46","type":"","value":"56"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22667:6:46"},"nodeType":"YulFunctionCall","src":"22667:30:46"},"nodeType":"YulExpressionStatement","src":"22667:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22717:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22728:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22713:3:46"},"nodeType":"YulFunctionCall","src":"22713:18:46"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nodeType":"YulLiteral","src":"22733:34:46","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22706:6:46"},"nodeType":"YulFunctionCall","src":"22706:62:46"},"nodeType":"YulExpressionStatement","src":"22706:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22788:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22799:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22784:3:46"},"nodeType":"YulFunctionCall","src":"22784:18:46"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"22804:26:46","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22777:6:46"},"nodeType":"YulFunctionCall","src":"22777:54:46"},"nodeType":"YulExpressionStatement","src":"22777:54:46"},{"nodeType":"YulAssignment","src":"22840:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22852:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"22863:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22848:3:46"},"nodeType":"YulFunctionCall","src":"22848:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22840:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22604:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22618:4:46","type":""}],"src":"22453:420:46"},{"body":{"nodeType":"YulBlock","src":"23009:116:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23026:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"23037:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23019:6:46"},"nodeType":"YulFunctionCall","src":"23019:21:46"},"nodeType":"YulExpressionStatement","src":"23019:21:46"},{"nodeType":"YulAssignment","src":"23049:70:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23084:6:46"},{"name":"value1","nodeType":"YulIdentifier","src":"23092:6:46"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23104:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"23115:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23100:3:46"},"nodeType":"YulFunctionCall","src":"23100:18:46"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"23057:26:46"},"nodeType":"YulFunctionCall","src":"23057:62:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23049:4:46"}]}]},"name":"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22970:9:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22981:6:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22989:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23000:4:46","type":""}],"src":"22878:247:46"},{"body":{"nodeType":"YulBlock","src":"23239:125:46","statements":[{"nodeType":"YulAssignment","src":"23249:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23261:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"23272:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23257:3:46"},"nodeType":"YulFunctionCall","src":"23257:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23249:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23291:9:46"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23306:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"23314:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23302:3:46"},"nodeType":"YulFunctionCall","src":"23302:55:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23284:6:46"},"nodeType":"YulFunctionCall","src":"23284:74:46"},"nodeType":"YulExpressionStatement","src":"23284:74:46"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23208:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23219:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23230:4:46","type":""}],"src":"23130:234:46"},{"body":{"nodeType":"YulBlock","src":"23463:1256:46","statements":[{"nodeType":"YulVariableDeclaration","src":"23473:24:46","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23493:3:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23487:5:46"},"nodeType":"YulFunctionCall","src":"23487:10:46"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"23477:6:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"23540:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"23542:16:46"},"nodeType":"YulFunctionCall","src":"23542:18:46"},"nodeType":"YulExpressionStatement","src":"23542:18:46"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23512:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"23520:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23509:2:46"},"nodeType":"YulFunctionCall","src":"23509:30:46"},"nodeType":"YulIf","src":"23506:56:46"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23615:4:46"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23653:4:46"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"23647:5:46"},"nodeType":"YulFunctionCall","src":"23647:11:46"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"23621:25:46"},"nodeType":"YulFunctionCall","src":"23621:38:46"},{"name":"newLen","nodeType":"YulIdentifier","src":"23661:6:46"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"23571:43:46"},"nodeType":"YulFunctionCall","src":"23571:97:46"},"nodeType":"YulExpressionStatement","src":"23571:97:46"},{"nodeType":"YulVariableDeclaration","src":"23677:18:46","value":{"kind":"number","nodeType":"YulLiteral","src":"23694:1:46","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"23681:9:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23704:23:46","value":{"kind":"number","nodeType":"YulLiteral","src":"23723:4:46","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"23708:11:46","type":""}]},{"nodeType":"YulAssignment","src":"23736:24:46","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"23749:11:46"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"23736:9:46"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"23806:656:46","statements":[{"nodeType":"YulVariableDeclaration","src":"23820:35:46","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23839:6:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23851:2:46","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"23847:3:46"},"nodeType":"YulFunctionCall","src":"23847:7:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23835:3:46"},"nodeType":"YulFunctionCall","src":"23835:20:46"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"23824:7:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23868:49:46","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23912:4:46"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"23882:29:46"},"nodeType":"YulFunctionCall","src":"23882:35:46"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"23872:6:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23930:10:46","value":{"kind":"number","nodeType":"YulLiteral","src":"23939:1:46","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"23934:1:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"24017:172:46","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"24042:6:46"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24060:3:46"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"24065:9:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24056:3:46"},"nodeType":"YulFunctionCall","src":"24056:19:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24050:5:46"},"nodeType":"YulFunctionCall","src":"24050:26:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24035:6:46"},"nodeType":"YulFunctionCall","src":"24035:42:46"},"nodeType":"YulExpressionStatement","src":"24035:42:46"},{"nodeType":"YulAssignment","src":"24094:24:46","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"24108:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"24116:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24104:3:46"},"nodeType":"YulFunctionCall","src":"24104:14:46"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"24094:6:46"}]},{"nodeType":"YulAssignment","src":"24135:40:46","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"24152:9:46"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"24163:11:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24148:3:46"},"nodeType":"YulFunctionCall","src":"24148:27:46"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"24135:9:46"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23964:1:46"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"23967:7:46"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23961:2:46"},"nodeType":"YulFunctionCall","src":"23961:14:46"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"23976:28:46","statements":[{"nodeType":"YulAssignment","src":"23978:24:46","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23987:1:46"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"23990:11:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23983:3:46"},"nodeType":"YulFunctionCall","src":"23983:19:46"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"23978:1:46"}]}]},"pre":{"nodeType":"YulBlock","src":"23957:3:46","statements":[]},"src":"23953:236:46"},{"body":{"nodeType":"YulBlock","src":"24237:166:46","statements":[{"nodeType":"YulVariableDeclaration","src":"24255:43:46","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24282:3:46"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"24287:9:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24278:3:46"},"nodeType":"YulFunctionCall","src":"24278:19:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24272:5:46"},"nodeType":"YulFunctionCall","src":"24272:26:46"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"24259:9:46","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"24322:6:46"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"24334:9:46"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24361:1:46","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"24364:6:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24357:3:46"},"nodeType":"YulFunctionCall","src":"24357:14:46"},{"kind":"number","nodeType":"YulLiteral","src":"24373:3:46","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24353:3:46"},"nodeType":"YulFunctionCall","src":"24353:24:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24383:1:46","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24379:3:46"},"nodeType":"YulFunctionCall","src":"24379:6:46"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"24349:3:46"},"nodeType":"YulFunctionCall","src":"24349:37:46"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24345:3:46"},"nodeType":"YulFunctionCall","src":"24345:42:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24330:3:46"},"nodeType":"YulFunctionCall","src":"24330:58:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24315:6:46"},"nodeType":"YulFunctionCall","src":"24315:74:46"},"nodeType":"YulExpressionStatement","src":"24315:74:46"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"24208:7:46"},{"name":"newLen","nodeType":"YulIdentifier","src":"24217:6:46"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24205:2:46"},"nodeType":"YulFunctionCall","src":"24205:19:46"},"nodeType":"YulIf","src":"24202:201:46"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24423:4:46"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24437:1:46","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"24440:6:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24433:3:46"},"nodeType":"YulFunctionCall","src":"24433:14:46"},{"kind":"number","nodeType":"YulLiteral","src":"24449:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24429:3:46"},"nodeType":"YulFunctionCall","src":"24429:22:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24416:6:46"},"nodeType":"YulFunctionCall","src":"24416:36:46"},"nodeType":"YulExpressionStatement","src":"24416:36:46"}]},"nodeType":"YulCase","src":"23799:663:46","value":{"kind":"number","nodeType":"YulLiteral","src":"23804:1:46","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"24479:234:46","statements":[{"nodeType":"YulVariableDeclaration","src":"24493:14:46","value":{"kind":"number","nodeType":"YulLiteral","src":"24506:1:46","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"24497:5:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"24542:67:46","statements":[{"nodeType":"YulAssignment","src":"24560:35:46","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24579:3:46"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"24584:9:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24575:3:46"},"nodeType":"YulFunctionCall","src":"24575:19:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24569:5:46"},"nodeType":"YulFunctionCall","src":"24569:26:46"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24560:5:46"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"24523:6:46"},"nodeType":"YulIf","src":"24520:89:46"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24629:4:46"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24688:5:46"},{"name":"newLen","nodeType":"YulIdentifier","src":"24695:6:46"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"24635:52:46"},"nodeType":"YulFunctionCall","src":"24635:67:46"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24622:6:46"},"nodeType":"YulFunctionCall","src":"24622:81:46"},"nodeType":"YulExpressionStatement","src":"24622:81:46"}]},"nodeType":"YulCase","src":"24471:242:46","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23779:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"23787:2:46","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23776:2:46"},"nodeType":"YulFunctionCall","src":"23776:14:46"},"nodeType":"YulSwitch","src":"23769:944:46"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"23448:4:46","type":""},{"name":"src","nodeType":"YulTypedName","src":"23454:3:46","type":""}],"src":"23369:1350:46"},{"body":{"nodeType":"YulBlock","src":"24898:231:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24915:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"24926:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24908:6:46"},"nodeType":"YulFunctionCall","src":"24908:21:46"},"nodeType":"YulExpressionStatement","src":"24908:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24949:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"24960:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24945:3:46"},"nodeType":"YulFunctionCall","src":"24945:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"24965:2:46","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24938:6:46"},"nodeType":"YulFunctionCall","src":"24938:30:46"},"nodeType":"YulExpressionStatement","src":"24938:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24988:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"24999:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24984:3:46"},"nodeType":"YulFunctionCall","src":"24984:18:46"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"25004:34:46","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24977:6:46"},"nodeType":"YulFunctionCall","src":"24977:62:46"},"nodeType":"YulExpressionStatement","src":"24977:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25059:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"25070:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25055:3:46"},"nodeType":"YulFunctionCall","src":"25055:18:46"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"25075:11:46","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25048:6:46"},"nodeType":"YulFunctionCall","src":"25048:39:46"},"nodeType":"YulExpressionStatement","src":"25048:39:46"},{"nodeType":"YulAssignment","src":"25096:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25108:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"25119:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25104:3:46"},"nodeType":"YulFunctionCall","src":"25104:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25096:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24875:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24889:4:46","type":""}],"src":"24724:405:46"},{"body":{"nodeType":"YulBlock","src":"25308:182:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25325:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"25336:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25318:6:46"},"nodeType":"YulFunctionCall","src":"25318:21:46"},"nodeType":"YulExpressionStatement","src":"25318:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25359:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"25370:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25355:3:46"},"nodeType":"YulFunctionCall","src":"25355:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"25375:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25348:6:46"},"nodeType":"YulFunctionCall","src":"25348:30:46"},"nodeType":"YulExpressionStatement","src":"25348:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25398:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"25409:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25394:3:46"},"nodeType":"YulFunctionCall","src":"25394:18:46"},{"hexValue":"53657474696e672064656c65676174652073746174757320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"25414:34:46","type":"","value":"Setting delegate status for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25387:6:46"},"nodeType":"YulFunctionCall","src":"25387:62:46"},"nodeType":"YulExpressionStatement","src":"25387:62:46"},{"nodeType":"YulAssignment","src":"25458:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25470:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"25481:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25466:3:46"},"nodeType":"YulFunctionCall","src":"25466:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25458:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb190b006810059edc9ead724b9a58ef6d76fdad1e4f0c7d2965b67f98b3914a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25285:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25299:4:46","type":""}],"src":"25134:356:46"},{"body":{"nodeType":"YulBlock","src":"25670:230:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25687:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"25698:2:46","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25680:6:46"},"nodeType":"YulFunctionCall","src":"25680:21:46"},"nodeType":"YulExpressionStatement","src":"25680:21:46"},{"nodeType":"YulVariableDeclaration","src":"25710:58:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25741:6:46"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25753:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"25764:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25749:3:46"},"nodeType":"YulFunctionCall","src":"25749:18:46"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"25724:16:46"},"nodeType":"YulFunctionCall","src":"25724:44:46"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"25714:6:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25788:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"25799:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25784:3:46"},"nodeType":"YulFunctionCall","src":"25784:18:46"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"25808:6:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"25816:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25804:3:46"},"nodeType":"YulFunctionCall","src":"25804:22:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25777:6:46"},"nodeType":"YulFunctionCall","src":"25777:50:46"},"nodeType":"YulExpressionStatement","src":"25777:50:46"},{"nodeType":"YulAssignment","src":"25836:58:46","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25871:6:46"},{"name":"value2","nodeType":"YulIdentifier","src":"25879:6:46"},{"name":"tail_1","nodeType":"YulIdentifier","src":"25887:6:46"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"25844:26:46"},"nodeType":"YulFunctionCall","src":"25844:50:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25836:4:46"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25623:9:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"25634:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25642:6:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25650:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25661:4:46","type":""}],"src":"25495:405:46"},{"body":{"nodeType":"YulBlock","src":"26079:228:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26096:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"26107:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26089:6:46"},"nodeType":"YulFunctionCall","src":"26089:21:46"},"nodeType":"YulExpressionStatement","src":"26089:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26130:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"26141:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26126:3:46"},"nodeType":"YulFunctionCall","src":"26126:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"26146:2:46","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26119:6:46"},"nodeType":"YulFunctionCall","src":"26119:30:46"},"nodeType":"YulExpressionStatement","src":"26119:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26169:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"26180:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26165:3:46"},"nodeType":"YulFunctionCall","src":"26165:18:46"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"26185:34:46","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26158:6:46"},"nodeType":"YulFunctionCall","src":"26158:62:46"},"nodeType":"YulExpressionStatement","src":"26158:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26240:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"26251:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26236:3:46"},"nodeType":"YulFunctionCall","src":"26236:18:46"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"26256:8:46","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26229:6:46"},"nodeType":"YulFunctionCall","src":"26229:36:46"},"nodeType":"YulExpressionStatement","src":"26229:36:46"},{"nodeType":"YulAssignment","src":"26274:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26286:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"26297:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26282:3:46"},"nodeType":"YulFunctionCall","src":"26282:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26274:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26056:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26070:4:46","type":""}],"src":"25905:402:46"},{"body":{"nodeType":"YulBlock","src":"26486:236:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26503:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"26514:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26496:6:46"},"nodeType":"YulFunctionCall","src":"26496:21:46"},"nodeType":"YulExpressionStatement","src":"26496:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26537:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"26548:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26533:3:46"},"nodeType":"YulFunctionCall","src":"26533:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"26553:2:46","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26526:6:46"},"nodeType":"YulFunctionCall","src":"26526:30:46"},"nodeType":"YulExpressionStatement","src":"26526:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26576:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"26587:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26572:3:46"},"nodeType":"YulFunctionCall","src":"26572:18:46"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"26592:34:46","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26565:6:46"},"nodeType":"YulFunctionCall","src":"26565:62:46"},"nodeType":"YulExpressionStatement","src":"26565:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26647:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"26658:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26643:3:46"},"nodeType":"YulFunctionCall","src":"26643:18:46"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"26663:16:46","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26636:6:46"},"nodeType":"YulFunctionCall","src":"26636:44:46"},"nodeType":"YulExpressionStatement","src":"26636:44:46"},{"nodeType":"YulAssignment","src":"26689:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26701:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"26712:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26697:3:46"},"nodeType":"YulFunctionCall","src":"26697:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26689:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26463:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26477:4:46","type":""}],"src":"26312:410:46"},{"body":{"nodeType":"YulBlock","src":"26808:170:46","statements":[{"body":{"nodeType":"YulBlock","src":"26854:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26863:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26866:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26856:6:46"},"nodeType":"YulFunctionCall","src":"26856:12:46"},"nodeType":"YulExpressionStatement","src":"26856:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"26829:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"26838:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26825:3:46"},"nodeType":"YulFunctionCall","src":"26825:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"26850:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"26821:3:46"},"nodeType":"YulFunctionCall","src":"26821:32:46"},"nodeType":"YulIf","src":"26818:52:46"},{"nodeType":"YulVariableDeclaration","src":"26879:29:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26898:9:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26892:5:46"},"nodeType":"YulFunctionCall","src":"26892:16:46"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"26883:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26942:5:46"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"26917:24:46"},"nodeType":"YulFunctionCall","src":"26917:31:46"},"nodeType":"YulExpressionStatement","src":"26917:31:46"},{"nodeType":"YulAssignment","src":"26957:15:46","value":{"name":"value","nodeType":"YulIdentifier","src":"26967:5:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"26957:6:46"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26774:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"26785:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"26797:6:46","type":""}],"src":"26727:251:46"},{"body":{"nodeType":"YulBlock","src":"27064:103:46","statements":[{"body":{"nodeType":"YulBlock","src":"27110:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27119:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27122:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27112:6:46"},"nodeType":"YulFunctionCall","src":"27112:12:46"},"nodeType":"YulExpressionStatement","src":"27112:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"27085:7:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"27094:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27081:3:46"},"nodeType":"YulFunctionCall","src":"27081:23:46"},{"kind":"number","nodeType":"YulLiteral","src":"27106:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27077:3:46"},"nodeType":"YulFunctionCall","src":"27077:32:46"},"nodeType":"YulIf","src":"27074:52:46"},{"nodeType":"YulAssignment","src":"27135:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27151:9:46"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27145:5:46"},"nodeType":"YulFunctionCall","src":"27145:16:46"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"27135:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27030:9:46","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"27041:7:46","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"27053:6:46","type":""}],"src":"26983:184:46"},{"body":{"nodeType":"YulBlock","src":"27279:87:46","statements":[{"nodeType":"YulAssignment","src":"27289:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27301:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"27312:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27297:3:46"},"nodeType":"YulFunctionCall","src":"27297:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27289:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27331:9:46"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27346:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"27354:4:46","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27342:3:46"},"nodeType":"YulFunctionCall","src":"27342:17:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27324:6:46"},"nodeType":"YulFunctionCall","src":"27324:36:46"},"nodeType":"YulExpressionStatement","src":"27324:36:46"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27248:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27259:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27270:4:46","type":""}],"src":"27172:194:46"},{"body":{"nodeType":"YulBlock","src":"27472:76:46","statements":[{"nodeType":"YulAssignment","src":"27482:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27494:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"27505:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27490:3:46"},"nodeType":"YulFunctionCall","src":"27490:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27482:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27524:9:46"},{"name":"value0","nodeType":"YulIdentifier","src":"27535:6:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27517:6:46"},"nodeType":"YulFunctionCall","src":"27517:25:46"},"nodeType":"YulExpressionStatement","src":"27517:25:46"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27441:9:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27452:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27463:4:46","type":""}],"src":"27371:177:46"},{"body":{"nodeType":"YulBlock","src":"27599:135:46","statements":[{"nodeType":"YulVariableDeclaration","src":"27609:33:46","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27628:5:46"},{"kind":"number","nodeType":"YulLiteral","src":"27635:6:46","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27624:3:46"},"nodeType":"YulFunctionCall","src":"27624:18:46"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"27613:7:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"27670:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"27672:16:46"},"nodeType":"YulFunctionCall","src":"27672:18:46"},"nodeType":"YulExpressionStatement","src":"27672:18:46"}]},"condition":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"27661:7:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27654:6:46"},"nodeType":"YulFunctionCall","src":"27654:15:46"},"nodeType":"YulIf","src":"27651:41:46"},{"nodeType":"YulAssignment","src":"27701:27:46","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"27712:7:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27725:1:46","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27721:3:46"},"nodeType":"YulFunctionCall","src":"27721:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27708:3:46"},"nodeType":"YulFunctionCall","src":"27708:20:46"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"27701:3:46"}]}]},"name":"decrement_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27581:5:46","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"27591:3:46","type":""}],"src":"27553:181:46"},{"body":{"nodeType":"YulBlock","src":"27884:154:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27901:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"27912:2:46","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27894:6:46"},"nodeType":"YulFunctionCall","src":"27894:21:46"},"nodeType":"YulExpressionStatement","src":"27894:21:46"},{"nodeType":"YulAssignment","src":"27924:52:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27949:6:46"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27961:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"27972:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27957:3:46"},"nodeType":"YulFunctionCall","src":"27957:18:46"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"27932:16:46"},"nodeType":"YulFunctionCall","src":"27932:44:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27924:4:46"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27996:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"28007:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27992:3:46"},"nodeType":"YulFunctionCall","src":"27992:18:46"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28016:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"28024:6:46","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28012:3:46"},"nodeType":"YulFunctionCall","src":"28012:19:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27985:6:46"},"nodeType":"YulFunctionCall","src":"27985:47:46"},"nodeType":"YulExpressionStatement","src":"27985:47:46"}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_uint16__to_t_bytes_memory_ptr_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27845:9:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27856:6:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27864:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27875:4:46","type":""}],"src":"27739:299:46"},{"body":{"nodeType":"YulBlock","src":"28089:151:46","statements":[{"nodeType":"YulVariableDeclaration","src":"28099:16:46","value":{"kind":"number","nodeType":"YulLiteral","src":"28109:6:46","type":"","value":"0xffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"28103:2:46","type":""}]},{"nodeType":"YulVariableDeclaration","src":"28124:29:46","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28143:5:46"},{"name":"_1","nodeType":"YulIdentifier","src":"28150:2:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28139:3:46"},"nodeType":"YulFunctionCall","src":"28139:14:46"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"28128:7:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"28181:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28183:16:46"},"nodeType":"YulFunctionCall","src":"28183:18:46"},"nodeType":"YulExpressionStatement","src":"28183:18:46"}]},"condition":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"28168:7:46"},{"name":"_1","nodeType":"YulIdentifier","src":"28177:2:46"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28165:2:46"},"nodeType":"YulFunctionCall","src":"28165:15:46"},"nodeType":"YulIf","src":"28162:41:46"},{"nodeType":"YulAssignment","src":"28212:22:46","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"28223:7:46"},{"kind":"number","nodeType":"YulLiteral","src":"28232:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28219:3:46"},"nodeType":"YulFunctionCall","src":"28219:15:46"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"28212:3:46"}]}]},"name":"increment_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28071:5:46","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28081:3:46","type":""}],"src":"28043:197:46"},{"body":{"nodeType":"YulBlock","src":"28436:268:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28453:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"28464:2:46","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28446:6:46"},"nodeType":"YulFunctionCall","src":"28446:21:46"},"nodeType":"YulExpressionStatement","src":"28446:21:46"},{"nodeType":"YulVariableDeclaration","src":"28476:58:46","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28507:6:46"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28519:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"28530:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28515:3:46"},"nodeType":"YulFunctionCall","src":"28515:18:46"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"28490:16:46"},"nodeType":"YulFunctionCall","src":"28490:44:46"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"28480:6:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28554:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"28565:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28550:3:46"},"nodeType":"YulFunctionCall","src":"28550:18:46"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28574:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"28582:6:46","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28570:3:46"},"nodeType":"YulFunctionCall","src":"28570:19:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28543:6:46"},"nodeType":"YulFunctionCall","src":"28543:47:46"},"nodeType":"YulExpressionStatement","src":"28543:47:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28610:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"28621:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28606:3:46"},"nodeType":"YulFunctionCall","src":"28606:18:46"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"28630:6:46"},{"name":"headStart","nodeType":"YulIdentifier","src":"28638:9:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28626:3:46"},"nodeType":"YulFunctionCall","src":"28626:22:46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28599:6:46"},"nodeType":"YulFunctionCall","src":"28599:50:46"},"nodeType":"YulExpressionStatement","src":"28599:50:46"},{"nodeType":"YulAssignment","src":"28658:40:46","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"28683:6:46"},{"name":"tail_1","nodeType":"YulIdentifier","src":"28691:6:46"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"28666:16:46"},"nodeType":"YulFunctionCall","src":"28666:32:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28658:4:46"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_uint16_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_uint16_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28389:9:46","type":""},{"name":"value2","nodeType":"YulTypedName","src":"28400:6:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28408:6:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28416:6:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28427:4:46","type":""}],"src":"28245:459:46"},{"body":{"nodeType":"YulBlock","src":"28757:77:46","statements":[{"nodeType":"YulAssignment","src":"28767:16:46","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28778:1:46"},{"name":"y","nodeType":"YulIdentifier","src":"28781:1:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28774:3:46"},"nodeType":"YulFunctionCall","src":"28774:9:46"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"28767:3:46"}]},{"body":{"nodeType":"YulBlock","src":"28806:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28808:16:46"},"nodeType":"YulFunctionCall","src":"28808:18:46"},"nodeType":"YulExpressionStatement","src":"28808:18:46"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28798:1:46"},{"name":"sum","nodeType":"YulIdentifier","src":"28801:3:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28795:2:46"},"nodeType":"YulFunctionCall","src":"28795:10:46"},"nodeType":"YulIf","src":"28792:36:46"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"28740:1:46","type":""},{"name":"y","nodeType":"YulTypedName","src":"28743:1:46","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"28749:3:46","type":""}],"src":"28709:125:46"},{"body":{"nodeType":"YulBlock","src":"29013:236:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29030:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29041:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29023:6:46"},"nodeType":"YulFunctionCall","src":"29023:21:46"},"nodeType":"YulExpressionStatement","src":"29023:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29064:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29075:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29060:3:46"},"nodeType":"YulFunctionCall","src":"29060:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"29080:2:46","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29053:6:46"},"nodeType":"YulFunctionCall","src":"29053:30:46"},"nodeType":"YulExpressionStatement","src":"29053:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29103:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29114:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29099:3:46"},"nodeType":"YulFunctionCall","src":"29099:18:46"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nodeType":"YulLiteral","src":"29119:34:46","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29092:6:46"},"nodeType":"YulFunctionCall","src":"29092:62:46"},"nodeType":"YulExpressionStatement","src":"29092:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29174:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29185:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29170:3:46"},"nodeType":"YulFunctionCall","src":"29170:18:46"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nodeType":"YulLiteral","src":"29190:16:46","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29163:6:46"},"nodeType":"YulFunctionCall","src":"29163:44:46"},"nodeType":"YulExpressionStatement","src":"29163:44:46"},{"nodeType":"YulAssignment","src":"29216:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29228:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29239:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29224:3:46"},"nodeType":"YulFunctionCall","src":"29224:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29216:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28990:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29004:4:46","type":""}],"src":"28839:410:46"},{"body":{"nodeType":"YulBlock","src":"29428:231:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29445:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29456:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29438:6:46"},"nodeType":"YulFunctionCall","src":"29438:21:46"},"nodeType":"YulExpressionStatement","src":"29438:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29479:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29490:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29475:3:46"},"nodeType":"YulFunctionCall","src":"29475:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"29495:2:46","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29468:6:46"},"nodeType":"YulFunctionCall","src":"29468:30:46"},"nodeType":"YulExpressionStatement","src":"29468:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29518:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29529:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29514:3:46"},"nodeType":"YulFunctionCall","src":"29514:18:46"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nodeType":"YulLiteral","src":"29534:34:46","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29507:6:46"},"nodeType":"YulFunctionCall","src":"29507:62:46"},"nodeType":"YulExpressionStatement","src":"29507:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29589:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29600:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29585:3:46"},"nodeType":"YulFunctionCall","src":"29585:18:46"},{"hexValue":"6961626c6555554944","kind":"string","nodeType":"YulLiteral","src":"29605:11:46","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29578:6:46"},"nodeType":"YulFunctionCall","src":"29578:39:46"},"nodeType":"YulExpressionStatement","src":"29578:39:46"},{"nodeType":"YulAssignment","src":"29626:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29638:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29649:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29634:3:46"},"nodeType":"YulFunctionCall","src":"29634:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29626:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29405:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29419:4:46","type":""}],"src":"29254:405:46"},{"body":{"nodeType":"YulBlock","src":"29838:182:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29855:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29866:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29848:6:46"},"nodeType":"YulFunctionCall","src":"29848:21:46"},"nodeType":"YulExpressionStatement","src":"29848:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29889:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29900:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29885:3:46"},"nodeType":"YulFunctionCall","src":"29885:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"29905:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29878:6:46"},"nodeType":"YulFunctionCall","src":"29878:30:46"},"nodeType":"YulExpressionStatement","src":"29878:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29928:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"29939:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29924:3:46"},"nodeType":"YulFunctionCall","src":"29924:18:46"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"29944:34:46","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29917:6:46"},"nodeType":"YulFunctionCall","src":"29917:62:46"},"nodeType":"YulExpressionStatement","src":"29917:62:46"},{"nodeType":"YulAssignment","src":"29988:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30000:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"30011:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29996:3:46"},"nodeType":"YulFunctionCall","src":"29996:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29988:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29815:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29829:4:46","type":""}],"src":"29664:356:46"},{"body":{"nodeType":"YulBlock","src":"30119:427:46","statements":[{"nodeType":"YulVariableDeclaration","src":"30129:51:46","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"30168:11:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"30155:12:46"},"nodeType":"YulFunctionCall","src":"30155:25:46"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"30133:18:46","type":""}]},{"body":{"nodeType":"YulBlock","src":"30269:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30278:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30281:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30271:6:46"},"nodeType":"YulFunctionCall","src":"30271:12:46"},"nodeType":"YulExpressionStatement","src":"30271:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"30203:18:46"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"30231:12:46"},"nodeType":"YulFunctionCall","src":"30231:14:46"},{"name":"base_ref","nodeType":"YulIdentifier","src":"30247:8:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30227:3:46"},"nodeType":"YulFunctionCall","src":"30227:29:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30262:2:46","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"30258:3:46"},"nodeType":"YulFunctionCall","src":"30258:7:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30223:3:46"},"nodeType":"YulFunctionCall","src":"30223:43:46"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"30199:3:46"},"nodeType":"YulFunctionCall","src":"30199:68:46"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30192:6:46"},"nodeType":"YulFunctionCall","src":"30192:76:46"},"nodeType":"YulIf","src":"30189:96:46"},{"nodeType":"YulVariableDeclaration","src":"30294:47:46","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"30312:8:46"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"30322:18:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30308:3:46"},"nodeType":"YulFunctionCall","src":"30308:33:46"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"30298:6:46","type":""}]},{"nodeType":"YulAssignment","src":"30350:30:46","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"30373:6:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"30360:12:46"},"nodeType":"YulFunctionCall","src":"30360:20:46"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"30350:6:46"}]},{"body":{"nodeType":"YulBlock","src":"30423:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30432:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30435:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30425:6:46"},"nodeType":"YulFunctionCall","src":"30425:12:46"},"nodeType":"YulExpressionStatement","src":"30425:12:46"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"30395:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"30403:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"30392:2:46"},"nodeType":"YulFunctionCall","src":"30392:30:46"},"nodeType":"YulIf","src":"30389:50:46"},{"nodeType":"YulAssignment","src":"30448:25:46","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"30460:6:46"},{"kind":"number","nodeType":"YulLiteral","src":"30468:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30456:3:46"},"nodeType":"YulFunctionCall","src":"30456:17:46"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"30448:4:46"}]},{"body":{"nodeType":"YulBlock","src":"30524:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30533:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30536:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30526:6:46"},"nodeType":"YulFunctionCall","src":"30526:12:46"},"nodeType":"YulExpressionStatement","src":"30526:12:46"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"30489:4:46"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"30499:12:46"},"nodeType":"YulFunctionCall","src":"30499:14:46"},{"name":"length","nodeType":"YulIdentifier","src":"30515:6:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30495:3:46"},"nodeType":"YulFunctionCall","src":"30495:27:46"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"30485:3:46"},"nodeType":"YulFunctionCall","src":"30485:38:46"},"nodeType":"YulIf","src":"30482:58:46"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"30076:8:46","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"30086:11:46","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"30102:4:46","type":""},{"name":"length","nodeType":"YulTypedName","src":"30108:6:46","type":""}],"src":"30025:521:46"},{"body":{"nodeType":"YulBlock","src":"30681:201:46","statements":[{"body":{"nodeType":"YulBlock","src":"30719:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30728:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30731:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30721:6:46"},"nodeType":"YulFunctionCall","src":"30721:12:46"},"nodeType":"YulExpressionStatement","src":"30721:12:46"}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"30697:10:46"},{"name":"endIndex","nodeType":"YulIdentifier","src":"30709:8:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"30694:2:46"},"nodeType":"YulFunctionCall","src":"30694:24:46"},"nodeType":"YulIf","src":"30691:44:46"},{"body":{"nodeType":"YulBlock","src":"30768:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30777:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30780:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30770:6:46"},"nodeType":"YulFunctionCall","src":"30770:12:46"},"nodeType":"YulExpressionStatement","src":"30770:12:46"}]},"condition":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"30750:8:46"},{"name":"length","nodeType":"YulIdentifier","src":"30760:6:46"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"30747:2:46"},"nodeType":"YulFunctionCall","src":"30747:20:46"},"nodeType":"YulIf","src":"30744:40:46"},{"nodeType":"YulAssignment","src":"30793:36:46","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"30810:6:46"},{"name":"startIndex","nodeType":"YulIdentifier","src":"30818:10:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30806:3:46"},"nodeType":"YulFunctionCall","src":"30806:23:46"},"variableNames":[{"name":"offsetOut","nodeType":"YulIdentifier","src":"30793:9:46"}]},{"nodeType":"YulAssignment","src":"30838:38:46","value":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"30855:8:46"},{"name":"startIndex","nodeType":"YulIdentifier","src":"30865:10:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30851:3:46"},"nodeType":"YulFunctionCall","src":"30851:25:46"},"variableNames":[{"name":"lengthOut","nodeType":"YulIdentifier","src":"30838:9:46"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"30615:6:46","type":""},{"name":"length","nodeType":"YulTypedName","src":"30623:6:46","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"30631:10:46","type":""},{"name":"endIndex","nodeType":"YulTypedName","src":"30643:8:46","type":""}],"returnVariables":[{"name":"offsetOut","nodeType":"YulTypedName","src":"30656:9:46","type":""},{"name":"lengthOut","nodeType":"YulTypedName","src":"30667:9:46","type":""}],"src":"30551:331:46"},{"body":{"nodeType":"YulBlock","src":"30988:154:46","statements":[{"nodeType":"YulAssignment","src":"30998:28:46","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"31020:5:46"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"31007:12:46"},"nodeType":"YulFunctionCall","src":"31007:19:46"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"30998:5:46"}]},{"body":{"nodeType":"YulBlock","src":"31058:78:46","statements":[{"nodeType":"YulAssignment","src":"31072:54:46","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31085:5:46"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31100:1:46","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31107:2:46","type":"","value":"32"},{"name":"len","nodeType":"YulIdentifier","src":"31111:3:46"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31103:3:46"},"nodeType":"YulFunctionCall","src":"31103:12:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"31096:3:46"},"nodeType":"YulFunctionCall","src":"31096:20:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31122:1:46","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"31118:3:46"},"nodeType":"YulFunctionCall","src":"31118:6:46"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"31092:3:46"},"nodeType":"YulFunctionCall","src":"31092:33:46"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31081:3:46"},"nodeType":"YulFunctionCall","src":"31081:45:46"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"31072:5:46"}]}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"31041:3:46"},{"kind":"number","nodeType":"YulLiteral","src":"31046:2:46","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31038:2:46"},"nodeType":"YulFunctionCall","src":"31038:11:46"},"nodeType":"YulIf","src":"31035:101:46"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"30963:5:46","type":""},{"name":"len","nodeType":"YulTypedName","src":"30970:3:46","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"30978:5:46","type":""}],"src":"30887:255:46"},{"body":{"nodeType":"YulBlock","src":"31321:242:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31338:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"31349:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31331:6:46"},"nodeType":"YulFunctionCall","src":"31331:21:46"},"nodeType":"YulExpressionStatement","src":"31331:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31372:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"31383:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31368:3:46"},"nodeType":"YulFunctionCall","src":"31368:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"31388:2:46","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31361:6:46"},"nodeType":"YulFunctionCall","src":"31361:30:46"},"nodeType":"YulExpressionStatement","src":"31361:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31411:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"31422:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31407:3:46"},"nodeType":"YulFunctionCall","src":"31407:18:46"},{"hexValue":"6d756c746963616c6c3a20416c6c207265636f726473206d7573742068617665","kind":"string","nodeType":"YulLiteral","src":"31427:34:46","type":"","value":"multicall: All records must have"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31400:6:46"},"nodeType":"YulFunctionCall","src":"31400:62:46"},"nodeType":"YulExpressionStatement","src":"31400:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31482:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"31493:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31478:3:46"},"nodeType":"YulFunctionCall","src":"31478:18:46"},{"hexValue":"2061206d61746368696e67206e616d6568617368","kind":"string","nodeType":"YulLiteral","src":"31498:22:46","type":"","value":" a matching namehash"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31471:6:46"},"nodeType":"YulFunctionCall","src":"31471:50:46"},"nodeType":"YulExpressionStatement","src":"31471:50:46"},{"nodeType":"YulAssignment","src":"31530:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31542:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"31553:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31538:3:46"},"nodeType":"YulFunctionCall","src":"31538:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31530:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_e0f8a6e7bdab31ebf5fea1195446f6f12fddc8619df8ea22a3ed3edf179dde30__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31298:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31312:4:46","type":""}],"src":"31147:416:46"},{"body":{"nodeType":"YulBlock","src":"31715:124:46","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31738:3:46"},{"name":"value0","nodeType":"YulIdentifier","src":"31743:6:46"},{"name":"value1","nodeType":"YulIdentifier","src":"31751:6:46"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"31725:12:46"},"nodeType":"YulFunctionCall","src":"31725:33:46"},"nodeType":"YulExpressionStatement","src":"31725:33:46"},{"nodeType":"YulVariableDeclaration","src":"31767:26:46","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31781:3:46"},{"name":"value1","nodeType":"YulIdentifier","src":"31786:6:46"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31777:3:46"},"nodeType":"YulFunctionCall","src":"31777:16:46"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"31771:2:46","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"31809:2:46"},{"kind":"number","nodeType":"YulLiteral","src":"31813:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31802:6:46"},"nodeType":"YulFunctionCall","src":"31802:13:46"},"nodeType":"YulExpressionStatement","src":"31802:13:46"},{"nodeType":"YulAssignment","src":"31824:9:46","value":{"name":"_1","nodeType":"YulIdentifier","src":"31831:2:46"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31824:3:46"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31683:3:46","type":""},{"name":"value1","nodeType":"YulTypedName","src":"31688:6:46","type":""},{"name":"value0","nodeType":"YulTypedName","src":"31696:6:46","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31707:3:46","type":""}],"src":"31568:271:46"},{"body":{"nodeType":"YulBlock","src":"31891:88:46","statements":[{"body":{"nodeType":"YulBlock","src":"31922:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"31924:16:46"},"nodeType":"YulFunctionCall","src":"31924:18:46"},"nodeType":"YulExpressionStatement","src":"31924:18:46"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31907:5:46"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31918:1:46","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"31914:3:46"},"nodeType":"YulFunctionCall","src":"31914:6:46"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31904:2:46"},"nodeType":"YulFunctionCall","src":"31904:17:46"},"nodeType":"YulIf","src":"31901:43:46"},{"nodeType":"YulAssignment","src":"31953:20:46","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31964:5:46"},{"kind":"number","nodeType":"YulLiteral","src":"31971:1:46","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31960:3:46"},"nodeType":"YulFunctionCall","src":"31960:13:46"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"31953:3:46"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31873:5:46","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"31883:3:46","type":""}],"src":"31844:135:46"},{"body":{"nodeType":"YulBlock","src":"32158:233:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32175:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"32186:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32168:6:46"},"nodeType":"YulFunctionCall","src":"32168:21:46"},"nodeType":"YulExpressionStatement","src":"32168:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32209:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"32220:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32205:3:46"},"nodeType":"YulFunctionCall","src":"32205:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"32225:2:46","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32198:6:46"},"nodeType":"YulFunctionCall","src":"32198:30:46"},"nodeType":"YulExpressionStatement","src":"32198:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32248:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"32259:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32244:3:46"},"nodeType":"YulFunctionCall","src":"32244:18:46"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"32264:34:46","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32237:6:46"},"nodeType":"YulFunctionCall","src":"32237:62:46"},"nodeType":"YulExpressionStatement","src":"32237:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32319:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"32330:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32315:3:46"},"nodeType":"YulFunctionCall","src":"32315:18:46"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"32335:13:46","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32308:6:46"},"nodeType":"YulFunctionCall","src":"32308:41:46"},"nodeType":"YulExpressionStatement","src":"32308:41:46"},{"nodeType":"YulAssignment","src":"32358:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32370:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"32381:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32366:3:46"},"nodeType":"YulFunctionCall","src":"32366:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32358:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32135:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32149:4:46","type":""}],"src":"31984:407:46"},{"body":{"nodeType":"YulBlock","src":"32428:152:46","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32445:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32448:77:46","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32438:6:46"},"nodeType":"YulFunctionCall","src":"32438:88:46"},"nodeType":"YulExpressionStatement","src":"32438:88:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32542:1:46","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"32545:4:46","type":"","value":"0x01"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32535:6:46"},"nodeType":"YulFunctionCall","src":"32535:15:46"},"nodeType":"YulExpressionStatement","src":"32535:15:46"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32566:1:46","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32569:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32559:6:46"},"nodeType":"YulFunctionCall","src":"32559:15:46"},"nodeType":"YulExpressionStatement","src":"32559:15:46"}]},"name":"panic_error_0x01","nodeType":"YulFunctionDefinition","src":"32396:184:46"},{"body":{"nodeType":"YulBlock","src":"32759:235:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32776:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"32787:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32769:6:46"},"nodeType":"YulFunctionCall","src":"32769:21:46"},"nodeType":"YulExpressionStatement","src":"32769:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32810:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"32821:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32806:3:46"},"nodeType":"YulFunctionCall","src":"32806:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"32826:2:46","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32799:6:46"},"nodeType":"YulFunctionCall","src":"32799:30:46"},"nodeType":"YulExpressionStatement","src":"32799:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32849:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"32860:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32845:3:46"},"nodeType":"YulFunctionCall","src":"32845:18:46"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"32865:34:46","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32838:6:46"},"nodeType":"YulFunctionCall","src":"32838:62:46"},"nodeType":"YulExpressionStatement","src":"32838:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32920:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"32931:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32916:3:46"},"nodeType":"YulFunctionCall","src":"32916:18:46"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"32936:15:46","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32909:6:46"},"nodeType":"YulFunctionCall","src":"32909:43:46"},"nodeType":"YulExpressionStatement","src":"32909:43:46"},{"nodeType":"YulAssignment","src":"32961:27:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32973:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"32984:3:46","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32969:3:46"},"nodeType":"YulFunctionCall","src":"32969:19:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32961:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32736:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32750:4:46","type":""}],"src":"32585:409:46"},{"body":{"nodeType":"YulBlock","src":"33173:179:46","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33190:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"33201:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33183:6:46"},"nodeType":"YulFunctionCall","src":"33183:21:46"},"nodeType":"YulExpressionStatement","src":"33183:21:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33224:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"33235:2:46","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33220:3:46"},"nodeType":"YulFunctionCall","src":"33220:18:46"},{"kind":"number","nodeType":"YulLiteral","src":"33240:2:46","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33213:6:46"},"nodeType":"YulFunctionCall","src":"33213:30:46"},"nodeType":"YulExpressionStatement","src":"33213:30:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33263:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"33274:2:46","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33259:3:46"},"nodeType":"YulFunctionCall","src":"33259:18:46"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"33279:31:46","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33252:6:46"},"nodeType":"YulFunctionCall","src":"33252:59:46"},"nodeType":"YulExpressionStatement","src":"33252:59:46"},{"nodeType":"YulAssignment","src":"33320:26:46","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33332:9:46"},{"kind":"number","nodeType":"YulLiteral","src":"33343:2:46","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33328:3:46"},"nodeType":"YulFunctionCall","src":"33328:18:46"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33320:4:46"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33150:9:46","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33164:4:46","type":""}],"src":"32999:353:46"}]},"contents":"{\n    { }\n    function abi_decode_bytes4(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_bytes4(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_decode_tuple_t_bytes32t_string_calldata_ptrt_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_bytes32t_bytes4(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_bytes4(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_ENS_$3320__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := abi_decode_bool(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := abi_decode_bool(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_contract$_INameWrapper_$6917__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_uint16(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n        value2 := value\n    }\n    function abi_decode_tuple_t_addresst_bytes32t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n    }\n    function abi_decode_array_bytes_calldata_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_bytes_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_decode_tuple_t_bytes32t_bytes4t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_bytes4(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        validator_revert_address(value)\n        value2 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_contract$_ENS_$3320t_contract$_INameWrapper_$6917t_addresst_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        let value_3 := calldataload(add(headStart, 96))\n        validator_revert_address(value_3)\n        value3 := value_3\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage(slot, src, len)\n    {\n        if gt(len, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function abi_encode_string_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_string_calldata_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_calldata(value0, value1, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string_calldata(value2, value3, tail_1)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage(slot, src, len)\n    {\n        if gt(len, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 32))\n    }\n    function increment_t_uint64(value) -> ret\n    {\n        let _1 := 0xffffffffffffffff\n        let value_1 := and(value, _1)\n        if eq(value_1, _1) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fb190b006810059edc9ead724b9a58ef6d76fdad1e4f0c7d2965b67f98b3914a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Setting delegate status for self\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string_calldata(value1, value2, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function decrement_t_uint16(value) -> ret\n    {\n        let value_1 := and(value, 0xffff)\n        if iszero(value_1) { panic_error_0x11() }\n        ret := add(value_1, not(0))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_uint16__to_t_bytes_memory_ptr_t_uint16__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_bytes(value0, add(headStart, 64))\n        mstore(add(headStart, 32), and(value1, 0xffff))\n    }\n    function increment_t_uint16(value) -> ret\n    {\n        let _1 := 0xffff\n        let value_1 := and(value, _1)\n        if eq(value_1, _1) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_uint16_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_uint16_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 96))\n        mstore(add(headStart, 32), and(value1, 0xffff))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_bytes(value2, tail_1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes32(array, len) -> value\n    {\n        value := calldataload(array)\n        if lt(len, 32)\n        {\n            value := and(value, shl(shl(3, sub(32, len)), not(0)))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_e0f8a6e7bdab31ebf5fea1195446f6f12fddc8619df8ea22a3ed3edf179dde30__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"multicall: All records must have\")\n        mstore(add(headStart, 96), \" a matching namehash\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x01()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n}","id":46,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1108":[{"length":32,"start":4565},{"length":32,"start":4720},{"length":32,"start":5033},{"length":32,"start":5183},{"length":32,"start":5434}]},"linkReferences":{},"object":"6080604052600436106102c65760003560e01c8063715018a611610179578063bc1c58d1116100d6578063e32954eb1161008a578063f1cb7e0611610064578063f1cb7e06146108d8578063f2fde38b146108f8578063f8c8765e1461091857600080fd5b8063e32954eb1461084f578063e59d895d1461086f578063e985e9c51461088f57600080fd5b8063ce3decdc116100bb578063ce3decdc146107bf578063d5fa2b00146107df578063d700ff33146107ff57600080fd5b8063bc1c58d114610737578063c86902331461075757600080fd5b8063a4b91a011161012d578063a8fa568211610112578063a8fa568214610699578063a9784b3e146106b9578063ac9650d81461070a57600080fd5b8063a4b91a0114610659578063a8e5fbc01461067957600080fd5b80638b95dd711161015e5780638b95dd71146105fb5780638da5cb5b1461061b578063a22cb4651461063957600080fd5b8063715018a6146105c657806377372213146105db57600080fd5b80633b3b57de1161022757806359d1d43c116101db578063623195b0116101c0578063623195b01461056657806362c50a1314610586578063691f3431146105a657600080fd5b806359d1d43c146105195780635c98042b1461054657600080fd5b80634cbf6ba41161020c5780634cbf6ba4146104885780634f1ef286146104e357806352d1902d146104f657600080fd5b80633b3b57de146104485780633f15457f1461046857600080fd5b806329cd62ea1161027e5780633603d758116102635780633603d758146103e85780633659cfe61461040857806337bf7a2f1461042857600080fd5b806329cd62ea146103a8578063304e6ade146103c857600080fd5b806310f13a8c116102af57806310f13a8c14610322578063124a319c146103425780632203ab561461037a57600080fd5b806301ffc9a7146102cb5780630af179d714610300575b600080fd5b3480156102d757600080fd5b506102eb6102e636600461354c565b610938565b60405190151581526020015b60405180910390f35b34801561030c57600080fd5b5061032061031b3660046135a9565b610949565b005b34801561032e57600080fd5b5061032061033d3660046135f5565b610b55565b34801561034e57600080fd5b5061036261035d36600461366f565b610c24565b6040516001600160a01b0390911681526020016102f7565b34801561038657600080fd5b5061039a61039536600461369b565b610ed2565b6040516102f792919061370d565b3480156103b457600080fd5b506103206103c3366004613726565b61100c565b3480156103d457600080fd5b506103206103e33660046135a9565b6110a8565b3480156103f457600080fd5b50610320610403366004613752565b611126565b34801561041457600080fd5b50610320610423366004613780565b6111cb565b34801561043457600080fd5b5060d654610362906001600160a01b031681565b34801561045457600080fd5b50610362610463366004613752565b61136d565b34801561047457600080fd5b5060d454610362906001600160a01b031681565b34801561049457600080fd5b506102eb6104a336600461369b565b600082815260c9602090815260408083205467ffffffffffffffff16835260cf825280832094835293815283822092825291909152205461ffff16151590565b6103206104f1366004613840565b61139f565b34801561050257600080fd5b5061050b61152d565b6040519081526020016102f7565b34801561052557600080fd5b506105396105343660046135a9565b6115f2565b6040516102f79190613890565b34801561055257600080fd5b50610539610561366004613752565b6116d4565b34801561057257600080fd5b506103206105813660046138a3565b611795565b34801561059257600080fd5b5060d754610362906001600160a01b031681565b3480156105b257600080fd5b506105396105c1366004613752565b611834565b3480156105d257600080fd5b50610320611870565b3480156105e757600080fd5b506103206105f63660046135a9565b611884565b34801561060757600080fd5b506103206106163660046138f6565b611902565b34801561062757600080fd5b506097546001600160a01b0316610362565b34801561064557600080fd5b50610320610654366004613956565b6119e4565b34801561066557600080fd5b50610320610674366004613982565b611ace565b34801561068557600080fd5b5060d554610362906001600160a01b031681565b3480156106a557600080fd5b506105396106b43660046139c0565b611b9b565b3480156106c557600080fd5b506102eb6106d4366004613a00565b6001600160a01b03928316600090815260d960209081526040808320948352938152838220929094168152925290205460ff1690565b34801561071657600080fd5b5061072a610725366004613a7c565b611beb565b6040516102f79190613abe565b34801561074357600080fd5b50610539610752366004613752565b611bf9565b34801561076357600080fd5b506107aa610772366004613752565b600081815260c9602090815260408083205467ffffffffffffffff16835260d282528083209383529290522080546001909101549091565b604080519283526020830191909152016102f7565b3480156107cb57600080fd5b506103206107da3660046135a9565b611c35565b3480156107eb57600080fd5b506103206107fa366004613b20565b611d7a565b34801561080b57600080fd5b5061083661081a366004613752565b60c96020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102f7565b34801561085b57600080fd5b5061072a61086a366004613b50565b611da1565b34801561087b57600080fd5b5061032061088a366004613b8f565b611db6565b34801561089b57600080fd5b506102eb6108aa366004613bc4565b6001600160a01b03918216600090815260d86020908152604080832093909416825291909152205460ff1690565b3480156108e457600080fd5b506105396108f336600461369b565b611e6c565b34801561090457600080fd5b50610320610913366004613780565b611f36565b34801561092457600080fd5b50610320610933366004613bf2565b611fc3565b600061094382612244565b92915050565b8261095381612282565b61095c57600080fd5b600084815260c960209081526040808320548151601f870184900484028101840190925285825283926060928392859267ffffffffffffffff9091169183916109c49183918d908d908190840183828082843760009201919091525092939250506124399050565b90505b80515160208201511015610aee578661ffff16600003610a2c57806040015196506109f18161249a565b945084604051602001610a049190613c4e565b604051602081830303815290604052805190602001209250610a25816124bb565b9350610ae0565b6000610a378261249a565b9050816040015161ffff168861ffff16141580610a5b5750610a5986826124d7565b155b15610ade57610ab78c878a8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505060208801518d9150610aae908290613c80565b8b51158a6124f5565b816040015197508160200151965080955085805190602001209350610adb826124bb565b94505b505b610ae981612762565b6109c7565b50835115610b4957610b498a85888c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c9250610b4091508290508f613c80565b895115886124f5565b50505050505050505050565b84610b5f81612282565b610b6857600080fd5b600086815260c9602090815260408083205467ffffffffffffffff16835260d3825280832089845290915290819020905184918491610baa9089908990613c93565b90815260200160405180910390209182610bc5929190613d2b565b508484604051610bd6929190613c93565b6040518091039020867f448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a187878787604051610c149493929190613e14565b60405180910390a3505050505050565b600082815260c9602090815260408083205467ffffffffffffffff16835260d0825280832085845282528083206001600160e01b0319851684529091528120546001600160a01b03168015610c7a579050610943565b6000610c858561136d565b90506001600160a01b038116610ca057600092505050610943565b6040516301ffc9a760e01b602482015260009081906001600160a01b0384169060440160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b17905251610d0d9190613c4e565b600060405180830381855afa9150503d8060008114610d48576040519150601f19603f3d011682016040523d82523d6000602084013e610d4d565b606091505b5091509150811580610d60575060208151105b80610da2575080601f81518110610d7957610d79613e46565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610db4576000945050505050610943565b6040516001600160e01b0319871660248201526001600160a01b0384169060440160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b17905251610e1f9190613c4e565b600060405180830381855afa9150503d8060008114610e5a576040519150601f19603f3d011682016040523d82523d6000602084013e610e5f565b606091505b509092509050811580610e73575060208151105b80610eb5575080601f81518110610e8c57610e8c613e46565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610ec7576000945050505050610943565b509095945050505050565b600082815260c9602090815260408083205467ffffffffffffffff16835260ca8252808320858452909152812060609060015b848111610fec5780851615801590610f35575060008181526020839052604081208054610f3190613ca3565b9050115b15610fe45780826000838152602001908152602001600020808054610f5990613ca3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8590613ca3565b8015610fd25780601f10610fa757610100808354040283529160200191610fd2565b820191906000526020600020905b815481529060010190602001808311610fb557829003601f168201915b50505050509050935093505050611005565b60011b610f05565b5060006040518060200160405280600081525092509250505b9250929050565b8261101681612282565b61101f57600080fd5b6040805180820182528481526020808201858152600088815260c983528481205467ffffffffffffffff16815260d2835284812089825283528490209251835551600190920191909155815185815290810184905285917f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4691015b60405180910390a250505050565b826110b281612282565b6110bb57600080fd5b600084815260c9602090815260408083205467ffffffffffffffff16835260cc825280832087845290915290206110f3838583613d2b565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578848460405161109a929190613e5c565b8061113081612282565b61113957600080fd5b600082815260c960205260408120805467ffffffffffffffff169161115d83613e70565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600084815260c960209081526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361126e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112c97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146113455760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401611265565b61134e8161284a565b6040805160008082526020820190925261136a91839190612852565b50565b60008061137b83603c611e6c565b9050805160000361138f5750600092915050565b611398816129f2565b9392505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361143d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401611265565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114987f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146115145760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401611265565b61151d8261284a565b61152982826001612852565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115cd5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401611265565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600083815260c9602090815260408083205467ffffffffffffffff16835260d38252808320868452909152908190209051606091906116349085908590613c93565b9081526020016040518091039020805461164d90613ca3565b80601f016020809104026020016040519081016040528092919081815260200182805461167990613ca3565b80156116c65780601f1061169b576101008083540402835291602001916116c6565b820191906000526020600020905b8154815290600101906020018083116116a957829003601f168201915b505050505090509392505050565b600081815260c9602090815260408083205467ffffffffffffffff16835260cd8252808320848452909152902080546060919061171090613ca3565b80601f016020809104026020016040519081016040528092919081815260200182805461173c90613ca3565b80156117895780601f1061175e57610100808354040283529160200191611789565b820191906000526020600020905b81548152906001019060200180831161176c57829003601f168201915b50505050509050919050565b8361179f81612282565b6117a857600080fd5b836117b4600182613c80565b16156117bf57600080fd5b600085815260c9602090815260408083205467ffffffffffffffff16835260ca8252808320888452825280832087845290915290206117ff838583613d2b565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b600081815260c9602090815260408083205467ffffffffffffffff16835260d18252808320848452909152902080546060919061171090613ca3565b611878612a1a565b6118826000612a74565b565b8261188e81612282565b61189757600080fd5b600084815260c9602090815260408083205467ffffffffffffffff16835260d1825280832087845290915290206118cf838583613d2b565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7848460405161109a929190613e5c565b8261190c81612282565b61191557600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752848460405161194792919061370d565b60405180910390a2603c830361199e57837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2611982846129f2565b6040516001600160a01b03909116815260200160405180910390a25b600084815260c9602090815260408083205467ffffffffffffffff16835260cb8252808320878452825280832086845290915290206119dd8382613e97565b5050505050565b6001600160a01b0382163303611a625760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401611265565b33600081815260d8602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b0382163303611b265760405162461bcd60e51b815260206004820181905260248201527f53657474696e672064656c65676174652073746174757320666f722073656c666044820152606401611265565b33600081815260d96020908152604080832087845282528083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519384529286917ff0ddb3b04746704017f9aa8bd728fcc2c1d11675041205350018915f5e4750a0910160405180910390a4505050565b600083815260c9602090815260408083205467ffffffffffffffff16835260ce82528083208684528252808320858452825280832061ffff85168452909152902080546060919061164d90613ca3565b606061139860008484612ad3565b600081815260c9602090815260408083205467ffffffffffffffff16835260cc8252808320848452909152902080546060919061171090613ca3565b82611c3f81612282565b611c4857600080fd5b600084815260c9602090815260408083205467ffffffffffffffff1680845260cd835281842088855290925282208054919291611c8490613ca3565b80601f0160208091040260200160405190810160405280929190818152602001828054611cb090613ca3565b8015611cfd5780601f10611cd257610100808354040283529160200191611cfd565b820191906000526020600020905b815481529060010190602001808311611ce057829003601f168201915b5050505067ffffffffffffffff8416600090815260cd602090815260408083208b84529091529020919250611d359050858783613d2b565b50857f8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f85828787604051611d6a93929190613f57565b60405180910390a2505050505050565b81611d8481612282565b611d8d57600080fd5b611d9c83603c61061685612cac565b505050565b6060611dae848484612ad3565b949350505050565b82611dc081612282565b611dc957600080fd5b600084815260c9602090815260408083205467ffffffffffffffff16835260d0825280832087845282528083206001600160e01b0319871680855290835292819020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716908117909155905190815286917f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa910160405180910390a350505050565b600082815260c9602090815260408083205467ffffffffffffffff16835260cb825280832085845282528083208484529091529020805460609190611eb090613ca3565b80601f0160208091040260200160405190810160405280929190818152602001828054611edc90613ca3565b8015611f295780601f10611efe57610100808354040283529160200191611f29565b820191906000526020600020905b815481529060010190602001808311611f0c57829003601f168201915b5050505050905092915050565b611f3e612a1a565b6001600160a01b038116611fba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401611265565b61136a81612a74565b600054610100900460ff1615808015611fe35750600054600160ff909116105b80611ffd5750303b158015611ffd575060005460ff166001145b61206f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401611265565b6000805460ff191660011790558015612092576000805461ff0019166101001790555b61209a612ce5565b60d480546001600160a01b0387811673ffffffffffffffffffffffffffffffffffffffff19928316811790935560d5805488831690841617905560d6805487831690841617905560d78054918616919092161790556040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152600091906302571be390602401602060405180830381865afa15801561214c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121709190613f7d565b6040517f1e83409a0000000000000000000000000000000000000000000000000000000081523360048201529091506001600160a01b03821690631e83409a906024016020604051808303816000875af11580156121d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f69190613f9a565b505080156119dd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60006001600160e01b031982167f59d1d43c000000000000000000000000000000000000000000000000000000001480610943575061094382612d6a565b60d6546000906001600160a01b03163314806122a8575060d7546001600160a01b031633145b156122b557506001919050565b60d4546040516302571be360e01b8152600481018490526000916001600160a01b0316906302571be390602401602060405180830381865afa1580156122ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123239190613f7d565b60d5549091506001600160a01b03908116908216036123c55760d5546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0390911690636352211e90602401602060405180830381865afa15801561239e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c29190613f7d565b90505b6001600160a01b0381163314806123ff57506001600160a01b038116600090815260d86020908152604080832033845290915290205460ff165b8061139857506001600160a01b038116600090815260d960209081526040808320868452825280832033845290915290205460ff16611398565b6124876040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c0810182905261094381612762565b60208101518151606091610943916124b29082612da8565b84519190612e02565b60a081015160c0820151606091610943916124b2908290613c80565b60008151835114801561139857506113988360008460008751612e79565b865160208801206000612509878787612e02565b905083156126335767ffffffffffffffff8316600090815260ce602090815260408083208d84528252808320858452825280832061ffff8c1684529091529020805461255490613ca3565b1590506125b35767ffffffffffffffff8316600090815260cf602090815260408083208d845282528083208584529091528120805461ffff169161259783613fb3565b91906101000a81548161ffff021916908361ffff160217905550505b67ffffffffffffffff8316600090815260ce602090815260408083208d84528252808320858452825280832061ffff8c16845290915281206125f4916134e1565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a604051612626929190613fd1565b60405180910390a2610b49565b67ffffffffffffffff8316600090815260ce602090815260408083208d84528252808320858452825280832061ffff8c1684529091529020805461267690613ca3565b90506000036126d75767ffffffffffffffff8316600090815260cf602090815260408083208d845282528083208584529091528120805461ffff16916126bb83613ff7565b91906101000a81548161ffff021916908361ffff160217905550505b67ffffffffffffffff8316600090815260ce602090815260408083208d84528252808320858452825280832061ffff8c16845290915290206127198282613e97565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a8460405161274e9392919061400e565b60405180910390a250505050505050505050565b60c081015160208201819052815151116127795750565b600061278d82600001518360200151612da8565b826020015161279c919061403d565b82519091506127ab9082612e9c565b61ffff1660408301526127bf60028261403d565b82519091506127ce9082612e9c565b61ffff1660608301526127e260028261403d565b82519091506127f19082612ec4565b63ffffffff16608083015261280760048261403d565b82519091506000906128199083612e9c565b61ffff16905061282a60028361403d565b60a08401819052915061283d818361403d565b60c0909301929092525050565b61136a612a1a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561288557611d9c83612eee565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156128df575060408051601f3d908101601f191682019092526128dc91810190613f9a565b60015b6129515760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401611265565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146129e65760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401611265565b50611d9c838383612fb9565b60008151601414612a0257600080fd5b50602001516c01000000000000000000000000900490565b6097546001600160a01b031633146118825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611265565b609780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60608167ffffffffffffffff811115612aee57612aee61379d565b604051908082528060200260200182016040528015612b2157816020015b6060815260200190600190039081612b0c5790505b50905060005b82811015612ca4578415612bec576000848483818110612b4957612b49613e46565b9050602002810190612b5b9190614050565b612b6a91602491600491614097565b612b73916140c1565b9050858114612bea5760405162461bcd60e51b815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d65686173680000000000000000000000006064820152608401611265565b505b60008030868685818110612c0257612c02613e46565b9050602002810190612c149190614050565b604051612c22929190613c93565b600060405180830381855af49150503d8060008114612c5d576040519150601f19603f3d011682016040523d82523d6000602084013e612c62565b606091505b509150915081612c7157600080fd5b80848481518110612c8457612c84613e46565b602002602001018190525050508080612c9c906140df565b915050612b27565b509392505050565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b600054610100900460ff16612d625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401611265565b611882612fe4565b60006001600160e01b031982167fc869023300000000000000000000000000000000000000000000000000000000148061094357506109438261306a565b6000815b83518110612dbc57612dbc6140f8565b6000612dc885836130a8565b60ff169050612dd881600161403d565b612de2908361403d565b915080600003612df25750612df8565b50612dac565b611dae8382613c80565b8251606090612e11838561403d565b1115612e1c57600080fd5b60008267ffffffffffffffff811115612e3757612e3761379d565b6040519080825280601f01601f191660200182016040528015612e61576020820181803683370190505b50905060208082019086860101610ec78282876130cc565b6000612e86848484613122565b612e91878785613122565b149695505050505050565b8151600090612eac83600261403d565b1115612eb757600080fd5b50016002015161ffff1690565b8151600090612ed483600461403d565b1115612edf57600080fd5b50016004015163ffffffff1690565b6001600160a01b0381163b612f6b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401611265565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b612fc283613146565b600082511180612fcf5750805b15611d9c57612fde8383613186565b50505050565b600054610100900460ff166130615760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401611265565b61188233612a74565b60006001600160e01b031982167f691f34310000000000000000000000000000000000000000000000000000000014806109435750610943826131ab565b60008282815181106130bc576130bc613e46565b016020015160f81c905092915050565b6020811061310457815183526130e360208461403d565b92506130f060208361403d565b91506130fd602082613c80565b90506130cc565b905182516020929092036101000a6000190180199091169116179052565b8251600090613131838561403d565b111561313c57600080fd5b5091016020012090565b61314f81612eee565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611398838360405180606001604052806027815260200161410f602791396131e9565b60006001600160e01b031982167f124a319c000000000000000000000000000000000000000000000000000000001480610943575061094382613261565b6060600080856001600160a01b0316856040516132069190613c4e565b600060405180830381855af49150503d8060008114613241576040519150601f19603f3d011682016040523d82523d6000602084013e613246565b606091505b5091509150613257868383876132d3565b9695505050505050565b60006001600160e01b031982167fa8fa56820000000000000000000000000000000000000000000000000000000014806132c457506001600160e01b031982167f5c98042b00000000000000000000000000000000000000000000000000000000145b8061094357506109438261334c565b6060831561334257825160000361333b576001600160a01b0385163b61333b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611265565b5081611dae565b611dae838361338a565b60006001600160e01b031982167fbc1c58d10000000000000000000000000000000000000000000000000000000014806109435750610943826133b4565b81511561339a5781518083602001fd5b8060405162461bcd60e51b81526004016112659190613890565b60006001600160e01b031982167f3b3b57de00000000000000000000000000000000000000000000000000000000148061341757506001600160e01b031982167ff1cb7e0600000000000000000000000000000000000000000000000000000000145b8061094357506109438260006001600160e01b031982167f2203ab5600000000000000000000000000000000000000000000000000000000148061094357506109438260006001600160e01b031982167fd700ff3300000000000000000000000000000000000000000000000000000000148061094357506109438260006001600160e01b031982167f4fbf043300000000000000000000000000000000000000000000000000000000148061094357506301ffc9a760e01b6001600160e01b0319831614610943565b5080546134ed90613ca3565b6000825580601f106134fd575050565b601f01602090049060005260206000209081019061136a91905b8082111561352b5760008155600101613517565b5090565b80356001600160e01b03198116811461354757600080fd5b919050565b60006020828403121561355e57600080fd5b6113988261352f565b60008083601f84011261357957600080fd5b50813567ffffffffffffffff81111561359157600080fd5b60208301915083602082850101111561100557600080fd5b6000806000604084860312156135be57600080fd5b83359250602084013567ffffffffffffffff8111156135dc57600080fd5b6135e886828701613567565b9497909650939450505050565b60008060008060006060868803121561360d57600080fd5b85359450602086013567ffffffffffffffff8082111561362c57600080fd5b61363889838a01613567565b9096509450604088013591508082111561365157600080fd5b5061365e88828901613567565b969995985093965092949392505050565b6000806040838503121561368257600080fd5b823591506136926020840161352f565b90509250929050565b600080604083850312156136ae57600080fd5b50508035926020909101359150565b60005b838110156136d85781810151838201526020016136c0565b50506000910152565b600081518084526136f98160208601602086016136bd565b601f01601f19169290920160200192915050565b828152604060208201526000611dae60408301846136e1565b60008060006060848603121561373b57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561376457600080fd5b5035919050565b6001600160a01b038116811461136a57600080fd5b60006020828403121561379257600080fd5b81356113988161376b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126137c457600080fd5b813567ffffffffffffffff808211156137df576137df61379d565b604051601f8301601f19908116603f011681019082821181831017156138075761380761379d565b8160405283815286602085880101111561382057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561385357600080fd5b823561385e8161376b565b9150602083013567ffffffffffffffff81111561387a57600080fd5b613886858286016137b3565b9150509250929050565b60208152600061139860208301846136e1565b600080600080606085870312156138b957600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156138de57600080fd5b6138ea87828801613567565b95989497509550505050565b60008060006060848603121561390b57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561393057600080fd5b61393c868287016137b3565b9150509250925092565b8035801515811461354757600080fd5b6000806040838503121561396957600080fd5b82356139748161376b565b915061369260208401613946565b60008060006060848603121561399757600080fd5b8335925060208401356139a98161376b565b91506139b760408501613946565b90509250925092565b6000806000606084860312156139d557600080fd5b8335925060208401359150604084013561ffff811681146139f557600080fd5b809150509250925092565b600080600060608486031215613a1557600080fd5b8335613a208161376b565b92506020840135915060408401356139f58161376b565b60008083601f840112613a4957600080fd5b50813567ffffffffffffffff811115613a6157600080fd5b6020830191508360208260051b850101111561100557600080fd5b60008060208385031215613a8f57600080fd5b823567ffffffffffffffff811115613aa657600080fd5b613ab285828601613a37565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613b1357603f19888603018452613b018583516136e1565b94509285019290850190600101613ae5565b5092979650505050505050565b60008060408385031215613b3357600080fd5b823591506020830135613b458161376b565b809150509250929050565b600080600060408486031215613b6557600080fd5b83359250602084013567ffffffffffffffff811115613b8357600080fd5b6135e886828701613a37565b600080600060608486031215613ba457600080fd5b83359250613bb46020850161352f565b915060408401356139f58161376b565b60008060408385031215613bd757600080fd5b8235613be28161376b565b91506020830135613b458161376b565b60008060008060808587031215613c0857600080fd5b8435613c138161376b565b93506020850135613c238161376b565b92506040850135613c338161376b565b91506060850135613c438161376b565b939692955090935050565b60008251613c608184602087016136bd565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561094357610943613c6a565b8183823760009101908152919050565b600181811c90821680613cb757607f821691505b602082108103613cd757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611d9c57600081815260208120601f850160051c81016020861015613d045750805b601f850160051c820191505b81811015613d2357828155600101613d10565b505050505050565b67ffffffffffffffff831115613d4357613d4361379d565b613d5783613d518354613ca3565b83613cdd565b6000601f841160018114613d8b5760008515613d735750838201355b600019600387901b1c1916600186901b1783556119dd565b600083815260209020601f19861690835b82811015613dbc5786850135825560209485019460019092019101613d9c565b5086821015613dd95760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000613e28604083018688613deb565b8281036020840152613e3b818587613deb565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b602081526000611dae602083018486613deb565b600067ffffffffffffffff808316818103613e8d57613e8d613c6a565b6001019392505050565b815167ffffffffffffffff811115613eb157613eb161379d565b613ec581613ebf8454613ca3565b84613cdd565b602080601f831160018114613efa5760008415613ee25750858301515b600019600386901b1c1916600185901b178555613d23565b600085815260208120601f198616915b82811015613f2957888601518255948401946001909101908401613f0a565b5085821015613f475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000613f6a60408301866136e1565b8281036020840152613257818587613deb565b600060208284031215613f8f57600080fd5b81516113988161376b565b600060208284031215613fac57600080fd5b5051919050565b600061ffff821680613fc757613fc7613c6a565b6000190192915050565b604081526000613fe460408301856136e1565b905061ffff831660208301529392505050565b600061ffff808316818103613e8d57613e8d613c6a565b60608152600061402160608301866136e1565b61ffff85166020840152828103604084015261325781856136e1565b8082018082111561094357610943613c6a565b6000808335601e1984360301811261406757600080fd5b83018035915067ffffffffffffffff82111561408257600080fd5b60200191503681900382131561100557600080fd5b600080858511156140a757600080fd5b838611156140b457600080fd5b5050820193919092039150565b8035602083101561094357600019602084900360031b1b1692915050565b6000600182016140f1576140f1613c6a565b5060010190565b634e487b7160e01b600052600160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122010099458684fb48ad38c646845de2e82b477a5a9f6590e8c199e0205caf4bfbb64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2C6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x179 JUMPI DUP1 PUSH4 0xBC1C58D1 GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0xE32954EB GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xF1CB7E06 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF1CB7E06 EQ PUSH2 0x8D8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x8F8 JUMPI DUP1 PUSH4 0xF8C8765E EQ PUSH2 0x918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE32954EB EQ PUSH2 0x84F JUMPI DUP1 PUSH4 0xE59D895D EQ PUSH2 0x86F JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x88F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCE3DECDC GT PUSH2 0xBB JUMPI DUP1 PUSH4 0xCE3DECDC EQ PUSH2 0x7BF JUMPI DUP1 PUSH4 0xD5FA2B00 EQ PUSH2 0x7DF JUMPI DUP1 PUSH4 0xD700FF33 EQ PUSH2 0x7FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC1C58D1 EQ PUSH2 0x737 JUMPI DUP1 PUSH4 0xC8690233 EQ PUSH2 0x757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA4B91A01 GT PUSH2 0x12D JUMPI DUP1 PUSH4 0xA8FA5682 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0xA8FA5682 EQ PUSH2 0x699 JUMPI DUP1 PUSH4 0xA9784B3E EQ PUSH2 0x6B9 JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x70A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA4B91A01 EQ PUSH2 0x659 JUMPI DUP1 PUSH4 0xA8E5FBC0 EQ PUSH2 0x679 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8B95DD71 GT PUSH2 0x15E JUMPI DUP1 PUSH4 0x8B95DD71 EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x61B JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5C6 JUMPI DUP1 PUSH4 0x77372213 EQ PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3B3B57DE GT PUSH2 0x227 JUMPI DUP1 PUSH4 0x59D1D43C GT PUSH2 0x1DB JUMPI DUP1 PUSH4 0x623195B0 GT PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x623195B0 EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x62C50A13 EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0x691F3431 EQ PUSH2 0x5A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x59D1D43C EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x5C98042B EQ PUSH2 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4CBF6BA4 GT PUSH2 0x20C JUMPI DUP1 PUSH4 0x4CBF6BA4 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x4F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3B3B57DE EQ PUSH2 0x448 JUMPI DUP1 PUSH4 0x3F15457F EQ PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x29CD62EA GT PUSH2 0x27E JUMPI DUP1 PUSH4 0x3603D758 GT PUSH2 0x263 JUMPI DUP1 PUSH4 0x3603D758 EQ PUSH2 0x3E8 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0x37BF7A2F EQ PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x29CD62EA EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0x304E6ADE EQ PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10F13A8C GT PUSH2 0x2AF JUMPI DUP1 PUSH4 0x10F13A8C EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0x124A319C EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0x2203AB56 EQ PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2CB JUMPI DUP1 PUSH4 0xAF179D7 EQ PUSH2 0x300 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x2E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x354C JUMP JUMPDEST PUSH2 0x938 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x35A9 JUMP JUMPDEST PUSH2 0x949 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0x35F5 JUMP JUMPDEST PUSH2 0xB55 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x362 PUSH2 0x35D CALLDATASIZE PUSH1 0x4 PUSH2 0x366F JUMP JUMPDEST PUSH2 0xC24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x395 CALLDATASIZE PUSH1 0x4 PUSH2 0x369B JUMP JUMPDEST PUSH2 0xED2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F7 SWAP3 SWAP2 SWAP1 PUSH2 0x370D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x3C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3726 JUMP JUMPDEST PUSH2 0x100C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x3E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x35A9 JUMP JUMPDEST PUSH2 0x10A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x403 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH2 0x1126 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x423 CALLDATASIZE PUSH1 0x4 PUSH2 0x3780 JUMP JUMPDEST PUSH2 0x11CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD6 SLOAD PUSH2 0x362 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x362 PUSH2 0x463 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH2 0x136D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD4 SLOAD PUSH2 0x362 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x369B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCF DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 DUP4 MSTORE SWAP4 DUP2 MSTORE DUP4 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH2 0xFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x320 PUSH2 0x4F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3840 JUMP JUMPDEST PUSH2 0x139F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x50B PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x534 CALLDATASIZE PUSH1 0x4 PUSH2 0x35A9 JUMP JUMPDEST PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x3890 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH2 0x16D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A3 JUMP JUMPDEST PUSH2 0x1795 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD7 SLOAD PUSH2 0x362 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x5C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH2 0x1834 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x1870 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x5F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x35A9 JUMP JUMPDEST PUSH2 0x1884 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x607 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x616 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F6 JUMP JUMPDEST PUSH2 0x1902 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x362 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x654 CALLDATASIZE PUSH1 0x4 PUSH2 0x3956 JUMP JUMPDEST PUSH2 0x19E4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x674 CALLDATASIZE PUSH1 0x4 PUSH2 0x3982 JUMP JUMPDEST PUSH2 0x1ACE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x685 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD5 SLOAD PUSH2 0x362 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x6B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x39C0 JUMP JUMPDEST PUSH2 0x1B9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x6D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A00 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP4 MSTORE SWAP4 DUP2 MSTORE DUP4 DUP3 KECCAK256 SWAP3 SWAP1 SWAP5 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x72A PUSH2 0x725 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A7C JUMP JUMPDEST PUSH2 0x1BEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x3ABE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x743 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x752 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH2 0x1BF9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x763 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7AA PUSH2 0x772 CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD2 DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x7DA CALLDATASIZE PUSH1 0x4 PUSH2 0x35A9 JUMP JUMPDEST PUSH2 0x1C35 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x7FA CALLDATASIZE PUSH1 0x4 PUSH2 0x3B20 JUMP JUMPDEST PUSH2 0x1D7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x836 PUSH2 0x81A CALLDATASIZE PUSH1 0x4 PUSH2 0x3752 JUMP JUMPDEST PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x85B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x72A PUSH2 0x86A CALLDATASIZE PUSH1 0x4 PUSH2 0x3B50 JUMP JUMPDEST PUSH2 0x1DA1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x88A CALLDATASIZE PUSH1 0x4 PUSH2 0x3B8F JUMP JUMPDEST PUSH2 0x1DB6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x89B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x8AA CALLDATASIZE PUSH1 0x4 PUSH2 0x3BC4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x8F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x369B JUMP JUMPDEST PUSH2 0x1E6C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x904 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x913 CALLDATASIZE PUSH1 0x4 PUSH2 0x3780 JUMP JUMPDEST PUSH2 0x1F36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x320 PUSH2 0x933 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BF2 JUMP JUMPDEST PUSH2 0x1FC3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x943 DUP3 PUSH2 0x2244 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH2 0x953 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x95C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH1 0x1F DUP8 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP6 DUP3 MSTORE DUP4 SWAP3 PUSH1 0x60 SWAP3 DUP4 SWAP3 DUP6 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 DUP4 SWAP2 PUSH2 0x9C4 SWAP2 DUP4 SWAP2 DUP14 SWAP1 DUP14 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP4 SWAP3 POP POP PUSH2 0x2439 SWAP1 POP JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 MLOAD MLOAD PUSH1 0x20 DUP3 ADD MLOAD LT ISZERO PUSH2 0xAEE JUMPI DUP7 PUSH2 0xFFFF AND PUSH1 0x0 SUB PUSH2 0xA2C JUMPI DUP1 PUSH1 0x40 ADD MLOAD SWAP7 POP PUSH2 0x9F1 DUP2 PUSH2 0x249A JUMP JUMPDEST SWAP5 POP DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA04 SWAP2 SWAP1 PUSH2 0x3C4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0xA25 DUP2 PUSH2 0x24BB JUMP JUMPDEST SWAP4 POP PUSH2 0xAE0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA37 DUP3 PUSH2 0x249A JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD PUSH2 0xFFFF AND DUP9 PUSH2 0xFFFF AND EQ ISZERO DUP1 PUSH2 0xA5B JUMPI POP PUSH2 0xA59 DUP7 DUP3 PUSH2 0x24D7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xADE JUMPI PUSH2 0xAB7 DUP13 DUP8 DUP11 DUP15 DUP15 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP PUSH1 0x20 DUP9 ADD MLOAD DUP14 SWAP2 POP PUSH2 0xAAE SWAP1 DUP3 SWAP1 PUSH2 0x3C80 JUMP JUMPDEST DUP12 MLOAD ISZERO DUP11 PUSH2 0x24F5 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD SWAP8 POP DUP2 PUSH1 0x20 ADD MLOAD SWAP7 POP DUP1 SWAP6 POP DUP6 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP4 POP PUSH2 0xADB DUP3 PUSH2 0x24BB JUMP JUMPDEST SWAP5 POP JUMPDEST POP JUMPDEST PUSH2 0xAE9 DUP2 PUSH2 0x2762 JUMP JUMPDEST PUSH2 0x9C7 JUMP JUMPDEST POP DUP4 MLOAD ISZERO PUSH2 0xB49 JUMPI PUSH2 0xB49 DUP11 DUP6 DUP9 DUP13 DUP13 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP13 SWAP3 POP PUSH2 0xB40 SWAP2 POP DUP3 SWAP1 POP DUP16 PUSH2 0x3C80 JUMP JUMPDEST DUP10 MLOAD ISZERO DUP9 PUSH2 0x24F5 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 PUSH2 0xB5F DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0xB68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD3 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 MLOAD DUP5 SWAP2 DUP5 SWAP2 PUSH2 0xBAA SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH2 0x3C93 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP2 DUP3 PUSH2 0xBC5 SWAP3 SWAP2 SWAP1 PUSH2 0x3D2B JUMP JUMPDEST POP DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xBD6 SWAP3 SWAP2 SWAP1 PUSH2 0x3C93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP7 PUSH32 0x448BC014F1536726CF8D54FF3D6481ED3CBC683C2591CA204274009AFA09B1A1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0xC14 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3E14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD0 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xC7A JUMPI SWAP1 POP PUSH2 0x943 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC85 DUP6 PUSH2 0x136D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCA0 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x943 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0xD0D SWAP2 SWAP1 PUSH2 0x3C4E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD48 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD4D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 PUSH2 0xD60 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT JUMPDEST DUP1 PUSH2 0xDA2 JUMPI POP DUP1 PUSH1 0x1F DUP2 MLOAD DUP2 LT PUSH2 0xD79 JUMPI PUSH2 0xD79 PUSH2 0x3E46 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO JUMPDEST ISZERO PUSH2 0xDB4 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x943 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0xE1F SWAP2 SWAP1 PUSH2 0x3C4E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE5A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0xE73 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT JUMPDEST DUP1 PUSH2 0xEB5 JUMPI POP DUP1 PUSH1 0x1F DUP2 MLOAD DUP2 LT PUSH2 0xE8C JUMPI PUSH2 0xE8C PUSH2 0x3E46 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO JUMPDEST ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x943 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCA DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x60 SWAP1 PUSH1 0x1 JUMPDEST DUP5 DUP2 GT PUSH2 0xFEC JUMPI DUP1 DUP6 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xF35 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xF31 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST SWAP1 POP GT JUMPDEST ISZERO PUSH2 0xFE4 JUMPI DUP1 DUP3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 DUP1 SLOAD PUSH2 0xF59 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF85 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFD2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFA7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFD2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFB5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 POP SWAP4 POP POP POP PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x1 SHL PUSH2 0xF05 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP3 PUSH2 0x1016 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x101F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0xC9 DUP4 MSTORE DUP5 DUP2 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0xD2 DUP4 MSTORE DUP5 DUP2 KECCAK256 DUP10 DUP3 MSTORE DUP4 MSTORE DUP5 SWAP1 KECCAK256 SWAP3 MLOAD DUP4 SSTORE MLOAD PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE DUP6 SWAP2 PUSH32 0x1D6F5E03D3F63EB58751986629A5439BAEE5079FF04F345BECB66E23EB154E46 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP3 PUSH2 0x10B2 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x10BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCC DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x10F3 DUP4 DUP6 DUP4 PUSH2 0x3D2B JUMP JUMPDEST POP DUP4 PUSH32 0xE379C1624ED7E714CC0937528A32359D69D5281337765313DBA4E081B72D7578 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x109A SWAP3 SWAP2 SWAP1 PUSH2 0x3E5C JUMP JUMPDEST DUP1 PUSH2 0x1130 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP2 PUSH2 0x115D DUP4 PUSH2 0x3E70 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x100 SWAP3 SWAP1 SWAP3 EXP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 DUP2 MUL NOT SWAP1 SWAP4 AND SWAP2 DUP4 AND MUL OR SWAP1 SWAP2 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND DUP2 MSTORE DUP5 SWAP3 POP PUSH32 0xC6621CCB8F3F5A04BB6502154B2CAF6ADF5983FE76DFEF1CFC9C42E3579DB444 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x126E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12C9 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1345 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x134E DUP2 PUSH2 0x284A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x136A SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x2852 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x137B DUP4 PUSH1 0x3C PUSH2 0x1E6C JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x138F JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1398 DUP2 PUSH2 0x29F2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x143D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1498 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1514 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x151D DUP3 PUSH2 0x284A JUMP JUMPDEST PUSH2 0x1529 DUP3 DUP3 PUSH1 0x1 PUSH2 0x2852 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x15CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD3 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 MLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1634 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x3C93 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x164D SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1679 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x16C6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x169B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x16C6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x16A9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCD DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1710 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x173C SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1789 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x175E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1789 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x176C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP4 PUSH2 0x179F DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x17A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x17B4 PUSH1 0x1 DUP3 PUSH2 0x3C80 JUMP JUMPDEST AND ISZERO PUSH2 0x17BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCA DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x17FF DUP4 DUP6 DUP4 PUSH2 0x3D2B JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP5 SWAP1 DUP7 SWAP1 PUSH32 0xAA121BBEEF5F32F5961A2A28966E769023910FC9479059EE3495D4C1A696EFE3 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD1 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1710 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST PUSH2 0x1878 PUSH2 0x2A1A JUMP JUMPDEST PUSH2 0x1882 PUSH1 0x0 PUSH2 0x2A74 JUMP JUMPDEST JUMP JUMPDEST DUP3 PUSH2 0x188E DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1897 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD1 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x18CF DUP4 DUP6 DUP4 PUSH2 0x3D2B JUMP JUMPDEST POP DUP4 PUSH32 0xB7D29E911041E8D9B843369E890BCB72C9388692BA48B65AC54E7214C4C348F7 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x109A SWAP3 SWAP2 SWAP1 PUSH2 0x3E5C JUMP JUMPDEST DUP3 PUSH2 0x190C DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1915 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH32 0x65412581168E88A1E60C6459D7F44AE83AD0832E670826C05A4E2476B57AF752 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1947 SWAP3 SWAP2 SWAP1 PUSH2 0x370D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x3C DUP4 SUB PUSH2 0x199E JUMPI DUP4 PUSH32 0x52D7D861F09AB3D26239D492E8968629F95E9E318CF0B73BFDDC441522A15FD2 PUSH2 0x1982 DUP5 PUSH2 0x29F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCB DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x19DD DUP4 DUP3 PUSH2 0x3E97 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER SUB PUSH2 0x1A62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER SUB PUSH2 0x1B26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53657474696E672064656C65676174652073746174757320666F722073656C66 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1265 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP4 DUP5 MSTORE SWAP3 DUP7 SWAP2 PUSH32 0xF0DDB3B04746704017F9AA8BD728FCC2C1D11675041205350018915F5E4750A0 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x164D SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1398 PUSH1 0x0 DUP5 DUP5 PUSH2 0x2AD3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCC DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1710 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP3 PUSH2 0x1C3F DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1C48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP1 DUP5 MSTORE PUSH1 0xCD DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP9 DUP6 MSTORE SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH2 0x1C84 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB0 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1CFD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1CD2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1CFD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CE0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH8 0xFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP2 SWAP3 POP PUSH2 0x1D35 SWAP1 POP DUP6 DUP8 DUP4 PUSH2 0x3D2B JUMP JUMPDEST POP DUP6 PUSH32 0x8F15ED4B723EF428F250961DA8315675B507046737E19319FC1A4D81BFE87F85 DUP3 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1D6A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3F57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x1D84 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1D8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D9C DUP4 PUSH1 0x3C PUSH2 0x616 DUP6 PUSH2 0x2CAC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DAE DUP5 DUP5 DUP5 PUSH2 0x2AD3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH2 0x1DC0 DUP2 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x1DC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xD0 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE DUP7 SWAP2 PUSH32 0x7C69F06BEA0BDEF565B709E93A147836B0063BA2DD89F02D0B7E8D931E6A6DAA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0xCB DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1EB0 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1EDC SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1F29 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1EFE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1F29 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1F0C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1F3E PUSH2 0x2A1A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1FBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x136A DUP2 PUSH2 0x2A74 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1FE3 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x1FFD JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FFD JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x206F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x2092 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x209A PUSH2 0x2CE5 JUMP JUMPDEST PUSH1 0xD4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP3 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0xD5 DUP1 SLOAD DUP9 DUP4 AND SWAP1 DUP5 AND OR SWAP1 SSTORE PUSH1 0xD6 DUP1 SLOAD DUP8 DUP4 AND SWAP1 DUP5 AND OR SWAP1 SSTORE PUSH1 0xD7 DUP1 SLOAD SWAP2 DUP7 AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x91D1777781884D03A6757A803996E38DE2A42967FB37EEACA72729271025A9E2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x214C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2170 SWAP2 SWAP1 PUSH2 0x3F7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1E83409A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x1E83409A SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x21D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21F6 SWAP2 SWAP1 PUSH2 0x3F9A JUMP JUMPDEST POP POP DUP1 ISZERO PUSH2 0x19DD JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x59D1D43C00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x2D6A JUMP JUMPDEST PUSH1 0xD6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x22A8 JUMPI POP PUSH1 0xD7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST ISZERO PUSH2 0x22B5 JUMPI POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xD4 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2571BE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2323 SWAP2 SWAP1 PUSH2 0x3F7D JUMP JUMPDEST PUSH1 0xD5 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP3 AND SUB PUSH2 0x23C5 JUMPI PUSH1 0xD5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x239E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23C2 SWAP2 SWAP1 PUSH2 0x3F7D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x23FF JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x1398 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1398 JUMP JUMPDEST PUSH2 0x2487 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x943 DUP2 PUSH2 0x2762 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 SWAP2 PUSH2 0x943 SWAP2 PUSH2 0x24B2 SWAP1 DUP3 PUSH2 0x2DA8 JUMP JUMPDEST DUP5 MLOAD SWAP2 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x60 SWAP2 PUSH2 0x943 SWAP2 PUSH2 0x24B2 SWAP1 DUP3 SWAP1 PUSH2 0x3C80 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x1398 JUMPI POP PUSH2 0x1398 DUP4 PUSH1 0x0 DUP5 PUSH1 0x0 DUP8 MLOAD PUSH2 0x2E79 JUMP JUMPDEST DUP7 MLOAD PUSH1 0x20 DUP9 ADD KECCAK256 PUSH1 0x0 PUSH2 0x2509 DUP8 DUP8 DUP8 PUSH2 0x2E02 JUMP JUMPDEST SWAP1 POP DUP4 ISZERO PUSH2 0x2633 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x2554 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST ISZERO SWAP1 POP PUSH2 0x25B3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF AND SWAP2 PUSH2 0x2597 DUP4 PUSH2 0x3FB3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x25F4 SWAP2 PUSH2 0x34E1 JUMP JUMPDEST DUP10 PUSH32 0x3528ED0C2A3EBC993B12CE3C16BB382F9C7D88EF7D8A1BF290EAF35955A1207 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0x2626 SWAP3 SWAP2 SWAP1 PUSH2 0x3FD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xB49 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x2676 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SUB PUSH2 0x26D7 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF AND SWAP2 PUSH2 0x26BB DUP4 PUSH2 0x3FF7 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x2719 DUP3 DUP3 PUSH2 0x3E97 JUMP JUMPDEST POP DUP10 PUSH32 0x52A608B3303A48862D07A73D82FA221318C0027FBBCFB1B2329BFACE3F19FF2B DUP11 DUP11 DUP5 PUSH1 0x40 MLOAD PUSH2 0x274E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x400E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 MLOAD MLOAD GT PUSH2 0x2779 JUMPI POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278D DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x2DA8 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x279C SWAP2 SWAP1 PUSH2 0x403D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH2 0x27AB SWAP1 DUP3 PUSH2 0x2E9C JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x27BF PUSH1 0x2 DUP3 PUSH2 0x403D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH2 0x27CE SWAP1 DUP3 PUSH2 0x2E9C JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x27E2 PUSH1 0x2 DUP3 PUSH2 0x403D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH2 0x27F1 SWAP1 DUP3 PUSH2 0x2EC4 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x2807 PUSH1 0x4 DUP3 PUSH2 0x403D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2819 SWAP1 DUP4 PUSH2 0x2E9C JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 POP PUSH2 0x282A PUSH1 0x2 DUP4 PUSH2 0x403D JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 POP PUSH2 0x283D DUP2 DUP4 PUSH2 0x403D JUMP JUMPDEST PUSH1 0xC0 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x136A PUSH2 0x2A1A JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2885 JUMPI PUSH2 0x1D9C DUP4 PUSH2 0x2EEE JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x28DF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x28DC SWAP2 DUP2 ADD SWAP1 PUSH2 0x3F9A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2951 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x29E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST POP PUSH2 0x1D9C DUP4 DUP4 DUP4 PUSH2 0x2FB9 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x14 EQ PUSH2 0x2A02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 ADD MLOAD PUSH13 0x1000000000000000000000000 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1882 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2AEE JUMPI PUSH2 0x2AEE PUSH2 0x379D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B21 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2B0C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2CA4 JUMPI DUP5 ISZERO PUSH2 0x2BEC JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x2B49 JUMPI PUSH2 0x2B49 PUSH2 0x3E46 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2B5B SWAP2 SWAP1 PUSH2 0x4050 JUMP JUMPDEST PUSH2 0x2B6A SWAP2 PUSH1 0x24 SWAP2 PUSH1 0x4 SWAP2 PUSH2 0x4097 JUMP JUMPDEST PUSH2 0x2B73 SWAP2 PUSH2 0x40C1 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 EQ PUSH2 0x2BEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D756C746963616C6C3A20416C6C207265636F726473206D7573742068617665 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2061206D61746368696E67206E616D6568617368000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x2C02 JUMPI PUSH2 0x2C02 PUSH2 0x3E46 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2C14 SWAP2 SWAP1 PUSH2 0x4050 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C22 SWAP3 SWAP2 SWAP1 PUSH2 0x3C93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2C5D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2C62 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2C71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2C84 JUMPI PUSH2 0x2C84 PUSH2 0x3E46 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP DUP1 DUP1 PUSH2 0x2C9C SWAP1 PUSH2 0x40DF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2B27 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x14 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP PUSH13 0x1000000000000000000000000 SWAP3 SWAP1 SWAP3 MUL PUSH1 0x20 DUP4 ADD MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2D62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x1882 PUSH2 0x2FE4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xC869023300000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x306A JUMP JUMPDEST PUSH1 0x0 DUP2 JUMPDEST DUP4 MLOAD DUP2 LT PUSH2 0x2DBC JUMPI PUSH2 0x2DBC PUSH2 0x40F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DC8 DUP6 DUP4 PUSH2 0x30A8 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH2 0x2DD8 DUP2 PUSH1 0x1 PUSH2 0x403D JUMP JUMPDEST PUSH2 0x2DE2 SWAP1 DUP4 PUSH2 0x403D JUMP JUMPDEST SWAP2 POP DUP1 PUSH1 0x0 SUB PUSH2 0x2DF2 JUMPI POP PUSH2 0x2DF8 JUMP JUMPDEST POP PUSH2 0x2DAC JUMP JUMPDEST PUSH2 0x1DAE DUP4 DUP3 PUSH2 0x3C80 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x2E11 DUP4 DUP6 PUSH2 0x403D JUMP JUMPDEST GT ISZERO PUSH2 0x2E1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2E37 JUMPI PUSH2 0x2E37 PUSH2 0x379D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2E61 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP7 DUP7 ADD ADD PUSH2 0xEC7 DUP3 DUP3 DUP8 PUSH2 0x30CC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E86 DUP5 DUP5 DUP5 PUSH2 0x3122 JUMP JUMPDEST PUSH2 0x2E91 DUP8 DUP8 DUP6 PUSH2 0x3122 JUMP JUMPDEST EQ SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2EAC DUP4 PUSH1 0x2 PUSH2 0x403D JUMP JUMPDEST GT ISZERO PUSH2 0x2EB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x2 ADD MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2ED4 DUP4 PUSH1 0x4 PUSH2 0x403D JUMP JUMPDEST GT ISZERO PUSH2 0x2EDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x4 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x2F6B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2FC2 DUP4 PUSH2 0x3146 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x2FCF JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x1D9C JUMPI PUSH2 0x2FDE DUP4 DUP4 PUSH2 0x3186 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3061 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x1882 CALLER PUSH2 0x2A74 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x691F343100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x31AB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x30BC JUMPI PUSH2 0x30BC PUSH2 0x3E46 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x3104 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH2 0x30E3 PUSH1 0x20 DUP5 PUSH2 0x403D JUMP JUMPDEST SWAP3 POP PUSH2 0x30F0 PUSH1 0x20 DUP4 PUSH2 0x403D JUMP JUMPDEST SWAP2 POP PUSH2 0x30FD PUSH1 0x20 DUP3 PUSH2 0x3C80 JUMP JUMPDEST SWAP1 POP PUSH2 0x30CC JUMP JUMPDEST SWAP1 MLOAD DUP3 MLOAD PUSH1 0x20 SWAP3 SWAP1 SWAP3 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP2 AND OR SWAP1 MSTORE JUMP JUMPDEST DUP3 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x3131 DUP4 DUP6 PUSH2 0x403D JUMP JUMPDEST GT ISZERO PUSH2 0x313C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x314F DUP2 PUSH2 0x2EEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1398 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x410F PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x31E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x124A319C00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x3261 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x3206 SWAP2 SWAP1 PUSH2 0x3C4E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3241 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3246 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3257 DUP7 DUP4 DUP4 DUP8 PUSH2 0x32D3 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xA8FA568200000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x32C4 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x5C98042B00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x334C JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3342 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x333B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x333B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1265 JUMP JUMPDEST POP DUP2 PUSH2 0x1DAE JUMP JUMPDEST PUSH2 0x1DAE DUP4 DUP4 PUSH2 0x338A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xBC1C58D100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH2 0x33B4 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x339A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1265 SWAP2 SWAP1 PUSH2 0x3890 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x3B3B57DE00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x3417 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xF1CB7E0600000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x2203AB5600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xD700FF3300000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH2 0x943 DUP3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x4FBF043300000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x943 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x943 JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x34ED SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x34FD JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x136A SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x352B JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3517 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x3547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x355E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1398 DUP3 PUSH2 0x352F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3579 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3591 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x35BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x35DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35E8 DUP7 DUP3 DUP8 ADD PUSH2 0x3567 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x360D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x362C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3638 DUP10 DUP4 DUP11 ADD PUSH2 0x3567 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x365E DUP9 DUP3 DUP10 ADD PUSH2 0x3567 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3682 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x3692 PUSH1 0x20 DUP5 ADD PUSH2 0x352F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x36AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x36D8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x36C0 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x36F9 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x36BD JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1DAE PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x36E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x373B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x136A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3792 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1398 DUP2 PUSH2 0x376B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x37C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x37DF JUMPI PUSH2 0x37DF PUSH2 0x379D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x3807 JUMPI PUSH2 0x3807 PUSH2 0x379D JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x3820 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x385E DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x387A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3886 DUP6 DUP3 DUP7 ADD PUSH2 0x37B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1398 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x36E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x38B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x38DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38EA DUP8 DUP3 DUP9 ADD PUSH2 0x3567 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x390B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3930 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x393C DUP7 DUP3 DUP8 ADD PUSH2 0x37B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3974 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP2 POP PUSH2 0x3692 PUSH1 0x20 DUP5 ADD PUSH2 0x3946 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x39A9 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP2 POP PUSH2 0x39B7 PUSH1 0x40 DUP6 ADD PUSH2 0x3946 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x39F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3A15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3A20 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x39F5 DUP2 PUSH2 0x376B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3A49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AB2 DUP6 DUP3 DUP7 ADD PUSH2 0x3A37 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3B13 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x3B01 DUP6 DUP4 MLOAD PUSH2 0x36E1 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3AE5 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3B45 DUP2 PUSH2 0x376B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3B65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35E8 DUP7 DUP3 DUP8 ADD PUSH2 0x3A37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3BA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x3BB4 PUSH1 0x20 DUP6 ADD PUSH2 0x352F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x39F5 DUP2 PUSH2 0x376B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3BD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3BE2 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3B45 DUP2 PUSH2 0x376B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3C08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3C13 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3C23 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x3C33 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x3C43 DUP2 PUSH2 0x376B JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3C60 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x36BD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x943 JUMPI PUSH2 0x943 PUSH2 0x3C6A JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3CB7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3CD7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1D9C JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x3D04 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D23 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3D10 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x3D43 JUMPI PUSH2 0x3D43 PUSH2 0x379D JUMP JUMPDEST PUSH2 0x3D57 DUP4 PUSH2 0x3D51 DUP4 SLOAD PUSH2 0x3CA3 JUMP JUMPDEST DUP4 PUSH2 0x3CDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3D8B JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x3D73 JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x19DD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3DBC JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x3D9C JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x3DD9 JUMPI PUSH1 0x0 NOT PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3E28 PUSH1 0x40 DUP4 ADD DUP7 DUP9 PUSH2 0x3DEB JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3E3B DUP2 DUP6 DUP8 PUSH2 0x3DEB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1DAE PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x3DEB JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x3E8D JUMPI PUSH2 0x3E8D PUSH2 0x3C6A JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EB1 JUMPI PUSH2 0x3EB1 PUSH2 0x379D JUMP JUMPDEST PUSH2 0x3EC5 DUP2 PUSH2 0x3EBF DUP5 SLOAD PUSH2 0x3CA3 JUMP JUMPDEST DUP5 PUSH2 0x3CDD JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3EFA JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3EE2 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x3D23 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3F29 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x3F0A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x3F47 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3F6A PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x36E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3257 DUP2 DUP6 DUP8 PUSH2 0x3DEB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1398 DUP2 PUSH2 0x376B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND DUP1 PUSH2 0x3FC7 JUMPI PUSH2 0x3FC7 PUSH2 0x3C6A JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3FE4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x36E1 JUMP JUMPDEST SWAP1 POP PUSH2 0xFFFF DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x3E8D JUMPI PUSH2 0x3E8D PUSH2 0x3C6A JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4021 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x36E1 JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x20 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3257 DUP2 DUP6 PUSH2 0x36E1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x943 JUMPI PUSH2 0x943 PUSH2 0x3C6A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x4067 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4082 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x40A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x40B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x20 DUP4 LT ISZERO PUSH2 0x943 JUMPI PUSH1 0x0 NOT PUSH1 0x20 DUP5 SWAP1 SUB PUSH1 0x3 SHL SHL AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x40F1 JUMPI PUSH2 0x40F1 PUSH2 0x3C6A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220100994 PC PUSH9 0x4FB48AD38C646845DE 0x2E DUP3 0xB4 PUSH24 0xA5A9F6590E8C199E0205CAF4BFBB64736F6C634300081100 CALLER ","sourceMap":"833:4654:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5035:450;;;;;;;;;;-1:-1:-1;5035:450:20;;;;;:::i;:::-;;:::i;:::-;;;592:14:46;;585:22;567:41;;555:2;540:18;5035:450:20;;;;;;;;2069:1760:25;;;;;;;;;;-1:-1:-1;2069:1760:25;;;;;:::i;:::-;;:::i;:::-;;549:263:40;;;;;;;;;;-1:-1:-1;549:263:40;;;;;:::i;:::-;;:::i;1726:1150:37:-;;;;;;;;;;-1:-1:-1;1726:1150:37;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2666:55:46;;;2648:74;;2636:2;2621:18;1726:1150:37;2502:226:46;1253:643:22;;;;;;;;;;-1:-1:-1;1253:643:22;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;603:241:39:-;;;;;;;;;;-1:-1:-1;603:241:39;;;;;:::i;:::-;;:::i;505:230:24:-;;;;;;;;;;-1:-1:-1;505:230:24;;;;;:::i;:::-;;:::i;662:164:21:-;;;;;;;;;;-1:-1:-1;662:164:21;;;;;:::i;:::-;;:::i;3408:195:7:-;;;;;;;;;;-1:-1:-1;3408:195:7;;;;;:::i;:::-;;:::i;1260:35:20:-;;;;;;;;;;-1:-1:-1;1260:35:20;;;;-1:-1:-1;;;;;1260:35:20;;;931:260:23;;;;;;;;;;-1:-1:-1;931:260:23;;;;;:::i;:::-;;:::i;1203:14:20:-;;;;;;;;;;-1:-1:-1;1203:14:20;;;;-1:-1:-1;;;;;1203:14:20;;;4678:223:25;;;;;;;;;;-1:-1:-1;4678:223:25;;;;;:::i;:::-;4780:4;4833:20;;;:14;:20;;;;;;;;;;;4804:50;;:28;:50;;;;;:56;;;;;;;;;:84;;;;;;;;;;;:89;;;4678:223;3922:220:7;;;;;;:::i;:::-;;:::i;3027:131::-;;;;;;;;;;;;;:::i;:::-;;;6987:25:46;;;6975:2;6960:18;3027:131:7;6841:177:46;1029:200:40;;;;;;;;;;-1:-1:-1;1029:200:40;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5680:174:25:-;;;;;;;;;;-1:-1:-1;5680:174:25;;;;;:::i;:::-;;:::i;568:364:22:-;;;;;;;;;;-1:-1:-1;568:364:22;;;;;:::i;:::-;;:::i;1301:38:20:-;;;;;;;;;;-1:-1:-1;1301:38:20;;;;-1:-1:-1;;;;;1301:38:20;;;881:166:38;;;;;;;;;;-1:-1:-1;881:166:38;;;;;:::i;:::-;;:::i;2085:101:1:-;;;;;;;;;;;;;:::i;456:225:38:-;;;;;;;;;;-1:-1:-1;456:225:38;;;;;:::i;:::-;;:::i;1197:361:23:-;;;;;;;;;;-1:-1:-1;1197:361:23;;;;;:::i;:::-;;:::i;1462:85:1:-;;;;;;;;;;-1:-1:-1;1534:6:1;;-1:-1:-1;;;;;1534:6:1;1462:85;;3246:319:20;;;;;;;;;;-1:-1:-1;3246:319:20;;;;;:::i;:::-;;:::i;3897:283::-;;;;;;;;;;-1:-1:-1;3897:283:20;;;;;:::i;:::-;;:::i;1223:31::-;;;;;;;;;;-1:-1:-1;1223:31:20;;;;-1:-1:-1;;;;;1223:31:20;;;4231:233:25;;;;;;;;;;-1:-1:-1;4231:233:25;;;;;:::i;:::-;;:::i;4288:189:20:-;;;;;;;;;;-1:-1:-1;4288:189:20;;;;;:::i;:::-;-1:-1:-1;;;;;4432:22:20;;;4409:4;4432:22;;;:15;:22;;;;;;;;:28;;;;;;;;;:38;;;;;;;;;;;;;;4288:189;1329:157:19;;;;;;;;;;-1:-1:-1;1329:157:19;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;902:173:24:-;;;;;;;;;;-1:-1:-1;902:173:24;;;;;:::i;:::-;;:::i;1149:326:39:-;;;;;;;;;;-1:-1:-1;1149:326:39;;;;;:::i;:::-;1233:9;1295:20;;;:14;:20;;;;;;;;;;;1346:41;;:19;:41;;;;;:47;;;;;;;:49;;1295:20;1409:49;;;;1346;;1149:326;;;;;12780:25:46;;;12836:2;12821:18;;12814:34;;;;12753:18;1149:326:39;12606:248:46;5121:405:25;;;;;;;;;;-1:-1:-1;5121:405:25;;;;;:::i;:::-;;:::i;610:162:23:-;;;;;;;;;;-1:-1:-1;610:162:23;;;;;:::i;:::-;;:::i;239:48:21:-;;;;;;;;;;-1:-1:-1;239:48:21;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13353:18:46;13341:31;;;13323:50;;13311:2;13296:18;239:48:21;13179:200:46;1136:187:19;;;;;;;;;;-1:-1:-1;1136:187:19;;;;;:::i;:::-;;:::i;769:320:37:-;;;;;;;;;;-1:-1:-1;769:320:37;;;;;:::i;:::-;;:::i;3632:171:20:-;;;;;;;;;;-1:-1:-1;3632:171:20;;;;;:::i;:::-;-1:-1:-1;;;;;3759:27:20;;;3736:4;3759:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3632:171;1564:203:23;;;;;;;;;;-1:-1:-1;1564:203:23;;;;;:::i;:::-;;:::i;2335:198:1:-;;;;;;;;;;-1:-1:-1;2335:198:1;;;;;:::i;:::-;;:::i;2516:547:20:-;;;;;;;;;;-1:-1:-1;2516:547:20;;;;;:::i;:::-;;:::i;5035:450::-;5415:4;5442:36;5466:11;5442:23;:36::i;:::-;5435:43;5035:450;-1:-1:-1;;5035:450:20:o;2069:1760:25:-;2177:4;425:18:21;438:4;425:12;:18::i;:::-;417:27;;;;;;2193:15:25::1;2348:20:::0;;;:14:::1;:20;::::0;;;;;;;;2490:15;;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;;2193;;2250:17:::1;::::0;;;2193:15;;2348:20:::1;::::0;;::::1;::::0;2193:15;;2490:18:::1;::::0;2193:15;;2490:4;;;;;;:15;::::1;:4:::0;;;;:15;::::1;;::::0;::::1;::::0;;;;-1:-1:-1;2490:15:25;;:18;-1:-1:-1;;2490:15:25::1;:18:::0;-1:-1:-1;2490:18:25:i:1;:::-;2457:51;;2439:1090;4570:9:15::0;;:16;4555:11;;;;:31;;2439:1090:25::1;;2588:8;:13;;2600:1;2588:13:::0;2584:935:::1;;2632:4;:12;;;2621:23;;2669:11;:4;:9;:11::i;:::-;2662:18;;2736:4;2719:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;2709:33;;;;;;2698:44;;2774:12;:4;:10;:12::i;:::-;2760:27;;2584:935;;;2826:20;2849:11;:4;:9;:11::i;:::-;2826:34;;2894:4;:12;;;2882:24;;:8;:24;;;;:49;;;-1:-1:-1::0;2911:20:25::1;:4:::0;2923:7;2911:11:::1;:20::i;:::-;2910:21;2882:49;2878:627;;;2955:311;2992:4;3022;3052:8;3086:4;;2955:311;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;;;3148:11:25::1;::::0;::::1;::::0;3116:6;;-1:-1:-1;3148:20:25::1;::::0;3116:6;;3148:20:::1;:::i;:::-;3194:12:::0;;:17;3237:7;2955:11:::1;:311::i;:::-;3299:4;:12;;;3288:23;;3342:4;:11;;;3333:20;;3382:7;3375:14;;3432:4;3422:15;;;;;;3411:26;;3473:12;:4;:10;:12::i;:::-;3459:27;;2878:627;2808:711;2584:935;2548:11;:4;:9;:11::i;:::-;2439:1090;;;-1:-1:-1::0;3542:11:25;;:15;3538:285:::1;;3573:239;3602:4;3624;3646:8;3672:4;;3573:239;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;3694:6:25;;-1:-1:-1;3718:20:25::1;::::0;-1:-1:-1;3694:6:25;;-1:-1:-1;3718:4:25;:20:::1;:::i;:::-;3756:12:::0;;:17;3791:7;3573:11:::1;:239::i;:::-;2183:1646;;;;;;2069:1760:::0;;;;:::o;549:263:40:-;682:4;425:18:21;438:4;425:12;:18::i;:::-;417:27;;;;;;698:39:40::1;716:20:::0;;;:14:::1;:20;::::0;;;;;;;;::::1;;698:39:::0;;:17:::1;:39:::0;;;;;:45;;;;;;;;;;:50;;751:5;;;;698:50:::1;::::0;744:3;;;;698:50:::1;:::i;:::-;;;;;;;;;;;;;:58;;;;;;;:::i;:::-;;789:3;;771:34;;;;;;;:::i;:::-;;;;;;;;783:4;771:34;794:3;;799:5;;771:34;;;;;;;;;:::i;:::-;;;;;;;;549:263:::0;;;;;;:::o;1726:1150:37:-;1852:7;1916:20;;;:14;:20;;;;;;;;;;;1893:44;;:22;:44;;;;;:72;;;;;;;;-1:-1:-1;;;;;;1893:85:37;;;;;;;;;;-1:-1:-1;;;;;1893:85:37;1992:25;;1988:74;;2040:11;-1:-1:-1;2033:18:37;;1988:74;2072:9;2084:10;2089:4;2084;:10::i;:::-;2072:22;-1:-1:-1;;;;;;2108:15:37;;2104:63;;2154:1;2139:17;;;;;;2104:63;2245:125;;-1:-1:-1;;;2245:125:37;;;19656:98:46;2178:12:37;;;;-1:-1:-1;;;;;2219:12:37;;;19629:18:46;;2245:125:37;;;-1:-1:-1;;2245:125:37;;;;;;;;;;;;;;;;-1:-1:-1;;;2245:125:37;;;2219:161;;;2245:125;2219:161;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2177:203;;;;2395:7;2394:8;:34;;;;2426:2;2406:10;:17;:22;2394:34;:57;;;;2432:10;2443:2;2432:14;;;;;;;;:::i;:::-;;;;;;;:19;2394:57;2390:152;;;2529:1;2514:17;;;;;;;;2390:152;2602:65;;-1:-1:-1;;;;;;19674:79:46;;2602:65:37;;;19656:98:46;-1:-1:-1;;;;;2576:12:37;;;19629:18:46;;2602:65:37;;;-1:-1:-1;;2602:65:37;;;;;;;;;;;;;;;;-1:-1:-1;;;2602:65:37;;;2576:101;;;2602:65;2576:101;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2552:125:37;;-1:-1:-1;2552:125:37;-1:-1:-1;2691:8:37;;;:34;;;2723:2;2703:10;:17;:22;2691:34;:57;;;;2729:10;2740:2;2729:14;;;;;;;;:::i;:::-;;;;;;;:19;2691:57;2687:164;;;2838:1;2823:17;;;;;;;;2687:164;-1:-1:-1;2868:1:37;;1726:1150;-1:-1:-1;;;;;1726:1150:37:o;1253:643:22:-;1364:7;1470:20;;;:14;:20;;;;;;;;;;;1440:60;;:16;:60;;;;;:66;;;;;;;;1373:12;;1470:20;1517:341;1587:12;1572:11;:27;1517:341;;1677:26;;;1676:33;;;;:83;;-1:-1:-1;1758:1:22;1729:19;;;;;;;;;;:26;;;;;:::i;:::-;;;:30;1676:83;1655:193;;;1800:11;1813:6;:19;1820:11;1813:19;;;;;;;;;;;1792:41;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1655:193;1629:1;1613:17;1517:341;;;;1876:1;1879:9;;;;;;;;;;;;1868:21;;;;;1253:643;;;;;;:::o;603:241:39:-;716:4;425:18:21;438:4;425:12;:18::i;:::-;417:27;;;;;;782:15:39::1;::::0;;;;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;-1:-1:-1;752:20:39;;;:14:::1;:20:::0;;;;;;::::1;;732:41:::0;;:19:::1;:41:::0;;;;;:47;;;;;;;;:65;;;;;752:20;732:65;;::::1;::::0;;;;812:25;;12780::46;;;12821:18;;;12814:34;;;752:20:39;;812:25:::1;::::0;12753:18:46;812:25:39::1;;;;;;;;603:241:::0;;;;:::o;505:230:24:-;614:4;425:18:21;438:4;425:12;:18::i;:::-;417:27;;;;;;630:40:24::1;649:20:::0;;;:14:::1;:20;::::0;;;;;;;;::::1;;630:40:::0;;:18:::1;:40:::0;;;;;:46;;;;;;;;:53:::1;679:4:::0;;630:46;:53:::1;:::i;:::-;;717:4;698:30;723:4;;698:30;;;;;;;:::i;662:164:21:-:0;724:4;425:18;438:4;425:12;:18::i;:::-;417:27;;;;;;740:20:::1;::::0;;;:14:::1;:20;::::0;;;;:22;;::::1;;::::0;::::1;::::0;::::1;:::i;:::-;::::0;;::::1;::::0;;;::::1;;::::0;;::::1;;::::0;;::::1;::::0;;::::1;;;::::0;;;-1:-1:-1;798:20:21;;;:14:::1;:20;::::0;;;;;;;;;777:42;;798:20;;;::::1;13323:50:46::0;;798:20:21;;-1:-1:-1;777:42:21::1;::::0;13296:18:46;777:42:21::1;;;;;;;662:164:::0;;:::o;3408:195:7:-;-1:-1:-1;;;;;1764:6:7;1747:23;1755:4;1747:23;1739:80;;;;-1:-1:-1;;;1739:80:7;;21829:2:46;1739:80:7;;;21811:21:46;21868:2;21848:18;;;21841:30;21907:34;21887:18;;;21880:62;21978:14;21958:18;;;21951:42;22010:19;;1739:80:7;;;;;;;;;1861:6;-1:-1:-1;;;;;1837:30:7;:20;1180:66:4;1557:65;-1:-1:-1;;;;;1557:65:4;;1478:151;1837:20:7;-1:-1:-1;;;;;1837:30:7;;1829:87;;;;-1:-1:-1;;;1829:87:7;;22242:2:46;1829:87:7;;;22224:21:46;22281:2;22261:18;;;22254:30;22320:34;22300:18;;;22293:62;22391:14;22371:18;;;22364:42;22423:19;;1829:87:7;22040:408:46;1829:87:7;3489:36:::1;3507:17;3489;:36::i;:::-;3576:12;::::0;;3586:1:::1;3576:12:::0;;;::::1;::::0;::::1;::::0;;;3535:61:::1;::::0;3557:17;;3576:12;3535:21:::1;:61::i;:::-;3408:195:::0;:::o;931:260:23:-;1011:15;1038:14;1055:25;1060:4;291:2;1055:4;:25::i;:::-;1038:42;;1094:1;:8;1106:1;1094:13;1090:61;;-1:-1:-1;1138:1:23;;931:260;-1:-1:-1;;931:260:23:o;1090:61::-;1167:17;1182:1;1167:14;:17::i;:::-;1160:24;931:260;-1:-1:-1;;;931:260:23:o;3922:220:7:-;-1:-1:-1;;;;;1764:6:7;1747:23;1755:4;1747:23;1739:80;;;;-1:-1:-1;;;1739:80:7;;21829:2:46;1739:80:7;;;21811:21:46;21868:2;21848:18;;;21841:30;21907:34;21887:18;;;21880:62;21978:14;21958:18;;;21951:42;22010:19;;1739:80:7;21627:408:46;1739:80:7;1861:6;-1:-1:-1;;;;;1837:30:7;:20;1180:66:4;1557:65;-1:-1:-1;;;;;1557:65:4;;1478:151;1837:20:7;-1:-1:-1;;;;;1837:30:7;;1829:87;;;;-1:-1:-1;;;1829:87:7;;22242:2:46;1829:87:7;;;22224:21:46;22281:2;22261:18;;;22254:30;22320:34;22300:18;;;22293:62;22391:14;22371:18;;;22364:42;22423:19;;1829:87:7;22040:408:46;1829:87:7;4037:36:::1;4055:17;4037;:36::i;:::-;4083:52;4105:17;4124:4;4130;4083:21;:52::i;:::-;3922:220:::0;;:::o;3027:131::-;3105:7;2190:4;-1:-1:-1;;;;;2199:6:7;2182:23;;2174:92;;;;-1:-1:-1;;;2174:92:7;;22655:2:46;2174:92:7;;;22637:21:46;22694:2;22674:18;;;22667:30;22733:34;22713:18;;;22706:62;22804:26;22784:18;;;22777:54;22848:19;;2174:92:7;22453:420:46;2174:92:7;-1:-1:-1;1180:66:4::1;3027:131:7::0;:::o;1029:200:40:-;1172:39;1190:20;;;:14;:20;;;;;;;;;;;1172:39;;:17;:39;;;;;:45;;;;;;;;;;:50;;1140:13;;1172:45;:50;;1218:3;;;;1172:50;:::i;:::-;;;;;;;;;;;;;1165:57;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1029:200;;;;;:::o;5680:174:25:-;5797:44;5820:20;;;:14;:20;;;;;;;;;;;5797:44;;:22;:44;;;;;:50;;;;;;;;5790:57;;5766:12;;5797:50;5790:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5680:174;;;:::o;568:364:22:-;698:4;425:18:21;438:4;425:12;:18::i;:::-;417:27;;;;;;788:11:22;769:15:::1;783:1;788:11:::0;769:15:::1;:::i;:::-;768:31;767:38:::0;759:47:::1;;;::::0;::::1;;817:38;834:20:::0;;;:14:::1;:20;::::0;;;;;;;;::::1;;817:38:::0;;:16:::1;:38:::0;;;;;:44;;;;;;;;:57;;;;;;;;:64:::1;877:4:::0;;817:57;:64:::1;:::i;:::-;-1:-1:-1::0;896:29:22::1;::::0;913:11;;907:4;;896:29:::1;::::0;;;::::1;568:364:::0;;;;;:::o;881:166:38:-;995:39;1013:20;;;:14;:20;;;;;;;;;;;995:39;;:17;:39;;;;;:45;;;;;;;;988:52;;963:13;;995:45;988:52;;;:::i;2085:101:1:-;1355:13;:11;:13::i;:::-;2149:30:::1;2176:1;2149:18;:30::i;:::-;2085:101::o:0;456:225:38:-;562:4;425:18:21;438:4;425:12;:18::i;:::-;417:27;;;;;;578:39:38::1;596:20:::0;;;:14:::1;:20;::::0;;;;;;;;::::1;;578:39:::0;;:17:::1;:39:::0;;;;;:45;;;;;;;;:55:::1;626:7:::0;;578:45;:55:::1;:::i;:::-;;660:4;648:26;666:7;;648:26;;;;;;;:::i;1197:361:23:-:0;1318:4;425:18:21;438:4;425:12;:18::i;:::-;417:27;;;;;;1354:4:23::1;1339:33;1360:8;1370:1;1339:33;;;;;;;:::i;:::-;;;;;;;;291:2;1386:8;:25:::0;1382:97:::1;;1444:4;1432:36;1450:17;1465:1;1450:14;:17::i;:::-;1432:36;::::0;-1:-1:-1;;;;;2666:55:46;;;2648:74;;2636:2;2621:18;1432:36:23::1;;;;;;;1382:97;1488:43;1510:20:::0;;;:14:::1;:20;::::0;;;;;;;;::::1;;1488:43:::0;;:21:::1;:43:::0;;;;;:49;;;;;;;;:59;;;;;;;;:63:::1;1550:1:::0;1488:59;:63:::1;:::i;:::-;;1197:361:::0;;;;:::o;3246:319:20:-;-1:-1:-1;;;;;3346:22:20;;:10;:22;3325:110;;;;-1:-1:-1;;;3325:110:20;;24926:2:46;3325:110:20;;;24908:21:46;24965:2;24945:18;;;24938:30;25004:34;24984:18;;;24977:62;25075:11;25055:18;;;25048:39;25104:19;;3325:110:20;24724:405:46;3325:110:20;3465:10;3446:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;3446:40:20;;;;;;;;;;;;:51;;-1:-1:-1;;3446:51:20;;;;;;;;;;3512:46;;567:41:46;;;3446:40:20;;3465:10;3512:46;;540:18:46;3512:46:20;;;;;;;3246:319;;:::o;3897:283::-;-1:-1:-1;;;;;3988:22:20;;:10;:22;3980:67;;;;-1:-1:-1;;;3980:67:20;;25336:2:46;3980:67:20;;;25318:21:46;;;25355:18;;;25348:30;25414:34;25394:18;;;25387:62;25466:18;;3980:67:20;25134:356:46;3980:67:20;4074:10;4058:27;;;;:15;:27;;;;;;;;:33;;;;;;;;-1:-1:-1;;;;;4058:43:20;;;;;;;;;;;;:54;;-1:-1:-1;;4058:54:20;;;;;;;;;;4127:46;;2648:74:46;;;4058:54:20;:33;;4127:46;;2621:18:46;4127:46:20;;;;;;;3897:283;;;:::o;4231:233:25:-;4394:41;4414:20;;;:14;:20;;;;;;;;;;;4394:41;;:19;:41;;;;;:47;;;;;;;;:53;;;;;;;;:63;;;;;;;;;;4387:70;;4363:12;;4394:63;4387:70;;;:::i;1329:157:19:-;1410:22;1451:28;1470:1;1474:4;;1451:10;:28::i;902:173:24:-;1022:40;1041:20;;;:14;:20;;;;;;;;;;;1022:40;;:18;:40;;;;;:46;;;;;;;;1015:53;;991:12;;1022:46;1015:53;;;:::i;5121:405:25:-;5227:4;425:18:21;438:4;425:12;:18::i;:::-;417:27;;;;;;5243::25::1;5273:20:::0;;;:14:::1;:20;::::0;;;;;;;;::::1;;5326:44:::0;;;:22:::1;:44:::0;;;;;:72;;;;;;;;5303:95;;5273:20;;5243:27;5303:95:::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;5408:44:25::1;::::0;::::1;;::::0;;;:22:::1;:44;::::0;;;;;;;:50;;;;;;;;5303:95;;-1:-1:-1;5408:57:25::1;::::0;-1:-1:-1;5461:4:25;;5408:50;:57:::1;:::i;:::-;;5499:4;5480:39;5505:7;5514:4;;5480:39;;;;;;;;:::i;:::-;;;;;;;;5233:293;;5121:405:::0;;;;:::o;610:162:23:-;702:4;425:18:21;438:4;425:12;:18::i;:::-;417:27;;;;;;718:47:23::1;726:4;291:2;747:17;762:1;747:14;:17::i;718:47::-;610:162:::0;;;:::o;1136:187:19:-;1249:22;1290:26;1301:8;1311:4;;1290:10;:26::i;:::-;1283:33;1136:187;-1:-1:-1;;;;1136:187:19:o;769:320:37:-;904:4;425:18:21;438:4;425:12;:18::i;:::-;417:27;;;;;;920:44:37::1;943:20:::0;;;:14:::1;:20;::::0;;;;;;;;::::1;;920:44:::0;;:22:::1;:44:::0;;;;;:50;;;;;;;;-1:-1:-1;;;;;;920:85:37;::::1;::::0;;;;;;;;;;:99;;-1:-1:-1;;920:99:37::1;-1:-1:-1::0;;;;;920:99:37;::::1;::::0;;::::1;::::0;;;1034:48;;2648:74:46;;;943:20:37;;1034:48:::1;::::0;2621:18:46;1034:48:37::1;;;;;;;769:320:::0;;;;:::o;1564:203:23:-;1701:43;1723:20;;;:14;:20;;;;;;;;;;;1701:43;;:21;:43;;;;;:49;;;;;;;;:59;;;;;;;;1694:66;;1670:12;;1701:59;1694:66;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1564:203;;;;:::o;2335:198:1:-;1355:13;:11;:13::i;:::-;-1:-1:-1;;;;;2423:22:1;::::1;2415:73;;;::::0;-1:-1:-1;;;2415:73:1;;26107:2:46;2415:73:1::1;::::0;::::1;26089:21:46::0;26146:2;26126:18;;;26119:30;26185:34;26165:18;;;26158:62;26256:8;26236:18;;;26229:36;26282:19;;2415:73:1::1;25905:402:46::0;2415:73:1::1;2498:28;2517:8;2498:18;:28::i;2516:547:20:-:0;3279:19:6;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:6;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:6;1713:19:8;:23;;;3387:66:6;;-1:-1:-1;3436:12:6;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:6;;26514:2:46;3325:201:6;;;26496:21:46;26553:2;26533:18;;;26526:30;26592:34;26572:18;;;26565:62;26663:16;26643:18;;;26636:44;26697:19;;3325:201:6;26312:410:46;3325:201:6;3536:12;:16;;-1:-1:-1;;3536:16:6;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:6;;;;;3562:65;2707:16:20::1;:14;:16::i;:::-;2733:3;:10:::0;;-1:-1:-1;;;;;2733:10:20;;::::1;-1:-1:-1::0;;2733:10:20;;::::1;::::0;::::1;::::0;;;2753:11:::1;:28:::0;;;;::::1;::::0;;::::1;;::::0;;2791:20:::1;:44:::0;;;;::::1;::::0;;::::1;;::::0;;2845:23:::1;:50:::0;;;;::::1;::::0;;;::::1;;::::0;;2974:28:::1;::::0;-1:-1:-1;;;2974:28:20;;1130:66:::1;2974:28;::::0;::::1;6987:25:46::0;-1:-1:-1;;2733:10:20;2974:9:::1;::::0;6960:18:46;;2974:28:20::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3022:34;::::0;;;;3045:10:::1;3022:34;::::0;::::1;2648:74:46::0;2906:106:20;;-1:-1:-1;;;;;;3022:22:20;::::1;::::0;::::1;::::0;2621:18:46;;3022:34:20::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2697:366;3651:14:6::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:6;;;3721:14;;-1:-1:-1;27324:36:46;;3721:14:6;;27312:2:46;27297:18;3721:14:6;;;;;;;3269:483;2516:547:20;;;;:::o;1235:239:40:-;1334:4;-1:-1:-1;;;;;;1369:46:40;;1384:31;1369:46;;:98;;;1431:36;1455:11;1431:23;:36::i;4483:546:20:-;4598:20;;4551:4;;-1:-1:-1;;;;;4598:20:20;4584:10;:34;;:87;;-1:-1:-1;4648:23:20;;-1:-1:-1;;;;;4648:23:20;4634:10;:37;4584:87;4567:151;;;-1:-1:-1;4703:4:20;;4483:546;-1:-1:-1;4483:546:20:o;4567:151::-;4743:3;;:15;;-1:-1:-1;;;4743:15:20;;;;;6987:25:46;;;4727:13:20;;-1:-1:-1;;;;;4743:3:20;;:9;;6960:18:46;;4743:15:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4789:11;;4727:31;;-1:-1:-1;;;;;;4789:11:20;;;4772:29;;;;4768:102;;4825:11;;:34;;;;;;;;6987:25:46;;;-1:-1:-1;;;;;4825:11:20;;;;:19;;6960:18:46;;4825:34:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4817:42;;4768:102;-1:-1:-1;;;;;4898:19:20;;4907:10;4898:19;;:70;;-1:-1:-1;;;;;;3759:27:20;;3736:4;3759:27;;;:18;:27;;;;;;;;4957:10;3759:37;;;;;;;;;;4933:35;4898:124;;;-1:-1:-1;;;;;;4432:22:20;;4409:4;4432:22;;;:15;:22;;;;;;;;:28;;;;;;;;5011:10;4432:38;;;;;;;;;;4984;4288:189;4089:207:15;4189:21;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4189:21:15;4222:15;;;4247:14;;;:23;;;4280:9;4222:3;4280:4;:9::i;5587:225::-;5728:11;;;;5768:9;;5648:12;;5691:114;;5757:34;;5728:11;5757:10;:34::i;:::-;5691:9;;;:114;:19;:114::i;5989:245::-;6145:16;;;;6179:15;;;;6065:12;;6108:119;;6179:34;;6145:16;;6179:34;:::i;7146:223:42:-;7246:4;7296:5;:12;7281:4;:11;:27;:81;;;;;7324:38;7331:4;7337:1;7340:5;7347:1;7350:4;:11;7324:6;:38::i;6175:1113:25:-;6437:15;;;;;;6418:16;6484:28;:4;6499:6;6507:4;6484:14;:28::i;:::-;6462:50;;6526:12;6522:760;;;6575:28;;;;;;;:19;:28;;;;;;;;:34;;;;;;;;:44;;;;;;;;:54;;;;;;;;;;:61;;;;;:::i;:::-;:82;;-1:-1:-1;6554:206:25;;6690:37;;;;;;;:28;:37;;;;;;;;:43;;;;;;;;:53;;;;;;;;:55;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;6554:206;6781:28;;;;;;;:19;:28;;;;;;;;:34;;;;;;;;:44;;;;;;;;:54;;;;;;;;;;6773:63;;;:::i;:::-;6872:4;6855:38;6878:4;6884:8;6855:38;;;;;;;:::i;:::-;;;;;;;;6522:760;;;6945:28;;;;;;;:19;:28;;;;;;;;:34;;;;;;;;:44;;;;;;;;:54;;;;;;;;;;:61;;;;;:::i;:::-;;;7026:1;6945:82;6924:206;;7060:37;;;;;;;:28;:37;;;;;;;;:43;;;;;;;;:53;;;;;;;;:55;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;6924:206;7143:28;;;;;;;:19;:28;;;;;;;;:34;;;;;;;;:44;;;;;;;;:54;;;;;;;;;;:63;7200:6;7143:54;:63;:::i;:::-;;7242:4;7225:46;7248:4;7254:8;7264:6;7225:46;;;;;;;;:::i;:::-;;;;;;;;6408:880;;6175:1113;;;;;;;;:::o;4719:688:15:-;4795:15;;;;4781:11;;;:29;;;4839:9;;:16;-1:-1:-1;4820:68:15;;4719:688;:::o;4820:68::-;4923:11;4951:34;4962:4;:9;;;4973:4;:11;;;4951:10;:34::i;:::-;4937:4;:11;;;:48;;;;:::i;:::-;5048:9;;4923:62;;-1:-1:-1;5048:25:15;;4923:62;5048:20;:25::i;:::-;5033:40;;:12;;;:40;5083:8;5090:1;5083:8;;:::i;:::-;5114:9;;5083:8;;-1:-1:-1;5114:25:15;;5083:8;5114:20;:25::i;:::-;5101:38;;:10;;;:38;5149:8;5156:1;5149:8;;:::i;:::-;5178:9;;5149:8;;-1:-1:-1;5178:25:15;;5149:8;5178:20;:25::i;:::-;5167:36;;:8;;;:36;5213:8;5220:1;5213:8;;:::i;:::-;5280:9;;5213:8;;-1:-1:-1;5258:19:15;;5280:25;;5213:8;5280:20;:25::i;:::-;5258:47;;;-1:-1:-1;5315:8:15;5322:1;5315:8;;:::i;:::-;5333:16;;;:22;;;5315:8;-1:-1:-1;5383:17:15;5389:11;5315:8;5383:17;:::i;:::-;5365:15;;;;:35;;;;-1:-1:-1;;4719:688:15:o;3112:66:20:-;1355:13:1;:11;:13::i;2841:944:4:-;839:66;3257:59;;;3253:526;;;3332:37;3351:17;3332:18;:37::i;3253:526::-;3433:17;-1:-1:-1;;;;;3404:61:4;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3404:63:4;;;;;;;;-1:-1:-1;;3404:63:4;;;;;;;;;;;;:::i;:::-;;;3400:302;;3631:56;;-1:-1:-1;;;3631:56:4;;29041:2:46;3631:56:4;;;29023:21:46;29080:2;29060:18;;;29053:30;29119:34;29099:18;;;29092:62;29190:16;29170:18;;;29163:44;29224:19;;3631:56:4;28839:410:46;3400:302:4;1180:66;3517:28;;3509:82;;;;-1:-1:-1;;;3509:82:4;;29456:2:46;3509:82:4;;;29438:21:46;29495:2;29475:18;;;29468:30;29534:34;29514:18;;;29507:62;29605:11;29585:18;;;29578:39;29634:19;;3509:82:4;29254:405:46;3509:82:4;3468:138;3715:53;3733:17;3752:4;3758:9;3715:17;:53::i;2083:219:23:-;2160:17;2197:1;:8;2209:2;2197:14;2189:23;;;;;;-1:-1:-1;2267:2:23;2260:10;2254:17;2273:12;2250:36;;;2083:219::o;1620:130:1:-;1534:6;;-1:-1:-1;;;;;1534:6:1;965:10:9;1683:23:1;1675:68;;;;-1:-1:-1;;;1675:68:1;;29866:2:46;1675:68:1;;;29848:21:46;;;29885:18;;;29878:30;29944:34;29924:18;;;29917:62;29996:18;;1675:68:1;29664:356:46;2687:187:1;2779:6;;;-1:-1:-1;;;;;2795:17:1;;;-1:-1:-1;;2795:17:1;;;;;;;2827:40;;2779:6;;;2795:17;2779:6;;2827:40;;2760:16;;2827:40;2750:124;2687:187;:::o;218:722:19:-;319:22;375:4;363:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;353:34;;402:9;397:513;417:15;;;397:513;;;457:22;;453:267;;499:18;528:4;;533:1;528:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:13;;538:2;;536:1;;528:13;:::i;:::-;520:22;;;:::i;:::-;499:43;;603:8;589:10;:22;560:145;;;;-1:-1:-1;;;560:145:19;;31349:2:46;560:145:19;;;31331:21:46;31388:2;31368:18;;;31361:30;31427:34;31407:18;;;31400:62;31498:22;31478:18;;;31471:50;31538:19;;560:145:19;31147:416:46;560:145:19;481:239;453:267;734:12;;779:4;815;;820:1;815:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;771:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;733:103;;;;858:7;850:16;;;;;;893:6;880:7;888:1;880:10;;;;;;;;:::i;:::-;;;;;;:19;;;;439:471;;434:3;;;;;:::i;:::-;;;;397:513;;;;218:722;;;;;:::o;2308:190:23:-;2396:13;;;2406:2;2396:13;;;;;;;;;2366:14;;2396:13;;;;;;;;-1:-1:-1;;;2468:12:23;2461:20;;;;2456:2;2449:10;;2442:40;-1:-1:-1;2461:20:23;2308:190::o;1024:95:1:-;5374:13:6;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:6;;32186:2:46;5366:69:6;;;32168:21:46;32225:2;32205:18;;;32198:30;32264:34;32244:18;;;32237:62;32335:13;32315:18;;;32308:41;32366:19;;5366:69:6;31984:407:46;5366:69:6;1086:26:1::1;:24;:26::i;1481:241:39:-:0;1580:4;-1:-1:-1;;;;;;1615:48:39;;1630:33;1615:48;;:100;;;1679:36;1703:11;1679:23;:36::i;579:402:15:-;679:7;712:6;728:218;768:4;:11;762:3;:17;755:25;;;;:::i;:::-;794:16;813:19;:4;828:3;813:14;:19::i;:::-;794:38;;;-1:-1:-1;853:12:15;794:38;864:1;853:12;:::i;:::-;846:19;;;;:::i;:::-;;;883:8;895:1;883:13;879:57;;916:5;;;879:57;741:205;728:218;;;962:12;968:6;962:3;:12;:::i;11273:436:42:-;11441:11;;11393:12;;11425;11434:3;11425:6;:12;:::i;:::-;:27;;11417:36;;;;;;11464:16;11493:3;11483:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11483:14:42;-1:-1:-1;11464:33:42;-1:-1:-1;11591:2:42;11582:12;;;;11614:26;;;;11659:22;11582:12;11614:26;11677:3;11659:6;:22::i;5311:264::-;5485:4;5537:31;5544:5;5551:11;5564:3;5537:6;:31::i;:::-;5508:25;5515:4;5521:6;5529:3;5508:6;:25::i;:::-;:60;;5311:264;-1:-1:-1;;;;;;5311:264:42:o;8012:248::-;8150:11;;8109:10;;8139:7;:3;8145:1;8139:7;:::i;:::-;:22;;8131:31;;;;;;-1:-1:-1;8212:22:42;8226:1;8212:22;8206:29;8237:6;8202:42;;8012:248::o;8509:252::-;8647:11;;8606:10;;8636:7;:3;8642:1;8636:7;:::i;:::-;:22;;8628:31;;;;;;-1:-1:-1;8709:22:42;8723:1;8709:22;8703:29;8734:10;8699:46;;8509:252::o;1720:281:4:-;-1:-1:-1;;;;;1713:19:8;;;1793:106:4;;;;-1:-1:-1;;;1793:106:4;;32787:2:46;1793:106:4;;;32769:21:46;32826:2;32806:18;;;32799:30;32865:34;32845:18;;;32838:62;32936:15;32916:18;;;32909:43;32969:19;;1793:106:4;32585:409:46;1793:106:4;1180:66;1909:85;;-1:-1:-1;;1909:85:4;-1:-1:-1;;;;;1909:85:4;;;;;;;;;;1720:281::o;2393:276::-;2501:29;2512:17;2501:10;:29::i;:::-;2558:1;2544:4;:11;:15;:28;;;;2563:9;2544:28;2540:123;;;2588:64;2628:17;2647:4;2588:39;:64::i;:::-;;2393:276;;;:::o;1125:111:1:-;5374:13:6;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:6;;32186:2:46;5366:69:6;;;32168:21:46;32225:2;32205:18;;;32198:30;32264:34;32244:18;;;32237:62;32335:13;32315:18;;;32308:41;32366:19;;5366:69:6;31984:407:46;5366:69:6;1197:32:1::1;965:10:9::0;1197:18:1::1;:32::i;1053:239:38:-:0;1152:4;-1:-1:-1;;;;;;1187:46:38;;1202:31;1187:46;;:98;;;1249:36;1273:11;1249:23;:36::i;7616:147:42:-;7712:9;7746:4;7751:3;7746:9;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;7616:147:42;;;;:::o;10431:617::-;10574:2;10567:3;:9;10560:165;;10643:10;;10630:24;;10681:10;10689:2;10637:4;10681:10;:::i;:::-;;-1:-1:-1;10705:9:42;10712:2;10705:9;;:::i;:::-;;-1:-1:-1;10578:9:42;10585:2;10578:9;;:::i;:::-;;;10560:165;;;10889:10;;10948:11;;10815:2;:8;;;;10807:3;:17;-1:-1:-1;;10806:23:42;10901:9;;10885:26;;;10944:22;;10996:21;10983:35;;10431:617::o;409:274::-;573:11;;526;;557:12;566:3;557:6;:12;:::i;:::-;:27;;549:36;;;;;;-1:-1:-1;635:26:42;;649:2;635:26;625:42;;409:274::o;2107:152:4:-;2173:37;2192:17;2173:18;:37::i;:::-;2225:27;;-1:-1:-1;;;;;2225:27:4;;;;;;;;2107:152;:::o;6685:198:8:-;6768:12;6799:77;6820:6;6828:4;6799:77;;;;;;;;;;;;;;;;;:20;:77::i;2882:244:37:-;2981:4;-1:-1:-1;;;;;;3016:51:37;;3031:36;3016:51;;:103;;;3083:36;3107:11;3083:23;:36::i;7069:325:8:-;7210:12;7235;7249:23;7276:6;-1:-1:-1;;;;;7276:19:8;7296:4;7276:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7234:67;;;;7318:69;7345:6;7353:7;7362:10;7374:12;7318:26;:69::i;:::-;7311:76;7069:325;-1:-1:-1;;;;;;7069:325:8:o;5860:309:25:-;5959:4;-1:-1:-1;;;;;;5994:51:25;;6009:36;5994:51;;:116;;-1:-1:-1;;;;;;;6061:49:25;;6076:34;6061:49;5994:116;:168;;;;6126:36;6150:11;6126:23;:36::i;7682:628:8:-;7862:12;7890:7;7886:418;;;7917:10;:17;7938:1;7917:22;7913:286;;-1:-1:-1;;;;;1713:19:8;;;8124:60;;;;-1:-1:-1;;;8124:60:8;;33201:2:46;8124:60:8;;;33183:21:46;33240:2;33220:18;;;33213:30;33279:31;33259:18;;;33252:59;33328:18;;8124:60:8;32999:353:46;8124:60:8;-1:-1:-1;8219:10:8;8212:17;;7886:418;8260:33;8268:10;8280:12;8260:7;:33::i;1081:246:24:-;1180:4;-1:-1:-1;;;;;;1215:53:24;;1230:38;1215:53;;:105;;;1284:36;1308:11;1284:23;:36::i;8832:540:8:-;8991:17;;:21;8987:379;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;8987:379;9342:12;9335:20;;-1:-1:-1;;;9335:20:8;;;;;;;;:::i;1773:304:23:-;1872:4;-1:-1:-1;;;;;;1907:46:23;;1922:31;1907:46;;:111;;-1:-1:-1;;;;;;;1969:49:23;;1984:34;1969:49;1907:111;:163;;;;2034:36;2058:11;2001:4:22;-1:-1:-1;;;;;;2036:45:22;;2051:30;2036:45;;:97;;;2097:36;2121:11;931:4:21;-1:-1:-1;;;;;;966:53:21;;981:38;966:53;;:105;;;1035:36;1059:11;1591:4:19;-1:-1:-1;;;;;;1626:47:19;;1641:32;1626:47;;:99;;-1:-1:-1;;;;;;;;;;937:40:13;;;1689:36:19;829:155:13;-1:-1:-1;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:219:46:-;81:20;;-1:-1:-1;;;;;;130:78:46;;120:89;;110:117;;223:1;220;213:12;110:117;14:219;;;:::o;238:184::-;296:6;349:2;337:9;328:7;324:23;320:32;317:52;;;365:1;362;355:12;317:52;388:28;406:9;388:28;:::i;619:347::-;670:8;680:6;734:3;727:4;719:6;715:17;711:27;701:55;;752:1;749;742:12;701:55;-1:-1:-1;775:20:46;;818:18;807:30;;804:50;;;850:1;847;840:12;804:50;887:4;879:6;875:17;863:29;;939:3;932:4;923:6;915;911:19;907:30;904:39;901:59;;;956:1;953;946:12;971:477;1050:6;1058;1066;1119:2;1107:9;1098:7;1094:23;1090:32;1087:52;;;1135:1;1132;1125:12;1087:52;1171:9;1158:23;1148:33;;1232:2;1221:9;1217:18;1204:32;1259:18;1251:6;1248:30;1245:50;;;1291:1;1288;1281:12;1245:50;1330:58;1380:7;1371:6;1360:9;1356:22;1330:58;:::i;:::-;971:477;;1407:8;;-1:-1:-1;1304:84:46;;-1:-1:-1;;;;971:477:46:o;1453:787::-;1554:6;1562;1570;1578;1586;1639:2;1627:9;1618:7;1614:23;1610:32;1607:52;;;1655:1;1652;1645:12;1607:52;1691:9;1678:23;1668:33;;1752:2;1741:9;1737:18;1724:32;1775:18;1816:2;1808:6;1805:14;1802:34;;;1832:1;1829;1822:12;1802:34;1871:58;1921:7;1912:6;1901:9;1897:22;1871:58;:::i;:::-;1948:8;;-1:-1:-1;1845:84:46;-1:-1:-1;2036:2:46;2021:18;;2008:32;;-1:-1:-1;2052:16:46;;;2049:36;;;2081:1;2078;2071:12;2049:36;;2120:60;2172:7;2161:8;2150:9;2146:24;2120:60;:::i;:::-;1453:787;;;;-1:-1:-1;1453:787:46;;-1:-1:-1;2199:8:46;;2094:86;1453:787;-1:-1:-1;;;1453:787:46:o;2245:252::-;2312:6;2320;2373:2;2361:9;2352:7;2348:23;2344:32;2341:52;;;2389:1;2386;2379:12;2341:52;2425:9;2412:23;2402:33;;2454:37;2487:2;2476:9;2472:18;2454:37;:::i;:::-;2444:47;;2245:252;;;;;:::o;2733:248::-;2801:6;2809;2862:2;2850:9;2841:7;2837:23;2833:32;2830:52;;;2878:1;2875;2868:12;2830:52;-1:-1:-1;;2901:23:46;;;2971:2;2956:18;;;2943:32;;-1:-1:-1;2733:248:46:o;2986:250::-;3071:1;3081:113;3095:6;3092:1;3089:13;3081:113;;;3171:11;;;3165:18;3152:11;;;3145:39;3117:2;3110:10;3081:113;;;-1:-1:-1;;3228:1:46;3210:16;;3203:27;2986:250::o;3241:270::-;3282:3;3320:5;3314:12;3347:6;3342:3;3335:19;3363:76;3432:6;3425:4;3420:3;3416:14;3409:4;3402:5;3398:16;3363:76;:::i;:::-;3493:2;3472:15;-1:-1:-1;;3468:29:46;3459:39;;;;3500:4;3455:50;;3241:270;-1:-1:-1;;3241:270:46:o;3516:288::-;3691:6;3680:9;3673:25;3734:2;3729;3718:9;3714:18;3707:30;3654:4;3754:44;3794:2;3783:9;3779:18;3771:6;3754:44;:::i;3809:316::-;3886:6;3894;3902;3955:2;3943:9;3934:7;3930:23;3926:32;3923:52;;;3971:1;3968;3961:12;3923:52;-1:-1:-1;;3994:23:46;;;4064:2;4049:18;;4036:32;;-1:-1:-1;4115:2:46;4100:18;;;4087:32;;3809:316;-1:-1:-1;3809:316:46:o;4130:180::-;4189:6;4242:2;4230:9;4221:7;4217:23;4213:32;4210:52;;;4258:1;4255;4248:12;4210:52;-1:-1:-1;4281:23:46;;4130:180;-1:-1:-1;4130:180:46:o;4315:154::-;-1:-1:-1;;;;;4394:5:46;4390:54;4383:5;4380:65;4370:93;;4459:1;4456;4449:12;4474:247;4533:6;4586:2;4574:9;4565:7;4561:23;4557:32;4554:52;;;4602:1;4599;4592:12;4554:52;4641:9;4628:23;4660:31;4685:5;4660:31;:::i;5469:184::-;-1:-1:-1;;;5518:1:46;5511:88;5618:4;5615:1;5608:15;5642:4;5639:1;5632:15;5658:718;5700:5;5753:3;5746:4;5738:6;5734:17;5730:27;5720:55;;5771:1;5768;5761:12;5720:55;5807:6;5794:20;5833:18;5870:2;5866;5863:10;5860:36;;;5876:18;;:::i;:::-;5951:2;5945:9;5919:2;6005:13;;-1:-1:-1;;6001:22:46;;;6025:2;5997:31;5993:40;5981:53;;;6049:18;;;6069:22;;;6046:46;6043:72;;;6095:18;;:::i;:::-;6135:10;6131:2;6124:22;6170:2;6162:6;6155:18;6216:3;6209:4;6204:2;6196:6;6192:15;6188:26;6185:35;6182:55;;;6233:1;6230;6223:12;6182:55;6297:2;6290:4;6282:6;6278:17;6271:4;6263:6;6259:17;6246:54;6344:1;6337:4;6332:2;6324:6;6320:15;6316:26;6309:37;6364:6;6355:15;;;;;;5658:718;;;;:::o;6381:455::-;6458:6;6466;6519:2;6507:9;6498:7;6494:23;6490:32;6487:52;;;6535:1;6532;6525:12;6487:52;6574:9;6561:23;6593:31;6618:5;6593:31;:::i;:::-;6643:5;-1:-1:-1;6699:2:46;6684:18;;6671:32;6726:18;6715:30;;6712:50;;;6758:1;6755;6748:12;6712:50;6781:49;6822:7;6813:6;6802:9;6798:22;6781:49;:::i;:::-;6771:59;;;6381:455;;;;;:::o;7506:219::-;7655:2;7644:9;7637:21;7618:4;7675:44;7715:2;7704:9;7700:18;7692:6;7675:44;:::i;7952:545::-;8040:6;8048;8056;8064;8117:2;8105:9;8096:7;8092:23;8088:32;8085:52;;;8133:1;8130;8123:12;8085:52;8169:9;8156:23;8146:33;;8226:2;8215:9;8211:18;8198:32;8188:42;;8281:2;8270:9;8266:18;8253:32;8308:18;8300:6;8297:30;8294:50;;;8340:1;8337;8330:12;8294:50;8379:58;8429:7;8420:6;8409:9;8405:22;8379:58;:::i;:::-;7952:545;;;;-1:-1:-1;8456:8:46;-1:-1:-1;;;;7952:545:46:o;8502:456::-;8588:6;8596;8604;8657:2;8645:9;8636:7;8632:23;8628:32;8625:52;;;8673:1;8670;8663:12;8625:52;8709:9;8696:23;8686:33;;8766:2;8755:9;8751:18;8738:32;8728:42;;8821:2;8810:9;8806:18;8793:32;8848:18;8840:6;8837:30;8834:50;;;8880:1;8877;8870:12;8834:50;8903:49;8944:7;8935:6;8924:9;8920:22;8903:49;:::i;:::-;8893:59;;;8502:456;;;;;:::o;8963:160::-;9028:20;;9084:13;;9077:21;9067:32;;9057:60;;9113:1;9110;9103:12;9128:315;9193:6;9201;9254:2;9242:9;9233:7;9229:23;9225:32;9222:52;;;9270:1;9267;9260:12;9222:52;9309:9;9296:23;9328:31;9353:5;9328:31;:::i;:::-;9378:5;-1:-1:-1;9402:35:46;9433:2;9418:18;;9402:35;:::i;9448:383::-;9522:6;9530;9538;9591:2;9579:9;9570:7;9566:23;9562:32;9559:52;;;9607:1;9604;9597:12;9559:52;9643:9;9630:23;9620:33;;9703:2;9692:9;9688:18;9675:32;9716:31;9741:5;9716:31;:::i;:::-;9766:5;-1:-1:-1;9790:35:46;9821:2;9806:18;;9790:35;:::i;:::-;9780:45;;9448:383;;;;;:::o;10088:408::-;10164:6;10172;10180;10233:2;10221:9;10212:7;10208:23;10204:32;10201:52;;;10249:1;10246;10239:12;10201:52;10285:9;10272:23;10262:33;;10342:2;10331:9;10327:18;10314:32;10304:42;;10396:2;10385:9;10381:18;10368:32;10440:6;10433:5;10429:18;10422:5;10419:29;10409:57;;10462:1;10459;10452:12;10409:57;10485:5;10475:15;;;10088:408;;;;;:::o;10501:456::-;10578:6;10586;10594;10647:2;10635:9;10626:7;10622:23;10618:32;10615:52;;;10663:1;10660;10653:12;10615:52;10702:9;10689:23;10721:31;10746:5;10721:31;:::i;:::-;10771:5;-1:-1:-1;10823:2:46;10808:18;;10795:32;;-1:-1:-1;10879:2:46;10864:18;;10851:32;10892:33;10851:32;10892:33;:::i;10962:374::-;11032:8;11042:6;11096:3;11089:4;11081:6;11077:17;11073:27;11063:55;;11114:1;11111;11104:12;11063:55;-1:-1:-1;11137:20:46;;11180:18;11169:30;;11166:50;;;11212:1;11209;11202:12;11166:50;11249:4;11241:6;11237:17;11225:29;;11309:3;11302:4;11292:6;11289:1;11285:14;11277:6;11273:27;11269:38;11266:47;11263:67;;;11326:1;11323;11316:12;11341:455;11438:6;11446;11499:2;11487:9;11478:7;11474:23;11470:32;11467:52;;;11515:1;11512;11505:12;11467:52;11555:9;11542:23;11588:18;11580:6;11577:30;11574:50;;;11620:1;11617;11610:12;11574:50;11659:77;11728:7;11719:6;11708:9;11704:22;11659:77;:::i;:::-;11755:8;;11633:103;;-1:-1:-1;11341:455:46;-1:-1:-1;;;;11341:455:46:o;11801:800::-;11961:4;11990:2;12030;12019:9;12015:18;12060:2;12049:9;12042:21;12083:6;12118;12112:13;12149:6;12141;12134:22;12187:2;12176:9;12172:18;12165:25;;12249:2;12239:6;12236:1;12232:14;12221:9;12217:30;12213:39;12199:53;;12287:2;12279:6;12275:15;12308:1;12318:254;12332:6;12329:1;12326:13;12318:254;;;12425:2;12421:7;12409:9;12401:6;12397:22;12393:36;12388:3;12381:49;12453:39;12485:6;12476;12470:13;12453:39;:::i;:::-;12443:49;-1:-1:-1;12550:12:46;;;;12515:15;;;;12354:1;12347:9;12318:254;;;-1:-1:-1;12589:6:46;;11801:800;-1:-1:-1;;;;;;;11801:800:46:o;12859:315::-;12927:6;12935;12988:2;12976:9;12967:7;12963:23;12959:32;12956:52;;;13004:1;13001;12994:12;12956:52;13040:9;13027:23;13017:33;;13100:2;13089:9;13085:18;13072:32;13113:31;13138:5;13113:31;:::i;:::-;13163:5;13153:15;;;12859:315;;;;;:::o;13384:523::-;13490:6;13498;13506;13559:2;13547:9;13538:7;13534:23;13530:32;13527:52;;;13575:1;13572;13565:12;13527:52;13611:9;13598:23;13588:33;;13672:2;13661:9;13657:18;13644:32;13699:18;13691:6;13688:30;13685:50;;;13731:1;13728;13721:12;13685:50;13770:77;13839:7;13830:6;13819:9;13815:22;13770:77;:::i;13912:387::-;13988:6;13996;14004;14057:2;14045:9;14036:7;14032:23;14028:32;14025:52;;;14073:1;14070;14063:12;14025:52;14109:9;14096:23;14086:33;;14138:37;14171:2;14160:9;14156:18;14138:37;:::i;:::-;14128:47;;14225:2;14214:9;14210:18;14197:32;14238:31;14263:5;14238:31;:::i;14304:388::-;14372:6;14380;14433:2;14421:9;14412:7;14408:23;14404:32;14401:52;;;14449:1;14446;14439:12;14401:52;14488:9;14475:23;14507:31;14532:5;14507:31;:::i;:::-;14557:5;-1:-1:-1;14614:2:46;14599:18;;14586:32;14627:33;14586:32;14627:33;:::i;14697:704::-;14816:6;14824;14832;14840;14893:3;14881:9;14872:7;14868:23;14864:33;14861:53;;;14910:1;14907;14900:12;14861:53;14949:9;14936:23;14968:31;14993:5;14968:31;:::i;:::-;15018:5;-1:-1:-1;15075:2:46;15060:18;;15047:32;15088:33;15047:32;15088:33;:::i;:::-;15140:7;-1:-1:-1;15199:2:46;15184:18;;15171:32;15212:33;15171:32;15212:33;:::i;:::-;15264:7;-1:-1:-1;15323:2:46;15308:18;;15295:32;15336:33;15295:32;15336:33;:::i;:::-;14697:704;;;;-1:-1:-1;14697:704:46;;-1:-1:-1;;14697:704:46:o;15406:287::-;15535:3;15573:6;15567:13;15589:66;15648:6;15643:3;15636:4;15628:6;15624:17;15589:66;:::i;:::-;15671:16;;;;;15406:287;-1:-1:-1;;15406:287:46:o;15698:184::-;-1:-1:-1;;;15747:1:46;15740:88;15847:4;15844:1;15837:15;15871:4;15868:1;15861:15;15887:128;15954:9;;;15975:11;;;15972:37;;;15989:18;;:::i;16020:273::-;16205:6;16197;16192:3;16179:33;16161:3;16231:16;;16256:13;;;16231:16;16020:273;-1:-1:-1;16020:273:46:o;16298:437::-;16377:1;16373:12;;;;16420;;;16441:61;;16495:4;16487:6;16483:17;16473:27;;16441:61;16548:2;16540:6;16537:14;16517:18;16514:38;16511:218;;-1:-1:-1;;;16582:1:46;16575:88;16686:4;16683:1;16676:15;16714:4;16711:1;16704:15;16511:218;;16298:437;;;:::o;16866:545::-;16968:2;16963:3;16960:11;16957:448;;;17004:1;17029:5;17025:2;17018:17;17074:4;17070:2;17060:19;17144:2;17132:10;17128:19;17125:1;17121:27;17115:4;17111:38;17180:4;17168:10;17165:20;17162:47;;;-1:-1:-1;17203:4:46;17162:47;17258:2;17253:3;17249:12;17246:1;17242:20;17236:4;17232:31;17222:41;;17313:82;17331:2;17324:5;17321:13;17313:82;;;17376:17;;;17357:1;17346:13;17313:82;;;17317:3;;;16866:545;;;:::o;17587:1206::-;17711:18;17706:3;17703:27;17700:53;;;17733:18;;:::i;:::-;17762:94;17852:3;17812:38;17844:4;17838:11;17812:38;:::i;:::-;17806:4;17762:94;:::i;:::-;17882:1;17907:2;17902:3;17899:11;17924:1;17919:616;;;;18579:1;18596:3;18593:93;;;-1:-1:-1;18652:19:46;;;18639:33;18593:93;-1:-1:-1;;17544:1:46;17540:11;;;17536:24;17532:29;17522:40;17568:1;17564:11;;;17519:57;18699:78;;17892:895;;17919:616;16813:1;16806:14;;;16850:4;16837:18;;-1:-1:-1;;17955:17:46;;;18056:9;18078:229;18092:7;18089:1;18086:14;18078:229;;;18181:19;;;18168:33;18153:49;;18288:4;18273:20;;;;18241:1;18229:14;;;;18108:12;18078:229;;;18082:3;18335;18326:7;18323:16;18320:159;;;18459:1;18455:6;18449:3;18443;18440:1;18436:11;18432:21;18428:34;18424:39;18411:9;18406:3;18402:19;18389:33;18385:79;18377:6;18370:95;18320:159;;;18522:1;18516:3;18513:1;18509:11;18505:19;18499:4;18492:33;17892:895;;17587:1206;;;:::o;18798:267::-;18887:6;18882:3;18875:19;18939:6;18932:5;18925:4;18920:3;18916:14;18903:43;-1:-1:-1;18991:1:46;18966:16;;;18984:4;18962:27;;;18955:38;;;;19047:2;19026:15;;;-1:-1:-1;;19022:29:46;19013:39;;;19009:50;;18798:267::o;19070:437::-;19287:2;19276:9;19269:21;19250:4;19313:62;19371:2;19360:9;19356:18;19348:6;19340;19313:62;:::i;:::-;19423:9;19415:6;19411:22;19406:2;19395:9;19391:18;19384:50;19451;19494:6;19486;19478;19451:50;:::i;:::-;19443:58;19070:437;-1:-1:-1;;;;;;;19070:437:46:o;19765:184::-;-1:-1:-1;;;19814:1:46;19807:88;19914:4;19911:1;19904:15;19938:4;19935:1;19928:15;21163:245;21320:2;21309:9;21302:21;21283:4;21340:62;21398:2;21387:9;21383:18;21375:6;21367;21340:62;:::i;21413:209::-;21451:3;21479:18;21532:2;21525:5;21521:14;21559:2;21550:7;21547:15;21544:41;;21565:18;;:::i;:::-;21614:1;21601:15;;21413:209;-1:-1:-1;;;21413:209:46:o;23369:1350::-;23493:3;23487:10;23520:18;23512:6;23509:30;23506:56;;;23542:18;;:::i;:::-;23571:97;23661:6;23621:38;23653:4;23647:11;23621:38;:::i;:::-;23615:4;23571:97;:::i;:::-;23723:4;;23787:2;23776:14;;23804:1;23799:663;;;;24506:1;24523:6;24520:89;;;-1:-1:-1;24575:19:46;;;24569:26;24520:89;-1:-1:-1;;17544:1:46;17540:11;;;17536:24;17532:29;17522:40;17568:1;17564:11;;;17519:57;24622:81;;23769:944;;23799:663;16813:1;16806:14;;;16850:4;16837:18;;-1:-1:-1;;23835:20:46;;;23953:236;23967:7;23964:1;23961:14;23953:236;;;24056:19;;;24050:26;24035:42;;24148:27;;;;24116:1;24104:14;;;;23983:19;;23953:236;;;23957:3;24217:6;24208:7;24205:19;24202:201;;;24278:19;;;24272:26;-1:-1:-1;;24361:1:46;24357:14;;;24373:3;24353:24;24349:37;24345:42;24330:58;24315:74;;24202:201;-1:-1:-1;;;;;24449:1:46;24433:14;;;24429:22;24416:36;;-1:-1:-1;23369:1350:46:o;25495:405::-;25698:2;25687:9;25680:21;25661:4;25724:44;25764:2;25753:9;25749:18;25741:6;25724:44;:::i;:::-;25816:9;25808:6;25804:22;25799:2;25788:9;25784:18;25777:50;25844;25887:6;25879;25871;25844:50;:::i;26727:251::-;26797:6;26850:2;26838:9;26829:7;26825:23;26821:32;26818:52;;;26866:1;26863;26856:12;26818:52;26898:9;26892:16;26917:31;26942:5;26917:31;:::i;26983:184::-;27053:6;27106:2;27094:9;27085:7;27081:23;27077:32;27074:52;;;27122:1;27119;27112:12;27074:52;-1:-1:-1;27145:16:46;;26983:184;-1:-1:-1;26983:184:46:o;27553:181::-;27591:3;27635:6;27628:5;27624:18;27661:7;27651:41;;27672:18;;:::i;:::-;-1:-1:-1;;27708:20:46;;27553:181;-1:-1:-1;;27553:181:46:o;27739:299::-;27912:2;27901:9;27894:21;27875:4;27932:44;27972:2;27961:9;27957:18;27949:6;27932:44;:::i;:::-;27924:52;;28024:6;28016;28012:19;28007:2;27996:9;27992:18;27985:47;27739:299;;;;;:::o;28043:197::-;28081:3;28109:6;28150:2;28143:5;28139:14;28177:2;28168:7;28165:15;28162:41;;28183:18;;:::i;28245:459::-;28464:2;28453:9;28446:21;28427:4;28490:44;28530:2;28519:9;28515:18;28507:6;28490:44;:::i;:::-;28582:6;28574;28570:19;28565:2;28554:9;28550:18;28543:47;28638:9;28630:6;28626:22;28621:2;28610:9;28606:18;28599:50;28666:32;28691:6;28683;28666:32;:::i;28709:125::-;28774:9;;;28795:10;;;28792:36;;;28808:18;;:::i;30025:521::-;30102:4;30108:6;30168:11;30155:25;30262:2;30258:7;30247:8;30231:14;30227:29;30223:43;30203:18;30199:68;30189:96;;30281:1;30278;30271:12;30189:96;30308:33;;30360:20;;;-1:-1:-1;30403:18:46;30392:30;;30389:50;;;30435:1;30432;30425:12;30389:50;30468:4;30456:17;;-1:-1:-1;30499:14:46;30495:27;;;30485:38;;30482:58;;;30536:1;30533;30526:12;30551:331;30656:9;30667;30709:8;30697:10;30694:24;30691:44;;;30731:1;30728;30721:12;30691:44;30760:6;30750:8;30747:20;30744:40;;;30780:1;30777;30770:12;30744:40;-1:-1:-1;;30806:23:46;;;30851:25;;;;;-1:-1:-1;30551:331:46:o;30887:255::-;31007:19;;31046:2;31038:11;;31035:101;;;-1:-1:-1;;31107:2:46;31103:12;;;31100:1;31096:20;31092:33;31081:45;30887:255;;;;:::o;31844:135::-;31883:3;31904:17;;;31901:43;;31924:18;;:::i;:::-;-1:-1:-1;31971:1:46;31960:13;;31844:135::o;32396:184::-;-1:-1:-1;;;32445:1:46;32438:88;32545:4;32542:1;32535:15;32569:4;32566:1;32559:15"},"gasEstimates":{"creation":{"codeDepositCost":"3349400","executionCost":"infinite","totalCost":"infinite"},"external":{"ABI(bytes32,uint256)":"infinite","addr(bytes32)":"infinite","addr(bytes32,uint256)":"infinite","approve(bytes32,address,bool)":"27177","clearRecords(bytes32)":"infinite","contenthash(bytes32)":"infinite","dnsRecord(bytes32,bytes32,uint16)":"infinite","ens()":"2428","hasDNSRecords(bytes32,bytes32)":"4843","initialize(address,address,address,address)":"infinite","interfaceImplementer(bytes32,bytes4)":"infinite","isApprovedFor(address,bytes32,address)":"infinite","isApprovedForAll(address,address)":"infinite","multicall(bytes[])":"infinite","multicallWithNodeCheck(bytes32,bytes[])":"infinite","name(bytes32)":"infinite","nameWrapper()":"2427","owner()":"2421","proxiableUUID()":"infinite","pubkey(bytes32)":"6908","recordVersions(bytes32)":"2564","renounceOwnership()":"infinite","setABI(bytes32,uint256,bytes)":"infinite","setAddr(bytes32,address)":"infinite","setAddr(bytes32,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26761","setContenthash(bytes32,bytes)":"infinite","setDNSRecords(bytes32,bytes)":"infinite","setInterface(bytes32,bytes4,address)":"infinite","setName(bytes32,string)":"infinite","setPubkey(bytes32,bytes32,bytes32)":"infinite","setText(bytes32,string,string)":"infinite","setZonehash(bytes32,bytes)":"infinite","supportsInterface(bytes4)":"infinite","text(bytes32,string)":"infinite","transferOwnership(address)":"infinite","trustedETHController()":"2449","trustedReverseRegistrar()":"2426","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","zonehash(bytes32)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","isAuthorised(bytes32)":"infinite"}},"methodIdentifiers":{"ABI(bytes32,uint256)":"2203ab56","addr(bytes32)":"3b3b57de","addr(bytes32,uint256)":"f1cb7e06","approve(bytes32,address,bool)":"a4b91a01","clearRecords(bytes32)":"3603d758","contenthash(bytes32)":"bc1c58d1","dnsRecord(bytes32,bytes32,uint16)":"a8fa5682","ens()":"3f15457f","hasDNSRecords(bytes32,bytes32)":"4cbf6ba4","initialize(address,address,address,address)":"f8c8765e","interfaceImplementer(bytes32,bytes4)":"124a319c","isApprovedFor(address,bytes32,address)":"a9784b3e","isApprovedForAll(address,address)":"e985e9c5","multicall(bytes[])":"ac9650d8","multicallWithNodeCheck(bytes32,bytes[])":"e32954eb","name(bytes32)":"691f3431","nameWrapper()":"a8e5fbc0","owner()":"8da5cb5b","proxiableUUID()":"52d1902d","pubkey(bytes32)":"c8690233","recordVersions(bytes32)":"d700ff33","renounceOwnership()":"715018a6","setABI(bytes32,uint256,bytes)":"623195b0","setAddr(bytes32,address)":"d5fa2b00","setAddr(bytes32,uint256,bytes)":"8b95dd71","setApprovalForAll(address,bool)":"a22cb465","setContenthash(bytes32,bytes)":"304e6ade","setDNSRecords(bytes32,bytes)":"0af179d7","setInterface(bytes32,bytes4,address)":"e59d895d","setName(bytes32,string)":"77372213","setPubkey(bytes32,bytes32,bytes32)":"29cd62ea","setText(bytes32,string,string)":"10f13a8c","setZonehash(bytes32,bytes)":"ce3decdc","supportsInterface(bytes4)":"01ffc9a7","text(bytes32,string)":"59d1d43c","transferOwnership(address)":"f2fde38b","trustedETHController()":"37bf7a2f","trustedReverseRegistrar()":"62c50a13","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286","zonehash(bytes32)":"5c98042b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"hasDNSRecords\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"wrapperAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedETHController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedReverseRegistrar\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"isApprovedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodehash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameWrapper\",\"outputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setDNSRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setZonehash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedETHController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedReverseRegistrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"returns\":{\"_0\":\"contentType The content type of the return value\",\"_1\":\"data The ABI data\"}},\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"approve(bytes32,address,bool)\":{\"details\":\"Approve a delegate to be able to updated records on a node.\"},\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}},\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"returns\":{\"_0\":\"the DNS record in wire format if present, otherwise empty\"}},\"hasDNSRecords(bytes32,bytes32)\":{\"params\":{\"name\":\"the namehash of the node for which to check the records\",\"node\":\"the namehash of the node for which to check the records\"}},\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}},\"isApprovedFor(address,bytes32,address)\":{\"details\":\"Check to see if the delegate has been approved by the owner for the node.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setABI(bytes32,uint256,bytes)\":{\"params\":{\"contentType\":\"The content type of the ABI\",\"data\":\"The ABI data.\",\"node\":\"The node to update.\"}},\"setAddr(bytes32,address)\":{\"params\":{\"a\":\"The address to set.\",\"node\":\"The node to update.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setContenthash(bytes32,bytes)\":{\"params\":{\"hash\":\"The contenthash to set\",\"node\":\"The node to update.\"}},\"setDNSRecords(bytes32,bytes)\":{\"params\":{\"data\":\"the DNS wire format records to set\",\"node\":\"the namehash of the node for which to set the records\"}},\"setInterface(bytes32,bytes4,address)\":{\"params\":{\"implementer\":\"The address of a contract that implements this interface for this node.\",\"interfaceID\":\"The EIP 165 interface ID.\",\"node\":\"The node to update.\"}},\"setName(bytes32,string)\":{\"params\":{\"node\":\"The node to update.\"}},\"setPubkey(bytes32,bytes32,bytes32)\":{\"params\":{\"node\":\"The ENS node to query\",\"x\":\"the X coordinate of the curve point for the public key.\",\"y\":\"the Y coordinate of the curve point for the public key.\"}},\"setText(bytes32,string,string)\":{\"params\":{\"key\":\"The key to set.\",\"node\":\"The node to update.\",\"value\":\"The text data value to set.\"}},\"setZonehash(bytes32,bytes)\":{\"params\":{\"hash\":\"The zonehash to set\",\"node\":\"The node to update.\"}},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"zonehash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"},\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"},\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"},\"hasDNSRecords(bytes32,bytes32)\":{\"notice\":\"Check if a given node has records.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"},\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"},\"setABI(bytes32,uint256,bytes)\":{\"notice\":\"Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setContenthash(bytes32,bytes)\":{\"notice\":\"Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setDNSRecords(bytes32,bytes)\":{\"notice\":\"Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:     a.example.com IN A 1.2.3.4     a.example.com IN A 5.6.7.8     www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:     a.example.com IN A 1.2.3.4     www.example.com IN CNAME a.example.com.     a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.\"},\"setInterface(bytes32,bytes4,address)\":{\"notice\":\"Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\"},\"setName(bytes32,string)\":{\"notice\":\"Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.\"},\"setPubkey(bytes32,bytes32,bytes32)\":{\"notice\":\"Sets the SECP256k1 public key associated with an ENS node.\"},\"setText(bytes32,string,string)\":{\"notice\":\"Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.\"},\"setZonehash(bytes32,bytes)\":{\"notice\":\"setZonehash sets the hash for the zone. May only be called by the owner of that node in the ENS registry.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"},\"zonehash(bytes32)\":{\"notice\":\"zonehash obtains the hash for the zone.\"}},\"notice\":\"A simple resolver anyone can use; only allows the owner of a node to set its address.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/PublicResolver.sol\":\"PublicResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dnssec-oracle/RRUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/BytesUtils.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n    using BytesUtils for *;\\n    using Buffer for *;\\n\\n    /**\\n     * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return The length of the DNS name at 'offset', in bytes.\\n     */\\n    function nameLength(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (uint256) {\\n        uint256 idx = offset;\\n        while (true) {\\n            assert(idx < self.length);\\n            uint256 labelLen = self.readUint8(idx);\\n            idx += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n        }\\n        return idx - offset;\\n    }\\n\\n    /**\\n     * @dev Returns a DNS format name at the specified offset of self.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return ret The name.\\n     */\\n    function readName(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes memory ret) {\\n        uint256 len = nameLength(self, offset);\\n        return self.substring(offset, len);\\n    }\\n\\n    /**\\n     * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return The number of labels in the DNS name at 'offset', in bytes.\\n     */\\n    function labelCount(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (uint256) {\\n        uint256 count = 0;\\n        while (true) {\\n            assert(offset < self.length);\\n            uint256 labelLen = self.readUint8(offset);\\n            offset += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n            count += 1;\\n        }\\n        return count;\\n    }\\n\\n    uint256 constant RRSIG_TYPE = 0;\\n    uint256 constant RRSIG_ALGORITHM = 2;\\n    uint256 constant RRSIG_LABELS = 3;\\n    uint256 constant RRSIG_TTL = 4;\\n    uint256 constant RRSIG_EXPIRATION = 8;\\n    uint256 constant RRSIG_INCEPTION = 12;\\n    uint256 constant RRSIG_KEY_TAG = 16;\\n    uint256 constant RRSIG_SIGNER_NAME = 18;\\n\\n    struct SignedSet {\\n        uint16 typeCovered;\\n        uint8 algorithm;\\n        uint8 labels;\\n        uint32 ttl;\\n        uint32 expiration;\\n        uint32 inception;\\n        uint16 keytag;\\n        bytes signerName;\\n        bytes data;\\n        bytes name;\\n    }\\n\\n    function readSignedSet(\\n        bytes memory data\\n    ) internal pure returns (SignedSet memory self) {\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\n        self.labels = data.readUint8(RRSIG_LABELS);\\n        self.ttl = data.readUint32(RRSIG_TTL);\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\n        self.data = data.substring(\\n            RRSIG_SIGNER_NAME + self.signerName.length,\\n            data.length - RRSIG_SIGNER_NAME - self.signerName.length\\n        );\\n    }\\n\\n    function rrs(\\n        SignedSet memory rrset\\n    ) internal pure returns (RRIterator memory) {\\n        return iterateRRs(rrset.data, 0);\\n    }\\n\\n    /**\\n     * @dev An iterator over resource records.\\n     */\\n    struct RRIterator {\\n        bytes data;\\n        uint256 offset;\\n        uint16 dnstype;\\n        uint16 class;\\n        uint32 ttl;\\n        uint256 rdataOffset;\\n        uint256 nextOffset;\\n    }\\n\\n    /**\\n     * @dev Begins iterating over resource records.\\n     * @param self The byte string to read from.\\n     * @param offset The offset to start reading at.\\n     * @return ret An iterator object.\\n     */\\n    function iterateRRs(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (RRIterator memory ret) {\\n        ret.data = self;\\n        ret.nextOffset = offset;\\n        next(ret);\\n    }\\n\\n    /**\\n     * @dev Returns true iff there are more RRs to iterate.\\n     * @param iter The iterator to check.\\n     * @return True iff the iterator has finished.\\n     */\\n    function done(RRIterator memory iter) internal pure returns (bool) {\\n        return iter.offset >= iter.data.length;\\n    }\\n\\n    /**\\n     * @dev Moves the iterator to the next resource record.\\n     * @param iter The iterator to advance.\\n     */\\n    function next(RRIterator memory iter) internal pure {\\n        iter.offset = iter.nextOffset;\\n        if (iter.offset >= iter.data.length) {\\n            return;\\n        }\\n\\n        // Skip the name\\n        uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n        // Read type, class, and ttl\\n        iter.dnstype = iter.data.readUint16(off);\\n        off += 2;\\n        iter.class = iter.data.readUint16(off);\\n        off += 2;\\n        iter.ttl = iter.data.readUint32(off);\\n        off += 4;\\n\\n        // Read the rdata\\n        uint256 rdataLength = iter.data.readUint16(off);\\n        off += 2;\\n        iter.rdataOffset = off;\\n        iter.nextOffset = off + rdataLength;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the current record.\\n     * @param iter The iterator.\\n     * @return A new bytes object containing the owner name from the RR.\\n     */\\n    function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n        return\\n            iter.data.substring(\\n                iter.offset,\\n                nameLength(iter.data, iter.offset)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the rdata portion of the current record.\\n     * @param iter The iterator.\\n     * @return A new bytes object containing the RR's RDATA.\\n     */\\n    function rdata(\\n        RRIterator memory iter\\n    ) internal pure returns (bytes memory) {\\n        return\\n            iter.data.substring(\\n                iter.rdataOffset,\\n                iter.nextOffset - iter.rdataOffset\\n            );\\n    }\\n\\n    uint256 constant DNSKEY_FLAGS = 0;\\n    uint256 constant DNSKEY_PROTOCOL = 2;\\n    uint256 constant DNSKEY_ALGORITHM = 3;\\n    uint256 constant DNSKEY_PUBKEY = 4;\\n\\n    struct DNSKEY {\\n        uint16 flags;\\n        uint8 protocol;\\n        uint8 algorithm;\\n        bytes publicKey;\\n    }\\n\\n    function readDNSKEY(\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (DNSKEY memory self) {\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\n        self.publicKey = data.substring(\\n            offset + DNSKEY_PUBKEY,\\n            length - DNSKEY_PUBKEY\\n        );\\n    }\\n\\n    uint256 constant DS_KEY_TAG = 0;\\n    uint256 constant DS_ALGORITHM = 2;\\n    uint256 constant DS_DIGEST_TYPE = 3;\\n    uint256 constant DS_DIGEST = 4;\\n\\n    struct DS {\\n        uint16 keytag;\\n        uint8 algorithm;\\n        uint8 digestType;\\n        bytes digest;\\n    }\\n\\n    function readDS(\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (DS memory self) {\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\n    }\\n\\n    function isSubdomainOf(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        uint256 off = 0;\\n        uint256 counts = labelCount(self, 0);\\n        uint256 othercounts = labelCount(other, 0);\\n\\n        while (counts > othercounts) {\\n            off = progress(self, off);\\n            counts--;\\n        }\\n\\n        return self.equals(off, other, 0);\\n    }\\n\\n    function compareNames(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        if (self.equals(other)) {\\n            return 0;\\n        }\\n\\n        uint256 off;\\n        uint256 otheroff;\\n        uint256 prevoff;\\n        uint256 otherprevoff;\\n        uint256 counts = labelCount(self, 0);\\n        uint256 othercounts = labelCount(other, 0);\\n\\n        // Keep removing labels from the front of the name until both names are equal length\\n        while (counts > othercounts) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            counts--;\\n        }\\n\\n        while (othercounts > counts) {\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            othercounts--;\\n        }\\n\\n        // Compare the last nonequal labels to each other\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            counts -= 1;\\n        }\\n\\n        if (off == 0) {\\n            return -1;\\n        }\\n        if (otheroff == 0) {\\n            return 1;\\n        }\\n\\n        return\\n            self.compare(\\n                prevoff + 1,\\n                self.readUint8(prevoff),\\n                other,\\n                otherprevoff + 1,\\n                other.readUint8(otherprevoff)\\n            );\\n    }\\n\\n    /**\\n     * @dev Compares two serial numbers using RFC1982 serial number math.\\n     */\\n    function serialNumberGte(\\n        uint32 i1,\\n        uint32 i2\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            return int32(i1) - int32(i2) >= 0;\\n        }\\n    }\\n\\n    function progress(\\n        bytes memory body,\\n        uint256 off\\n    ) internal pure returns (uint256) {\\n        return off + 1 + body.readUint8(off);\\n    }\\n\\n    /**\\n     * @dev Computes the keytag for a chunk of data.\\n     * @param data The data to compute a keytag for.\\n     * @return The computed key tag.\\n     */\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n        /* This function probably deserves some explanation.\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\\n         *\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n         *         uint ac;\\n         *         for (uint i = 0; i < data.length; i++) {\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\n         *         }\\n         *         return uint16(ac + (ac >> 16));\\n         *     }\\n         *\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\\n         * large words work in our favour.\\n         *\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\n         *\\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\\n         * and the remaining sums can be done just on ac1.\\n         */\\n        unchecked {\\n            require(data.length <= 8192, \\\"Long keys not permitted\\\");\\n            uint256 ac1;\\n            uint256 ac2;\\n            for (uint256 i = 0; i < data.length + 31; i += 32) {\\n                uint256 word;\\n                assembly {\\n                    word := mload(add(add(data, 32), i))\\n                }\\n                if (i + 32 > data.length) {\\n                    uint256 unused = 256 - (data.length - i) * 8;\\n                    word = (word >> unused) << unused;\\n                }\\n                ac1 +=\\n                    (word &\\n                        0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >>\\n                    8;\\n                ac2 += (word &\\n                    0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\n            }\\n            ac1 =\\n                (ac1 &\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\n                ((ac1 &\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\n                    16);\\n            ac2 =\\n                (ac2 &\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\n                ((ac2 &\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\n                    16);\\n            ac1 = (ac1 << 8) + ac2;\\n            ac1 =\\n                (ac1 &\\n                    0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) +\\n                ((ac1 &\\n                    0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >>\\n                    32);\\n            ac1 =\\n                (ac1 &\\n                    0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) +\\n                ((ac1 &\\n                    0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >>\\n                    64);\\n            ac1 =\\n                (ac1 &\\n                    0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) +\\n                (ac1 >> 128);\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\n            return uint16(ac1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4470c1578b2ee78e64bd8925bf391ffe98d5497aeef15b593380c7fe905af5d\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/registry/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8e208b44d5dbf22552fe72d79b45c640855b84fbc9ee21f4c3bb4bfe81cbe8db\",\"license\":\"MIT\"},\"contracts/resolvers/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMulticallable {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x0334202e20bb11995997083d05963f5e8e7ed6194cba494e7f9371ab7bf4e2c3\",\"license\":\"MIT\"},\"contracts/resolvers/Multicallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMulticallable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract Multicallable is IMulticallable, ERC165 {\\n    function _multicall(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) internal returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (nodehash != bytes32(0)) {\\n                bytes32 txNamehash = bytes32(data[i][4:36]);\\n                require(\\n                    txNamehash == nodehash,\\n                    \\\"multicall: All records must have a matching namehash\\\"\\n                );\\n            }\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n            require(success);\\n            results[i] = result;\\n        }\\n        return results;\\n    }\\n\\n    // This function provides an extra security check when called\\n    // from priviledged contracts (such as EthRegistrarController)\\n    // that can set records on behalf of the node owners\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        return _multicall(nodehash, data);\\n    }\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) public override returns (bytes[] memory results) {\\n        return _multicall(bytes32(0), data);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IMulticallable).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x1063a9dd3b94ba304624d5ec6deb43c1916640758ae970eece4d4e3ef8b2fcb1\",\"license\":\"MIT\"},\"contracts/resolvers/PublicResolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./profiles/ABIResolver.sol\\\";\\nimport \\\"./profiles/AddrResolver.sol\\\";\\nimport \\\"./profiles/ContentHashResolver.sol\\\";\\nimport \\\"./profiles/DNSResolver.sol\\\";\\nimport \\\"./profiles/InterfaceResolver.sol\\\";\\nimport \\\"./profiles/NameResolver.sol\\\";\\nimport \\\"./profiles/PubkeyResolver.sol\\\";\\nimport \\\"./profiles/TextResolver.sol\\\";\\nimport \\\"./Multicallable.sol\\\";\\nimport {INameWrapper} from \\\"../wrapper/INameWrapper.sol\\\";\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver is\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    Multicallable,\\n    ABIResolver,\\n    AddrResolver,\\n    ContentHashResolver,\\n    DNSResolver,\\n    InterfaceResolver,\\n    NameResolver,\\n    PubkeyResolver,\\n    TextResolver\\n{\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    ENS public ens;\\n    INameWrapper public nameWrapper;\\n    address public trustedETHController;\\n    address public trustedReverseRegistrar;\\n\\n    /**\\n     * A mapping of operators. An address that is authorised for an address\\n     * may make any changes to the name that the owner could, but may not update\\n     * the set of authorisations.\\n     * (owner, operator) => approved\\n     */\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * A mapping of delegates. A delegate that is authorised by an owner\\n     * for a name may make changes to the name's resolver, but may not update\\n     * the set of token approvals.\\n     * (owner, name, delegate) => approved\\n     */\\n    mapping(address => mapping(bytes32 => mapping(address => bool)))\\n        private _tokenApprovals;\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    // Logged when a delegate is approved or  an approval is revoked.\\n    event Approved(\\n        address owner,\\n        bytes32 indexed node,\\n        address indexed delegate,\\n        bool indexed approved\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        ENS _ens,\\n        INameWrapper wrapperAddress,\\n        address _trustedETHController,\\n        address _trustedReverseRegistrar\\n    ) public initializer {\\n        __Ownable_init();\\n        ens = _ens;\\n        nameWrapper = wrapperAddress;\\n        trustedETHController = _trustedETHController;\\n        trustedReverseRegistrar = _trustedReverseRegistrar;\\n\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        reverseRegistrar.claim(msg.sender);\\n    }\\n\\n    ///@dev required by the OZ UUPS module\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external {\\n        require(\\n            msg.sender != operator,\\n            \\\"ERC1155: setting approval status for self\\\"\\n        );\\n\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) public view returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev Approve a delegate to be able to updated records on a node.\\n     */\\n    function approve(bytes32 node, address delegate, bool approved) external {\\n        require(msg.sender != delegate, \\\"Setting delegate status for self\\\");\\n\\n        _tokenApprovals[msg.sender][node][delegate] = approved;\\n        emit Approved(msg.sender, node, delegate, approved);\\n    }\\n\\n    /**\\n     * @dev Check to see if the delegate has been approved by the owner for the node.\\n     */\\n    function isApprovedFor(\\n        address owner,\\n        bytes32 node,\\n        address delegate\\n    ) public view returns (bool) {\\n        return _tokenApprovals[owner][node][delegate];\\n    }\\n\\n    function isAuthorised(bytes32 node) internal view override returns (bool) {\\n        if (\\n            msg.sender == trustedETHController ||\\n            msg.sender == trustedReverseRegistrar\\n        ) {\\n            return true;\\n        }\\n        address owner = ens.owner(node);\\n        if (owner == address(nameWrapper)) {\\n            owner = nameWrapper.ownerOf(uint256(node));\\n        }\\n        return\\n            owner == msg.sender ||\\n            isApprovedForAll(owner, msg.sender) ||\\n            isApprovedFor(owner, node, msg.sender);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    )\\n        public\\n        view\\n        override(\\n            Multicallable,\\n            ABIResolver,\\n            AddrResolver,\\n            ContentHashResolver,\\n            DNSResolver,\\n            InterfaceResolver,\\n            NameResolver,\\n            PubkeyResolver,\\n            TextResolver\\n        )\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x80ff6c5f78611ee002898d9bb2c7b44f45293e99231b47cc24c0f9098113dd06\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IABIResolver.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\n\\nabstract contract ABIResolver is IABIResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_abis;\\n\\n    /**\\n     * Sets the ABI associated with an ENS node.\\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n     * the empty string.\\n     * @param node The node to update.\\n     * @param contentType The content type of the ABI\\n     * @param data The ABI data.\\n     */\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external virtual authorised(node) {\\n        // Content types must be powers of 2\\n        require(((contentType - 1) & contentType) == 0);\\n\\n        versionable_abis[recordVersions[node]][node][contentType] = data;\\n        emit ABIChanged(node, contentType);\\n    }\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view virtual override returns (uint256, bytes memory) {\\n        mapping(uint256 => bytes) storage abiset = versionable_abis[\\n            recordVersions[node]\\n        ][node];\\n\\n        for (\\n            uint256 contentType = 1;\\n            contentType <= contentTypes;\\n            contentType <<= 1\\n        ) {\\n            if (\\n                (contentType & contentTypes) != 0 &&\\n                abiset[contentType].length > 0\\n            ) {\\n                return (contentType, abiset[contentType]);\\n            }\\n        }\\n\\n        return (0, bytes(\\\"\\\"));\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IABIResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x2da96d7750786afe3be019fc6ff768e2d98a5e61d360bd92d8d7bc3c7c1dcc27\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/AddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IAddrResolver.sol\\\";\\nimport \\\"./IAddressResolver.sol\\\";\\n\\nabstract contract AddrResolver is\\n    IAddrResolver,\\n    IAddressResolver,\\n    ResolverBase\\n{\\n    uint256 private constant COIN_TYPE_ETH = 60;\\n\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_addresses;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(\\n        bytes32 node,\\n        address a\\n    ) external virtual authorised(node) {\\n        setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(\\n        bytes32 node\\n    ) public view virtual override returns (address payable) {\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\n        if (a.length == 0) {\\n            return payable(0);\\n        }\\n        return bytesToAddress(a);\\n    }\\n\\n    function setAddr(\\n        bytes32 node,\\n        uint256 coinType,\\n        bytes memory a\\n    ) public virtual authorised(node) {\\n        emit AddressChanged(node, coinType, a);\\n        if (coinType == COIN_TYPE_ETH) {\\n            emit AddrChanged(node, bytesToAddress(a));\\n        }\\n        versionable_addresses[recordVersions[node]][node][coinType] = a;\\n    }\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) public view virtual override returns (bytes memory) {\\n        return versionable_addresses[recordVersions[node]][node][coinType];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IAddrResolver).interfaceId ||\\n            interfaceID == type(IAddressResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    function bytesToAddress(\\n        bytes memory b\\n    ) internal pure returns (address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12))\\n        }\\n    }\\n\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f6ebb3144530a02db03379f33ade869c8408eceed36dfbd751aaff198735b55\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IContentHashResolver.sol\\\";\\n\\nabstract contract ContentHashResolver is IContentHashResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => bytes)) versionable_hashes;\\n\\n    /**\\n     * Sets the contenthash associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param hash The contenthash to set\\n     */\\n    function setContenthash(\\n        bytes32 node,\\n        bytes calldata hash\\n    ) external virtual authorised(node) {\\n        versionable_hashes[recordVersions[node]][node] = hash;\\n        emit ContenthashChanged(node, hash);\\n    }\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(\\n        bytes32 node\\n    ) external view virtual override returns (bytes memory) {\\n        return versionable_hashes[recordVersions[node]][node];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IContentHashResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xc9755bfb77985375ded880ecab5af41f2b9e8280f30d3e523fe5042ea59f93ea\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/DNSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"../../dnssec-oracle/RRUtils.sol\\\";\\nimport \\\"./IDNSRecordResolver.sol\\\";\\nimport \\\"./IDNSZoneResolver.sol\\\";\\n\\nabstract contract DNSResolver is\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    ResolverBase\\n{\\n    using RRUtils for *;\\n    using BytesUtils for bytes;\\n\\n    // Zone hashes for the domains.\\n    // A zone hash is an EIP-1577 content hash in binary format that should point to a\\n    // resource containing a single zonefile.\\n    // node => contenthash\\n    mapping(uint64 => mapping(bytes32 => bytes)) private versionable_zonehashes;\\n\\n    // The records themselves.  Stored as binary RRSETs\\n    // node => version => name => resource => data\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))\\n        private versionable_records;\\n\\n    // Count of number of entries for a given name.  Required for DNS resolvers\\n    // when resolving wildcards.\\n    // node => version => name => number of records\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))\\n        private versionable_nameEntriesCount;\\n\\n    /**\\n     * Set one or more DNS records.  Records are supplied in wire-format.\\n     * Records with the same node/name/resource must be supplied one after the\\n     * other to ensure the data is updated correctly. For example, if the data\\n     * was supplied:\\n     *     a.example.com IN A 1.2.3.4\\n     *     a.example.com IN A 5.6.7.8\\n     *     www.example.com IN CNAME a.example.com.\\n     * then this would store the two A records for a.example.com correctly as a\\n     * single RRSET, however if the data was supplied:\\n     *     a.example.com IN A 1.2.3.4\\n     *     www.example.com IN CNAME a.example.com.\\n     *     a.example.com IN A 5.6.7.8\\n     * then this would store the first A record, the CNAME, then the second A\\n     * record which would overwrite the first.\\n     *\\n     * @param node the namehash of the node for which to set the records\\n     * @param data the DNS wire format records to set\\n     */\\n    function setDNSRecords(\\n        bytes32 node,\\n        bytes calldata data\\n    ) external virtual authorised(node) {\\n        uint16 resource = 0;\\n        uint256 offset = 0;\\n        bytes memory name;\\n        bytes memory value;\\n        bytes32 nameHash;\\n        uint64 version = recordVersions[node];\\n        // Iterate over the data to add the resource records\\n        for (\\n            RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n            !iter.done();\\n            iter.next()\\n        ) {\\n            if (resource == 0) {\\n                resource = iter.dnstype;\\n                name = iter.name();\\n                nameHash = keccak256(abi.encodePacked(name));\\n                value = bytes(iter.rdata());\\n            } else {\\n                bytes memory newName = iter.name();\\n                if (resource != iter.dnstype || !name.equals(newName)) {\\n                    setDNSRRSet(\\n                        node,\\n                        name,\\n                        resource,\\n                        data,\\n                        offset,\\n                        iter.offset - offset,\\n                        value.length == 0,\\n                        version\\n                    );\\n                    resource = iter.dnstype;\\n                    offset = iter.offset;\\n                    name = newName;\\n                    nameHash = keccak256(name);\\n                    value = bytes(iter.rdata());\\n                }\\n            }\\n        }\\n        if (name.length > 0) {\\n            setDNSRRSet(\\n                node,\\n                name,\\n                resource,\\n                data,\\n                offset,\\n                data.length - offset,\\n                value.length == 0,\\n                version\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) public view virtual override returns (bytes memory) {\\n        return versionable_records[recordVersions[node]][node][name][resource];\\n    }\\n\\n    /**\\n     * Check if a given node has records.\\n     * @param node the namehash of the node for which to check the records\\n     * @param name the namehash of the node for which to check the records\\n     */\\n    function hasDNSRecords(\\n        bytes32 node,\\n        bytes32 name\\n    ) public view virtual returns (bool) {\\n        return (versionable_nameEntriesCount[recordVersions[node]][node][\\n            name\\n        ] != 0);\\n    }\\n\\n    /**\\n     * setZonehash sets the hash for the zone.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param hash The zonehash to set\\n     */\\n    function setZonehash(\\n        bytes32 node,\\n        bytes calldata hash\\n    ) external virtual authorised(node) {\\n        uint64 currentRecordVersion = recordVersions[node];\\n        bytes memory oldhash = versionable_zonehashes[currentRecordVersion][\\n            node\\n        ];\\n        versionable_zonehashes[currentRecordVersion][node] = hash;\\n        emit DNSZonehashChanged(node, oldhash, hash);\\n    }\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(\\n        bytes32 node\\n    ) external view virtual override returns (bytes memory) {\\n        return versionable_zonehashes[recordVersions[node]][node];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IDNSRecordResolver).interfaceId ||\\n            interfaceID == type(IDNSZoneResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    function setDNSRRSet(\\n        bytes32 node,\\n        bytes memory name,\\n        uint16 resource,\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 size,\\n        bool deleteRecord,\\n        uint64 version\\n    ) private {\\n        bytes32 nameHash = keccak256(name);\\n        bytes memory rrData = data.substring(offset, size);\\n        if (deleteRecord) {\\n            if (\\n                versionable_records[version][node][nameHash][resource].length !=\\n                0\\n            ) {\\n                versionable_nameEntriesCount[version][node][nameHash]--;\\n            }\\n            delete (versionable_records[version][node][nameHash][resource]);\\n            emit DNSRecordDeleted(node, name, resource);\\n        } else {\\n            if (\\n                versionable_records[version][node][nameHash][resource].length ==\\n                0\\n            ) {\\n                versionable_nameEntriesCount[version][node][nameHash]++;\\n            }\\n            versionable_records[version][node][nameHash][resource] = rrData;\\n            emit DNSRecordChanged(node, name, resource, rrData);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7233e4d2edca222ce6e1cdb07adf127ab52ecaea599fa5369971a7b28dbc59ac\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/InterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./AddrResolver.sol\\\";\\nimport \\\"./IInterfaceResolver.sol\\\";\\n\\nabstract contract InterfaceResolver is IInterfaceResolver, AddrResolver {\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address))) versionable_interfaces;\\n\\n    /**\\n     * Sets an interface associated with a name.\\n     * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n     * @param node The node to update.\\n     * @param interfaceID The EIP 165 interface ID.\\n     * @param implementer The address of a contract that implements this interface for this node.\\n     */\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external virtual authorised(node) {\\n        versionable_interfaces[recordVersions[node]][node][\\n            interfaceID\\n        ] = implementer;\\n        emit InterfaceChanged(node, interfaceID, implementer);\\n    }\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view virtual override returns (address) {\\n        address implementer = versionable_interfaces[recordVersions[node]][\\n            node\\n        ][interfaceID];\\n        if (implementer != address(0)) {\\n            return implementer;\\n        }\\n\\n        address a = addr(node);\\n        if (a == address(0)) {\\n            return address(0);\\n        }\\n\\n        (bool success, bytes memory returnData) = a.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"supportsInterface(bytes4)\\\",\\n                type(IERC165).interfaceId\\n            )\\n        );\\n        if (!success || returnData.length < 32 || returnData[31] == 0) {\\n            // EIP 165 not supported by target\\n            return address(0);\\n        }\\n\\n        (success, returnData) = a.staticcall(\\n            abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", interfaceID)\\n        );\\n        if (!success || returnData.length < 32 || returnData[31] == 0) {\\n            // Specified interface not supported by target\\n            return address(0);\\n        }\\n\\n        return a;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IInterfaceResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x820ec60183e7a49a4ee399cf4708acb776725c8e4ad275d1f316c152eace0a59\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/NameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./INameResolver.sol\\\";\\n\\nabstract contract NameResolver is INameResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => string)) versionable_names;\\n\\n    /**\\n     * Sets the name associated with an ENS node, for reverse records.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function setName(\\n        bytes32 node,\\n        string calldata newName\\n    ) external virtual authorised(node) {\\n        versionable_names[recordVersions[node]][node] = newName;\\n        emit NameChanged(node, newName);\\n    }\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(\\n        bytes32 node\\n    ) external view virtual override returns (string memory) {\\n        return versionable_names[recordVersions[node]][node];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(INameResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x52d0bbb8f9dd33fae471ef2f5f6b3118b221954e5bb7ba724885d4562e75b8e2\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/PubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IPubkeyResolver.sol\\\";\\n\\nabstract contract PubkeyResolver is IPubkeyResolver, ResolverBase {\\n    struct PublicKey {\\n        bytes32 x;\\n        bytes32 y;\\n    }\\n\\n    mapping(uint64 => mapping(bytes32 => PublicKey)) versionable_pubkeys;\\n\\n    /**\\n     * Sets the SECP256k1 public key associated with an ENS node.\\n     * @param node The ENS node to query\\n     * @param x the X coordinate of the curve point for the public key.\\n     * @param y the Y coordinate of the curve point for the public key.\\n     */\\n    function setPubkey(\\n        bytes32 node,\\n        bytes32 x,\\n        bytes32 y\\n    ) external virtual authorised(node) {\\n        versionable_pubkeys[recordVersions[node]][node] = PublicKey(x, y);\\n        emit PubkeyChanged(node, x, y);\\n    }\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(\\n        bytes32 node\\n    ) external view virtual override returns (bytes32 x, bytes32 y) {\\n        uint64 currentRecordVersion = recordVersions[node];\\n        return (\\n            versionable_pubkeys[currentRecordVersion][node].x,\\n            versionable_pubkeys[currentRecordVersion][node].y\\n        );\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IPubkeyResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x1a1f10a0e40520c998a9296fc81c092c81521e05a784e9bd9ee44cc4c62c8c78\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/TextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./ITextResolver.sol\\\";\\n\\nabstract contract TextResolver is ITextResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => mapping(string => string))) versionable_texts;\\n\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external virtual authorised(node) {\\n        versionable_texts[recordVersions[node]][node][key] = value;\\n        emit TextChanged(node, key, key, value);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view virtual override returns (string memory) {\\n        return versionable_texts[recordVersions[node]][node][key];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(ITextResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xf9bedd807add38136779d84083ac2fa4f8c92d017c9e1a72fbc9003fa5074379\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"contracts/utils/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal.\\n     * @param self The first bytes to compare.\\n     * @param other The second bytes to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first bytes to compare.\\n     * @param offset The offset of self.\\n     * @param len    The length of self.\\n     * @param other The second bytes to compare.\\n     * @param otheroffset The offset of the other string.\\n     * @param otherlen    The length of the other string.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if (offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if (otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n\\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask;\\n                if (shortest - idx >= 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\n                }\\n                int256 diff = int256(a & mask) - int256(b & mask);\\n                if (diff != 0) return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @param len The number of bytes to compare\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n     *      they are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n     * @dev Returns the 8-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\n     */\\n    function readUint8(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n     * @dev Returns the 16-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\n     */\\n    function readUint16(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\n     */\\n    function readUint32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes20(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the n byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes.\\n     * @param len The number of bytes.\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Copies a substring into a new byte string.\\n     * @param self The byte string to copy from.\\n     * @param offset The offset to start copying at.\\n     * @param len The number of bytes to copy.\\n     */\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /**\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\n     * @param self The string to search\\n     * @param off The offset to start searching at\\n     * @param len The number of bytes to search\\n     * @param needle The byte to search for\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n     */\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0xc566a3569af880a096a9bfb2fbb77060ef7aecde1a205dc26446a58877412060\",\"license\":\"MIT\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":926,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":929,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":908,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1224,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":1605,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":432,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"_owner","offset":0,"slot":"151","type":"t_address"},{"astId":552,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":3864,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"recordVersions","offset":0,"slot":"201","type":"t_mapping(t_bytes32,t_uint64)"},{"astId":3943,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_abis","offset":0,"slot":"202","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))"},{"astId":4097,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_addresses","offset":0,"slot":"203","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))"},{"astId":4288,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_hashes","offset":0,"slot":"204","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))"},{"astId":4378,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_zonehashes","offset":0,"slot":"205","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))"},{"astId":4388,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_records","offset":0,"slot":"206","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))"},{"astId":4396,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_nameEntriesCount","offset":0,"slot":"207","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16)))"},{"astId":5076,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_interfaces","offset":0,"slot":"208","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes4,t_address)))"},{"astId":5268,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_names","offset":0,"slot":"209","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))"},{"astId":5355,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_pubkeys","offset":0,"slot":"210","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_struct(PublicKey)5348_storage))"},{"astId":5458,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_texts","offset":0,"slot":"211","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))"},{"astId":3543,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"ens","offset":0,"slot":"212","type":"t_contract(ENS)3320"},{"astId":3546,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"nameWrapper","offset":0,"slot":"213","type":"t_contract(INameWrapper)6917"},{"astId":3548,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"trustedETHController","offset":0,"slot":"214","type":"t_address"},{"astId":3550,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"trustedReverseRegistrar","offset":0,"slot":"215","type":"t_address"},{"astId":3557,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"_operatorApprovals","offset":0,"slot":"216","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":3566,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"_tokenApprovals","offset":0,"slot":"217","type":"t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_bool)))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(ENS)3320":{"encoding":"inplace","label":"contract ENS","numberOfBytes":"20"},"t_contract(INameWrapper)6917":{"encoding":"inplace","label":"contract INameWrapper","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_bool)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => mapping(address => bool)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_address,t_bool))"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_bytes32,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))"},"t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes32 => uint16))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint16)"},"t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes4 => address))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_address)"},"t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(string => string))","numberOfBytes":"32","value":"t_mapping(t_string_memory_ptr,t_string_storage)"},"t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint16 => bytes))","numberOfBytes":"32","value":"t_mapping(t_uint16,t_bytes_storage)"},"t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint256 => bytes))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bytes_storage)"},"t_mapping(t_bytes32,t_string_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_bytes32,t_struct(PublicKey)5348_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PubkeyResolver.PublicKey)","numberOfBytes":"32","value":"t_struct(PublicKey)5348_storage"},"t_mapping(t_bytes32,t_uint16)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint16)","numberOfBytes":"32","value":"t_uint16"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_bytes4,t_address)":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint16,t_bytes_storage)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint256,t_bytes_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => bytes))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_bytes_storage)"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes4,t_address)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(string => string)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => string))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_string_storage)"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_struct(PublicKey)5348_storage))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => struct PubkeyResolver.PublicKey))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(PublicKey)5348_storage)"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(PublicKey)5348_storage":{"encoding":"inplace","label":"struct PubkeyResolver.PublicKey","members":[{"astId":5345,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"x","offset":0,"slot":"0","type":"t_bytes32"},{"astId":5347,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"y","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"ABI(bytes32,uint256)":{"notice":"Returns the ABI associated with an ENS node. Defined in EIP205."},"addr(bytes32)":{"notice":"Returns the address associated with an ENS node."},"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"contenthash(bytes32)":{"notice":"Returns the contenthash associated with an ENS node."},"dnsRecord(bytes32,bytes32,uint16)":{"notice":"Obtain a DNS record."},"hasDNSRecords(bytes32,bytes32)":{"notice":"Check if a given node has records."},"interfaceImplementer(bytes32,bytes4)":{"notice":"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."},"name(bytes32)":{"notice":"Returns the name associated with an ENS node, for reverse records. Defined in EIP181."},"pubkey(bytes32)":{"notice":"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."},"setABI(bytes32,uint256,bytes)":{"notice":"Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string."},"setAddr(bytes32,address)":{"notice":"Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"setContenthash(bytes32,bytes)":{"notice":"Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"setDNSRecords(bytes32,bytes)":{"notice":"Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:     a.example.com IN A 1.2.3.4     a.example.com IN A 5.6.7.8     www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:     a.example.com IN A 1.2.3.4     www.example.com IN CNAME a.example.com.     a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first."},"setInterface(bytes32,bytes4,address)":{"notice":"Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support."},"setName(bytes32,string)":{"notice":"Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry."},"setPubkey(bytes32,bytes32,bytes32)":{"notice":"Sets the SECP256k1 public key associated with an ENS node."},"setText(bytes32,string,string)":{"notice":"Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry."},"setZonehash(bytes32,bytes)":{"notice":"setZonehash sets the hash for the zone. May only be called by the owner of that node in the ENS registry."},"text(bytes32,string)":{"notice":"Returns the text data associated with an ENS node and key."},"zonehash(bytes32)":{"notice":"zonehash obtains the hash for the zone."}},"notice":"A simple resolver anyone can use; only allows the owner of a node to set its address.","version":1}}},"contracts/resolvers/ResolverBase.sol":{"ResolverBase":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"clearRecords(bytes32)":{"params":{"node":"The node to update."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"clearRecords(bytes32)":"3603d758","recordVersions(bytes32)":"d700ff33","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/ResolverBase.sol\":\"ResolverBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3864,"contract":"contracts/resolvers/ResolverBase.sol:ResolverBase","label":"recordVersions","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint64)"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."}},"version":1}}},"contracts/resolvers/profiles/ABIResolver.sol":{"ABIResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentType","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setABI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"ABI(bytes32,uint256)":{"params":{"contentTypes":"A bitwise OR of the ABI formats accepted by the caller.","node":"The ENS node to query"},"returns":{"_0":"contentType The content type of the return value","_1":"data The ABI data"}},"clearRecords(bytes32)":{"params":{"node":"The node to update."}},"setABI(bytes32,uint256,bytes)":{"params":{"contentType":"The content type of the ABI","data":"The ABI data.","node":"The node to update."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ABI(bytes32,uint256)":"2203ab56","clearRecords(bytes32)":"3603d758","recordVersions(bytes32)":"d700ff33","setABI(bytes32,uint256,bytes)":"623195b0","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"returns\":{\"_0\":\"contentType The content type of the return value\",\"_1\":\"data The ABI data\"}},\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"setABI(bytes32,uint256,bytes)\":{\"params\":{\"contentType\":\"The content type of the ABI\",\"data\":\"The ABI data.\",\"node\":\"The node to update.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"},\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setABI(bytes32,uint256,bytes)\":{\"notice\":\"Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/ABIResolver.sol\":\"ABIResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IABIResolver.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\n\\nabstract contract ABIResolver is IABIResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_abis;\\n\\n    /**\\n     * Sets the ABI associated with an ENS node.\\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n     * the empty string.\\n     * @param node The node to update.\\n     * @param contentType The content type of the ABI\\n     * @param data The ABI data.\\n     */\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external virtual authorised(node) {\\n        // Content types must be powers of 2\\n        require(((contentType - 1) & contentType) == 0);\\n\\n        versionable_abis[recordVersions[node]][node][contentType] = data;\\n        emit ABIChanged(node, contentType);\\n    }\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view virtual override returns (uint256, bytes memory) {\\n        mapping(uint256 => bytes) storage abiset = versionable_abis[\\n            recordVersions[node]\\n        ][node];\\n\\n        for (\\n            uint256 contentType = 1;\\n            contentType <= contentTypes;\\n            contentType <<= 1\\n        ) {\\n            if (\\n                (contentType & contentTypes) != 0 &&\\n                abiset[contentType].length > 0\\n            ) {\\n                return (contentType, abiset[contentType]);\\n            }\\n        }\\n\\n        return (0, bytes(\\\"\\\"));\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IABIResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x2da96d7750786afe3be019fc6ff768e2d98a5e61d360bd92d8d7bc3c7c1dcc27\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3864,"contract":"contracts/resolvers/profiles/ABIResolver.sol:ABIResolver","label":"recordVersions","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint64)"},{"astId":3943,"contract":"contracts/resolvers/profiles/ABIResolver.sol:ABIResolver","label":"versionable_abis","offset":0,"slot":"1","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint256 => bytes))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bytes_storage)"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_uint256,t_bytes_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"ABI(bytes32,uint256)":{"notice":"Returns the ABI associated with an ENS node. Defined in EIP205."},"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"setABI(bytes32,uint256,bytes)":{"notice":"Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string."}},"version":1}}},"contracts/resolvers/profiles/AddrResolver.sol":{"AddrResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"coinType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"},{"internalType":"bytes","name":"a","type":"bytes"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"a","type":"address"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"addr(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated address."}},"clearRecords(bytes32)":{"params":{"node":"The node to update."}},"setAddr(bytes32,address)":{"params":{"a":"The address to set.","node":"The node to update."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addr(bytes32)":"3b3b57de","addr(bytes32,uint256)":"f1cb7e06","clearRecords(bytes32)":"3603d758","recordVersions(bytes32)":"d700ff33","setAddr(bytes32,address)":"d5fa2b00","setAddr(bytes32,uint256,bytes)":"8b95dd71","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"setAddr(bytes32,address)\":{\"params\":{\"a\":\"The address to set.\",\"node\":\"The node to update.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/AddrResolver.sol\":\"AddrResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/AddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IAddrResolver.sol\\\";\\nimport \\\"./IAddressResolver.sol\\\";\\n\\nabstract contract AddrResolver is\\n    IAddrResolver,\\n    IAddressResolver,\\n    ResolverBase\\n{\\n    uint256 private constant COIN_TYPE_ETH = 60;\\n\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_addresses;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(\\n        bytes32 node,\\n        address a\\n    ) external virtual authorised(node) {\\n        setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(\\n        bytes32 node\\n    ) public view virtual override returns (address payable) {\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\n        if (a.length == 0) {\\n            return payable(0);\\n        }\\n        return bytesToAddress(a);\\n    }\\n\\n    function setAddr(\\n        bytes32 node,\\n        uint256 coinType,\\n        bytes memory a\\n    ) public virtual authorised(node) {\\n        emit AddressChanged(node, coinType, a);\\n        if (coinType == COIN_TYPE_ETH) {\\n            emit AddrChanged(node, bytesToAddress(a));\\n        }\\n        versionable_addresses[recordVersions[node]][node][coinType] = a;\\n    }\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) public view virtual override returns (bytes memory) {\\n        return versionable_addresses[recordVersions[node]][node][coinType];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IAddrResolver).interfaceId ||\\n            interfaceID == type(IAddressResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    function bytesToAddress(\\n        bytes memory b\\n    ) internal pure returns (address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12))\\n        }\\n    }\\n\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f6ebb3144530a02db03379f33ade869c8408eceed36dfbd751aaff198735b55\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3864,"contract":"contracts/resolvers/profiles/AddrResolver.sol:AddrResolver","label":"recordVersions","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint64)"},{"astId":4097,"contract":"contracts/resolvers/profiles/AddrResolver.sol:AddrResolver","label":"versionable_addresses","offset":0,"slot":"1","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint256 => bytes))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bytes_storage)"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_uint256,t_bytes_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"addr(bytes32)":{"notice":"Returns the address associated with an ENS node."},"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"setAddr(bytes32,address)":{"notice":"Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry."}},"version":1}}},"contracts/resolvers/profiles/ContentHashResolver.sol":{"ContentHashResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setContenthash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"clearRecords(bytes32)":{"params":{"node":"The node to update."}},"contenthash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}},"setContenthash(bytes32,bytes)":{"params":{"hash":"The contenthash to set","node":"The node to update."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"clearRecords(bytes32)":"3603d758","contenthash(bytes32)":"bc1c58d1","recordVersions(bytes32)":"d700ff33","setContenthash(bytes32,bytes)":"304e6ade","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}},\"setContenthash(bytes32,bytes)\":{\"params\":{\"hash\":\"The contenthash to set\",\"node\":\"The node to update.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"},\"setContenthash(bytes32,bytes)\":{\"notice\":\"Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/ContentHashResolver.sol\":\"ContentHashResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IContentHashResolver.sol\\\";\\n\\nabstract contract ContentHashResolver is IContentHashResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => bytes)) versionable_hashes;\\n\\n    /**\\n     * Sets the contenthash associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param hash The contenthash to set\\n     */\\n    function setContenthash(\\n        bytes32 node,\\n        bytes calldata hash\\n    ) external virtual authorised(node) {\\n        versionable_hashes[recordVersions[node]][node] = hash;\\n        emit ContenthashChanged(node, hash);\\n    }\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(\\n        bytes32 node\\n    ) external view virtual override returns (bytes memory) {\\n        return versionable_hashes[recordVersions[node]][node];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IContentHashResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xc9755bfb77985375ded880ecab5af41f2b9e8280f30d3e523fe5042ea59f93ea\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3864,"contract":"contracts/resolvers/profiles/ContentHashResolver.sol:ContentHashResolver","label":"recordVersions","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint64)"},{"astId":4288,"contract":"contracts/resolvers/profiles/ContentHashResolver.sol:ContentHashResolver","label":"versionable_hashes","offset":0,"slot":"1","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => bytes))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_bytes_storage)"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"contenthash(bytes32)":{"notice":"Returns the contenthash associated with an ENS node."},"setContenthash(bytes32,bytes)":{"notice":"Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry."}},"version":1}}},"contracts/resolvers/profiles/DNSResolver.sol":{"DNSResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"record","type":"bytes"}],"name":"DNSRecordChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"}],"name":"DNSRecordDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"lastzonehash","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"zonehash","type":"bytes"}],"name":"DNSZonehashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"uint16","name":"resource","type":"uint16"}],"name":"dnsRecord","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"name":"hasDNSRecords","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setDNSRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setZonehash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"zonehash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"clearRecords(bytes32)":{"params":{"node":"The node to update."}},"dnsRecord(bytes32,bytes32,uint16)":{"params":{"name":"the keccak-256 hash of the fully-qualified name for which to fetch the record","node":"the namehash of the node for which to fetch the record","resource":"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"},"returns":{"_0":"the DNS record in wire format if present, otherwise empty"}},"hasDNSRecords(bytes32,bytes32)":{"params":{"name":"the namehash of the node for which to check the records","node":"the namehash of the node for which to check the records"}},"setDNSRecords(bytes32,bytes)":{"params":{"data":"the DNS wire format records to set","node":"the namehash of the node for which to set the records"}},"setZonehash(bytes32,bytes)":{"params":{"hash":"The zonehash to set","node":"The node to update."}},"zonehash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"clearRecords(bytes32)":"3603d758","dnsRecord(bytes32,bytes32,uint16)":"a8fa5682","hasDNSRecords(bytes32,bytes32)":"4cbf6ba4","recordVersions(bytes32)":"d700ff33","setDNSRecords(bytes32,bytes)":"0af179d7","setZonehash(bytes32,bytes)":"ce3decdc","supportsInterface(bytes4)":"01ffc9a7","zonehash(bytes32)":"5c98042b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"hasDNSRecords\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setDNSRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setZonehash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"returns\":{\"_0\":\"the DNS record in wire format if present, otherwise empty\"}},\"hasDNSRecords(bytes32,bytes32)\":{\"params\":{\"name\":\"the namehash of the node for which to check the records\",\"node\":\"the namehash of the node for which to check the records\"}},\"setDNSRecords(bytes32,bytes)\":{\"params\":{\"data\":\"the DNS wire format records to set\",\"node\":\"the namehash of the node for which to set the records\"}},\"setZonehash(bytes32,bytes)\":{\"params\":{\"hash\":\"The zonehash to set\",\"node\":\"The node to update.\"}},\"zonehash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"},\"hasDNSRecords(bytes32,bytes32)\":{\"notice\":\"Check if a given node has records.\"},\"setDNSRecords(bytes32,bytes)\":{\"notice\":\"Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:     a.example.com IN A 1.2.3.4     a.example.com IN A 5.6.7.8     www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:     a.example.com IN A 1.2.3.4     www.example.com IN CNAME a.example.com.     a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.\"},\"setZonehash(bytes32,bytes)\":{\"notice\":\"setZonehash sets the hash for the zone. May only be called by the owner of that node in the ENS registry.\"},\"zonehash(bytes32)\":{\"notice\":\"zonehash obtains the hash for the zone.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/DNSResolver.sol\":\"DNSResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dnssec-oracle/RRUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/BytesUtils.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n    using BytesUtils for *;\\n    using Buffer for *;\\n\\n    /**\\n     * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return The length of the DNS name at 'offset', in bytes.\\n     */\\n    function nameLength(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (uint256) {\\n        uint256 idx = offset;\\n        while (true) {\\n            assert(idx < self.length);\\n            uint256 labelLen = self.readUint8(idx);\\n            idx += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n        }\\n        return idx - offset;\\n    }\\n\\n    /**\\n     * @dev Returns a DNS format name at the specified offset of self.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return ret The name.\\n     */\\n    function readName(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes memory ret) {\\n        uint256 len = nameLength(self, offset);\\n        return self.substring(offset, len);\\n    }\\n\\n    /**\\n     * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return The number of labels in the DNS name at 'offset', in bytes.\\n     */\\n    function labelCount(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (uint256) {\\n        uint256 count = 0;\\n        while (true) {\\n            assert(offset < self.length);\\n            uint256 labelLen = self.readUint8(offset);\\n            offset += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n            count += 1;\\n        }\\n        return count;\\n    }\\n\\n    uint256 constant RRSIG_TYPE = 0;\\n    uint256 constant RRSIG_ALGORITHM = 2;\\n    uint256 constant RRSIG_LABELS = 3;\\n    uint256 constant RRSIG_TTL = 4;\\n    uint256 constant RRSIG_EXPIRATION = 8;\\n    uint256 constant RRSIG_INCEPTION = 12;\\n    uint256 constant RRSIG_KEY_TAG = 16;\\n    uint256 constant RRSIG_SIGNER_NAME = 18;\\n\\n    struct SignedSet {\\n        uint16 typeCovered;\\n        uint8 algorithm;\\n        uint8 labels;\\n        uint32 ttl;\\n        uint32 expiration;\\n        uint32 inception;\\n        uint16 keytag;\\n        bytes signerName;\\n        bytes data;\\n        bytes name;\\n    }\\n\\n    function readSignedSet(\\n        bytes memory data\\n    ) internal pure returns (SignedSet memory self) {\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\n        self.labels = data.readUint8(RRSIG_LABELS);\\n        self.ttl = data.readUint32(RRSIG_TTL);\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\n        self.data = data.substring(\\n            RRSIG_SIGNER_NAME + self.signerName.length,\\n            data.length - RRSIG_SIGNER_NAME - self.signerName.length\\n        );\\n    }\\n\\n    function rrs(\\n        SignedSet memory rrset\\n    ) internal pure returns (RRIterator memory) {\\n        return iterateRRs(rrset.data, 0);\\n    }\\n\\n    /**\\n     * @dev An iterator over resource records.\\n     */\\n    struct RRIterator {\\n        bytes data;\\n        uint256 offset;\\n        uint16 dnstype;\\n        uint16 class;\\n        uint32 ttl;\\n        uint256 rdataOffset;\\n        uint256 nextOffset;\\n    }\\n\\n    /**\\n     * @dev Begins iterating over resource records.\\n     * @param self The byte string to read from.\\n     * @param offset The offset to start reading at.\\n     * @return ret An iterator object.\\n     */\\n    function iterateRRs(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (RRIterator memory ret) {\\n        ret.data = self;\\n        ret.nextOffset = offset;\\n        next(ret);\\n    }\\n\\n    /**\\n     * @dev Returns true iff there are more RRs to iterate.\\n     * @param iter The iterator to check.\\n     * @return True iff the iterator has finished.\\n     */\\n    function done(RRIterator memory iter) internal pure returns (bool) {\\n        return iter.offset >= iter.data.length;\\n    }\\n\\n    /**\\n     * @dev Moves the iterator to the next resource record.\\n     * @param iter The iterator to advance.\\n     */\\n    function next(RRIterator memory iter) internal pure {\\n        iter.offset = iter.nextOffset;\\n        if (iter.offset >= iter.data.length) {\\n            return;\\n        }\\n\\n        // Skip the name\\n        uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n        // Read type, class, and ttl\\n        iter.dnstype = iter.data.readUint16(off);\\n        off += 2;\\n        iter.class = iter.data.readUint16(off);\\n        off += 2;\\n        iter.ttl = iter.data.readUint32(off);\\n        off += 4;\\n\\n        // Read the rdata\\n        uint256 rdataLength = iter.data.readUint16(off);\\n        off += 2;\\n        iter.rdataOffset = off;\\n        iter.nextOffset = off + rdataLength;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the current record.\\n     * @param iter The iterator.\\n     * @return A new bytes object containing the owner name from the RR.\\n     */\\n    function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n        return\\n            iter.data.substring(\\n                iter.offset,\\n                nameLength(iter.data, iter.offset)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the rdata portion of the current record.\\n     * @param iter The iterator.\\n     * @return A new bytes object containing the RR's RDATA.\\n     */\\n    function rdata(\\n        RRIterator memory iter\\n    ) internal pure returns (bytes memory) {\\n        return\\n            iter.data.substring(\\n                iter.rdataOffset,\\n                iter.nextOffset - iter.rdataOffset\\n            );\\n    }\\n\\n    uint256 constant DNSKEY_FLAGS = 0;\\n    uint256 constant DNSKEY_PROTOCOL = 2;\\n    uint256 constant DNSKEY_ALGORITHM = 3;\\n    uint256 constant DNSKEY_PUBKEY = 4;\\n\\n    struct DNSKEY {\\n        uint16 flags;\\n        uint8 protocol;\\n        uint8 algorithm;\\n        bytes publicKey;\\n    }\\n\\n    function readDNSKEY(\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (DNSKEY memory self) {\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\n        self.publicKey = data.substring(\\n            offset + DNSKEY_PUBKEY,\\n            length - DNSKEY_PUBKEY\\n        );\\n    }\\n\\n    uint256 constant DS_KEY_TAG = 0;\\n    uint256 constant DS_ALGORITHM = 2;\\n    uint256 constant DS_DIGEST_TYPE = 3;\\n    uint256 constant DS_DIGEST = 4;\\n\\n    struct DS {\\n        uint16 keytag;\\n        uint8 algorithm;\\n        uint8 digestType;\\n        bytes digest;\\n    }\\n\\n    function readDS(\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (DS memory self) {\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\n    }\\n\\n    function isSubdomainOf(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        uint256 off = 0;\\n        uint256 counts = labelCount(self, 0);\\n        uint256 othercounts = labelCount(other, 0);\\n\\n        while (counts > othercounts) {\\n            off = progress(self, off);\\n            counts--;\\n        }\\n\\n        return self.equals(off, other, 0);\\n    }\\n\\n    function compareNames(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        if (self.equals(other)) {\\n            return 0;\\n        }\\n\\n        uint256 off;\\n        uint256 otheroff;\\n        uint256 prevoff;\\n        uint256 otherprevoff;\\n        uint256 counts = labelCount(self, 0);\\n        uint256 othercounts = labelCount(other, 0);\\n\\n        // Keep removing labels from the front of the name until both names are equal length\\n        while (counts > othercounts) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            counts--;\\n        }\\n\\n        while (othercounts > counts) {\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            othercounts--;\\n        }\\n\\n        // Compare the last nonequal labels to each other\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            counts -= 1;\\n        }\\n\\n        if (off == 0) {\\n            return -1;\\n        }\\n        if (otheroff == 0) {\\n            return 1;\\n        }\\n\\n        return\\n            self.compare(\\n                prevoff + 1,\\n                self.readUint8(prevoff),\\n                other,\\n                otherprevoff + 1,\\n                other.readUint8(otherprevoff)\\n            );\\n    }\\n\\n    /**\\n     * @dev Compares two serial numbers using RFC1982 serial number math.\\n     */\\n    function serialNumberGte(\\n        uint32 i1,\\n        uint32 i2\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            return int32(i1) - int32(i2) >= 0;\\n        }\\n    }\\n\\n    function progress(\\n        bytes memory body,\\n        uint256 off\\n    ) internal pure returns (uint256) {\\n        return off + 1 + body.readUint8(off);\\n    }\\n\\n    /**\\n     * @dev Computes the keytag for a chunk of data.\\n     * @param data The data to compute a keytag for.\\n     * @return The computed key tag.\\n     */\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n        /* This function probably deserves some explanation.\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\\n         *\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n         *         uint ac;\\n         *         for (uint i = 0; i < data.length; i++) {\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\n         *         }\\n         *         return uint16(ac + (ac >> 16));\\n         *     }\\n         *\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\\n         * large words work in our favour.\\n         *\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\n         *\\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\\n         * and the remaining sums can be done just on ac1.\\n         */\\n        unchecked {\\n            require(data.length <= 8192, \\\"Long keys not permitted\\\");\\n            uint256 ac1;\\n            uint256 ac2;\\n            for (uint256 i = 0; i < data.length + 31; i += 32) {\\n                uint256 word;\\n                assembly {\\n                    word := mload(add(add(data, 32), i))\\n                }\\n                if (i + 32 > data.length) {\\n                    uint256 unused = 256 - (data.length - i) * 8;\\n                    word = (word >> unused) << unused;\\n                }\\n                ac1 +=\\n                    (word &\\n                        0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >>\\n                    8;\\n                ac2 += (word &\\n                    0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\n            }\\n            ac1 =\\n                (ac1 &\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\n                ((ac1 &\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\n                    16);\\n            ac2 =\\n                (ac2 &\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\n                ((ac2 &\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\n                    16);\\n            ac1 = (ac1 << 8) + ac2;\\n            ac1 =\\n                (ac1 &\\n                    0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) +\\n                ((ac1 &\\n                    0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >>\\n                    32);\\n            ac1 =\\n                (ac1 &\\n                    0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) +\\n                ((ac1 &\\n                    0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >>\\n                    64);\\n            ac1 =\\n                (ac1 &\\n                    0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) +\\n                (ac1 >> 128);\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\n            return uint16(ac1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4470c1578b2ee78e64bd8925bf391ffe98d5497aeef15b593380c7fe905af5d\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/DNSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"../../dnssec-oracle/RRUtils.sol\\\";\\nimport \\\"./IDNSRecordResolver.sol\\\";\\nimport \\\"./IDNSZoneResolver.sol\\\";\\n\\nabstract contract DNSResolver is\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    ResolverBase\\n{\\n    using RRUtils for *;\\n    using BytesUtils for bytes;\\n\\n    // Zone hashes for the domains.\\n    // A zone hash is an EIP-1577 content hash in binary format that should point to a\\n    // resource containing a single zonefile.\\n    // node => contenthash\\n    mapping(uint64 => mapping(bytes32 => bytes)) private versionable_zonehashes;\\n\\n    // The records themselves.  Stored as binary RRSETs\\n    // node => version => name => resource => data\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))\\n        private versionable_records;\\n\\n    // Count of number of entries for a given name.  Required for DNS resolvers\\n    // when resolving wildcards.\\n    // node => version => name => number of records\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))\\n        private versionable_nameEntriesCount;\\n\\n    /**\\n     * Set one or more DNS records.  Records are supplied in wire-format.\\n     * Records with the same node/name/resource must be supplied one after the\\n     * other to ensure the data is updated correctly. For example, if the data\\n     * was supplied:\\n     *     a.example.com IN A 1.2.3.4\\n     *     a.example.com IN A 5.6.7.8\\n     *     www.example.com IN CNAME a.example.com.\\n     * then this would store the two A records for a.example.com correctly as a\\n     * single RRSET, however if the data was supplied:\\n     *     a.example.com IN A 1.2.3.4\\n     *     www.example.com IN CNAME a.example.com.\\n     *     a.example.com IN A 5.6.7.8\\n     * then this would store the first A record, the CNAME, then the second A\\n     * record which would overwrite the first.\\n     *\\n     * @param node the namehash of the node for which to set the records\\n     * @param data the DNS wire format records to set\\n     */\\n    function setDNSRecords(\\n        bytes32 node,\\n        bytes calldata data\\n    ) external virtual authorised(node) {\\n        uint16 resource = 0;\\n        uint256 offset = 0;\\n        bytes memory name;\\n        bytes memory value;\\n        bytes32 nameHash;\\n        uint64 version = recordVersions[node];\\n        // Iterate over the data to add the resource records\\n        for (\\n            RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n            !iter.done();\\n            iter.next()\\n        ) {\\n            if (resource == 0) {\\n                resource = iter.dnstype;\\n                name = iter.name();\\n                nameHash = keccak256(abi.encodePacked(name));\\n                value = bytes(iter.rdata());\\n            } else {\\n                bytes memory newName = iter.name();\\n                if (resource != iter.dnstype || !name.equals(newName)) {\\n                    setDNSRRSet(\\n                        node,\\n                        name,\\n                        resource,\\n                        data,\\n                        offset,\\n                        iter.offset - offset,\\n                        value.length == 0,\\n                        version\\n                    );\\n                    resource = iter.dnstype;\\n                    offset = iter.offset;\\n                    name = newName;\\n                    nameHash = keccak256(name);\\n                    value = bytes(iter.rdata());\\n                }\\n            }\\n        }\\n        if (name.length > 0) {\\n            setDNSRRSet(\\n                node,\\n                name,\\n                resource,\\n                data,\\n                offset,\\n                data.length - offset,\\n                value.length == 0,\\n                version\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) public view virtual override returns (bytes memory) {\\n        return versionable_records[recordVersions[node]][node][name][resource];\\n    }\\n\\n    /**\\n     * Check if a given node has records.\\n     * @param node the namehash of the node for which to check the records\\n     * @param name the namehash of the node for which to check the records\\n     */\\n    function hasDNSRecords(\\n        bytes32 node,\\n        bytes32 name\\n    ) public view virtual returns (bool) {\\n        return (versionable_nameEntriesCount[recordVersions[node]][node][\\n            name\\n        ] != 0);\\n    }\\n\\n    /**\\n     * setZonehash sets the hash for the zone.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param hash The zonehash to set\\n     */\\n    function setZonehash(\\n        bytes32 node,\\n        bytes calldata hash\\n    ) external virtual authorised(node) {\\n        uint64 currentRecordVersion = recordVersions[node];\\n        bytes memory oldhash = versionable_zonehashes[currentRecordVersion][\\n            node\\n        ];\\n        versionable_zonehashes[currentRecordVersion][node] = hash;\\n        emit DNSZonehashChanged(node, oldhash, hash);\\n    }\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(\\n        bytes32 node\\n    ) external view virtual override returns (bytes memory) {\\n        return versionable_zonehashes[recordVersions[node]][node];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IDNSRecordResolver).interfaceId ||\\n            interfaceID == type(IDNSZoneResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    function setDNSRRSet(\\n        bytes32 node,\\n        bytes memory name,\\n        uint16 resource,\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 size,\\n        bool deleteRecord,\\n        uint64 version\\n    ) private {\\n        bytes32 nameHash = keccak256(name);\\n        bytes memory rrData = data.substring(offset, size);\\n        if (deleteRecord) {\\n            if (\\n                versionable_records[version][node][nameHash][resource].length !=\\n                0\\n            ) {\\n                versionable_nameEntriesCount[version][node][nameHash]--;\\n            }\\n            delete (versionable_records[version][node][nameHash][resource]);\\n            emit DNSRecordDeleted(node, name, resource);\\n        } else {\\n            if (\\n                versionable_records[version][node][nameHash][resource].length ==\\n                0\\n            ) {\\n                versionable_nameEntriesCount[version][node][nameHash]++;\\n            }\\n            versionable_records[version][node][nameHash][resource] = rrData;\\n            emit DNSRecordChanged(node, name, resource, rrData);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7233e4d2edca222ce6e1cdb07adf127ab52ecaea599fa5369971a7b28dbc59ac\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"},\"contracts/utils/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal.\\n     * @param self The first bytes to compare.\\n     * @param other The second bytes to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first bytes to compare.\\n     * @param offset The offset of self.\\n     * @param len    The length of self.\\n     * @param other The second bytes to compare.\\n     * @param otheroffset The offset of the other string.\\n     * @param otherlen    The length of the other string.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if (offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if (otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n\\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask;\\n                if (shortest - idx >= 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\n                }\\n                int256 diff = int256(a & mask) - int256(b & mask);\\n                if (diff != 0) return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @param len The number of bytes to compare\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n     *      they are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n     * @dev Returns the 8-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\n     */\\n    function readUint8(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n     * @dev Returns the 16-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\n     */\\n    function readUint16(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\n     */\\n    function readUint32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes20(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the n byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes.\\n     * @param len The number of bytes.\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Copies a substring into a new byte string.\\n     * @param self The byte string to copy from.\\n     * @param offset The offset to start copying at.\\n     * @param len The number of bytes to copy.\\n     */\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /**\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\n     * @param self The string to search\\n     * @param off The offset to start searching at\\n     * @param len The number of bytes to search\\n     * @param needle The byte to search for\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n     */\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0xc566a3569af880a096a9bfb2fbb77060ef7aecde1a205dc26446a58877412060\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3864,"contract":"contracts/resolvers/profiles/DNSResolver.sol:DNSResolver","label":"recordVersions","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint64)"},{"astId":4378,"contract":"contracts/resolvers/profiles/DNSResolver.sol:DNSResolver","label":"versionable_zonehashes","offset":0,"slot":"1","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))"},{"astId":4388,"contract":"contracts/resolvers/profiles/DNSResolver.sol:DNSResolver","label":"versionable_records","offset":0,"slot":"2","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))"},{"astId":4396,"contract":"contracts/resolvers/profiles/DNSResolver.sol:DNSResolver","label":"versionable_nameEntriesCount","offset":0,"slot":"3","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16)))"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))"},"t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes32 => uint16))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint16)"},"t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint16 => bytes))","numberOfBytes":"32","value":"t_mapping(t_uint16,t_bytes_storage)"},"t_mapping(t_bytes32,t_uint16)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint16)","numberOfBytes":"32","value":"t_uint16"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_uint16,t_bytes_storage)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => bytes))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_bytes_storage)"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16))"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"dnsRecord(bytes32,bytes32,uint16)":{"notice":"Obtain a DNS record."},"hasDNSRecords(bytes32,bytes32)":{"notice":"Check if a given node has records."},"setDNSRecords(bytes32,bytes)":{"notice":"Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:     a.example.com IN A 1.2.3.4     a.example.com IN A 5.6.7.8     www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:     a.example.com IN A 1.2.3.4     www.example.com IN CNAME a.example.com.     a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first."},"setZonehash(bytes32,bytes)":{"notice":"setZonehash sets the hash for the zone. May only be called by the owner of that node in the ENS registry."},"zonehash(bytes32)":{"notice":"zonehash obtains the hash for the zone."}},"version":1}}},"contracts/resolvers/profiles/IABIResolver.sol":{"IABIResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"ABI(bytes32,uint256)":{"params":{"contentTypes":"A bitwise OR of the ABI formats accepted by the caller.","node":"The ENS node to query"},"returns":{"_0":"contentType The content type of the return value","_1":"data The ABI data"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ABI(bytes32,uint256)":"2203ab56"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"returns\":{\"_0\":\"contentType The content type of the return value\",\"_1\":\"data The ABI data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IABIResolver.sol\":\"IABIResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ABI(bytes32,uint256)":{"notice":"Returns the ABI associated with an ENS node. Defined in EIP205."}},"version":1}}},"contracts/resolvers/profiles/IAddrResolver.sol":{"IAddrResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"addr(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated address."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addr(bytes32)":"3b3b57de"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"}},\"notice\":\"Interface for the legacy (ETH-only) addr function.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IAddrResolver.sol\":\"IAddrResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"addr(bytes32)":{"notice":"Returns the address associated with an ENS node."}},"notice":"Interface for the legacy (ETH-only) addr function.","version":1}}},"contracts/resolvers/profiles/IAddressResolver.sol":{"IAddressResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"coinType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addr(bytes32,uint256)":"f1cb7e06"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface for the new (multicoin) addr function.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IAddressResolver.sol\":\"IAddressResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Interface for the new (multicoin) addr function.","version":1}}},"contracts/resolvers/profiles/IContentHashResolver.sol":{"IContentHashResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"contenthash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"contenthash(bytes32)":"bc1c58d1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IContentHashResolver.sol\":\"IContentHashResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"contenthash(bytes32)":{"notice":"Returns the contenthash associated with an ENS node."}},"version":1}}},"contracts/resolvers/profiles/IDNSRecordResolver.sol":{"IDNSRecordResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"record","type":"bytes"}],"name":"DNSRecordChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"}],"name":"DNSRecordDeleted","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"uint16","name":"resource","type":"uint16"}],"name":"dnsRecord","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"dnsRecord(bytes32,bytes32,uint16)":{"params":{"name":"the keccak-256 hash of the fully-qualified name for which to fetch the record","node":"the namehash of the node for which to fetch the record","resource":"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"},"returns":{"_0":"the DNS record in wire format if present, otherwise empty"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"dnsRecord(bytes32,bytes32,uint16)":"a8fa5682"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"returns\":{\"_0\":\"the DNS record in wire format if present, otherwise empty\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":\"IDNSRecordResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"dnsRecord(bytes32,bytes32,uint16)":{"notice":"Obtain a DNS record."}},"version":1}}},"contracts/resolvers/profiles/IDNSZoneResolver.sol":{"IDNSZoneResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"lastzonehash","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"zonehash","type":"bytes"}],"name":"DNSZonehashChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"zonehash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"zonehash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"zonehash(bytes32)":"5c98042b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"zonehash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"zonehash(bytes32)\":{\"notice\":\"zonehash obtains the hash for the zone.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":\"IDNSZoneResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"zonehash(bytes32)":{"notice":"zonehash obtains the hash for the zone."}},"version":1}}},"contracts/resolvers/profiles/IInterfaceResolver.sol":{"IInterfaceResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"indexed":false,"internalType":"address","name":"implementer","type":"address"}],"name":"InterfaceChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"interfaceImplementer(bytes32,bytes4)":{"params":{"interfaceID":"The EIP 165 interface ID to check for.","node":"The ENS node to query."},"returns":{"_0":"The address that implements this interface, or 0 if the interface is unsupported."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"interfaceImplementer(bytes32,bytes4)":"124a319c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IInterfaceResolver.sol\":\"IInterfaceResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"interfaceImplementer(bytes32,bytes4)":{"notice":"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."}},"version":1}}},"contracts/resolvers/profiles/INameResolver.sol":{"INameResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"string","name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"name(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated name."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"name(bytes32)":"691f3431"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/INameResolver.sol\":\"INameResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"name(bytes32)":{"notice":"Returns the name associated with an ENS node, for reverse records. Defined in EIP181."}},"version":1}}},"contracts/resolvers/profiles/IPubkeyResolver.sol":{"IPubkeyResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"x","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"pubkey(bytes32)":{"params":{"node":"The ENS node to query"},"returns":{"x":"The X coordinate of the curve point for the public key.","y":"The Y coordinate of the curve point for the public key."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"pubkey(bytes32)":"c8690233"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IPubkeyResolver.sol\":\"IPubkeyResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"pubkey(bytes32)":{"notice":"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."}},"version":1}}},"contracts/resolvers/profiles/ITextResolver.sol":{"ITextResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"TextChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"}],"name":"text","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"text(bytes32,string)":{"params":{"key":"The text data key to query.","node":"The ENS node to query."},"returns":{"_0":"The associated text data."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"text(bytes32,string)":"59d1d43c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/ITextResolver.sol\":\"ITextResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"text(bytes32,string)":{"notice":"Returns the text data associated with an ENS node and key."}},"version":1}}},"contracts/resolvers/profiles/IVersionableResolver.sol":{"IVersionableResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"recordVersions(bytes32)":"d700ff33"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/IVersionableResolver.sol\":\"IVersionableResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/resolvers/profiles/InterfaceResolver.sol":{"InterfaceResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"coinType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"indexed":false,"internalType":"address","name":"implementer","type":"address"}],"name":"InterfaceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"},{"internalType":"bytes","name":"a","type":"bytes"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"a","type":"address"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"internalType":"address","name":"implementer","type":"address"}],"name":"setInterface","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"addr(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated address."}},"clearRecords(bytes32)":{"params":{"node":"The node to update."}},"interfaceImplementer(bytes32,bytes4)":{"params":{"interfaceID":"The EIP 165 interface ID to check for.","node":"The ENS node to query."},"returns":{"_0":"The address that implements this interface, or 0 if the interface is unsupported."}},"setAddr(bytes32,address)":{"params":{"a":"The address to set.","node":"The node to update."}},"setInterface(bytes32,bytes4,address)":{"params":{"implementer":"The address of a contract that implements this interface for this node.","interfaceID":"The EIP 165 interface ID.","node":"The node to update."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addr(bytes32)":"3b3b57de","addr(bytes32,uint256)":"f1cb7e06","clearRecords(bytes32)":"3603d758","interfaceImplementer(bytes32,bytes4)":"124a319c","recordVersions(bytes32)":"d700ff33","setAddr(bytes32,address)":"d5fa2b00","setAddr(bytes32,uint256,bytes)":"8b95dd71","setInterface(bytes32,bytes4,address)":"e59d895d","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}},\"setAddr(bytes32,address)\":{\"params\":{\"a\":\"The address to set.\",\"node\":\"The node to update.\"}},\"setInterface(bytes32,bytes4,address)\":{\"params\":{\"implementer\":\"The address of a contract that implements this interface for this node.\",\"interfaceID\":\"The EIP 165 interface ID.\",\"node\":\"The node to update.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setInterface(bytes32,bytes4,address)\":{\"notice\":\"Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/InterfaceResolver.sol\":\"InterfaceResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/AddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IAddrResolver.sol\\\";\\nimport \\\"./IAddressResolver.sol\\\";\\n\\nabstract contract AddrResolver is\\n    IAddrResolver,\\n    IAddressResolver,\\n    ResolverBase\\n{\\n    uint256 private constant COIN_TYPE_ETH = 60;\\n\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_addresses;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(\\n        bytes32 node,\\n        address a\\n    ) external virtual authorised(node) {\\n        setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(\\n        bytes32 node\\n    ) public view virtual override returns (address payable) {\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\n        if (a.length == 0) {\\n            return payable(0);\\n        }\\n        return bytesToAddress(a);\\n    }\\n\\n    function setAddr(\\n        bytes32 node,\\n        uint256 coinType,\\n        bytes memory a\\n    ) public virtual authorised(node) {\\n        emit AddressChanged(node, coinType, a);\\n        if (coinType == COIN_TYPE_ETH) {\\n            emit AddrChanged(node, bytesToAddress(a));\\n        }\\n        versionable_addresses[recordVersions[node]][node][coinType] = a;\\n    }\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) public view virtual override returns (bytes memory) {\\n        return versionable_addresses[recordVersions[node]][node][coinType];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IAddrResolver).interfaceId ||\\n            interfaceID == type(IAddressResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    function bytesToAddress(\\n        bytes memory b\\n    ) internal pure returns (address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12))\\n        }\\n    }\\n\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f6ebb3144530a02db03379f33ade869c8408eceed36dfbd751aaff198735b55\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/InterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./AddrResolver.sol\\\";\\nimport \\\"./IInterfaceResolver.sol\\\";\\n\\nabstract contract InterfaceResolver is IInterfaceResolver, AddrResolver {\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address))) versionable_interfaces;\\n\\n    /**\\n     * Sets an interface associated with a name.\\n     * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n     * @param node The node to update.\\n     * @param interfaceID The EIP 165 interface ID.\\n     * @param implementer The address of a contract that implements this interface for this node.\\n     */\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external virtual authorised(node) {\\n        versionable_interfaces[recordVersions[node]][node][\\n            interfaceID\\n        ] = implementer;\\n        emit InterfaceChanged(node, interfaceID, implementer);\\n    }\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view virtual override returns (address) {\\n        address implementer = versionable_interfaces[recordVersions[node]][\\n            node\\n        ][interfaceID];\\n        if (implementer != address(0)) {\\n            return implementer;\\n        }\\n\\n        address a = addr(node);\\n        if (a == address(0)) {\\n            return address(0);\\n        }\\n\\n        (bool success, bytes memory returnData) = a.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"supportsInterface(bytes4)\\\",\\n                type(IERC165).interfaceId\\n            )\\n        );\\n        if (!success || returnData.length < 32 || returnData[31] == 0) {\\n            // EIP 165 not supported by target\\n            return address(0);\\n        }\\n\\n        (success, returnData) = a.staticcall(\\n            abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", interfaceID)\\n        );\\n        if (!success || returnData.length < 32 || returnData[31] == 0) {\\n            // Specified interface not supported by target\\n            return address(0);\\n        }\\n\\n        return a;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IInterfaceResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x820ec60183e7a49a4ee399cf4708acb776725c8e4ad275d1f316c152eace0a59\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3864,"contract":"contracts/resolvers/profiles/InterfaceResolver.sol:InterfaceResolver","label":"recordVersions","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint64)"},{"astId":4097,"contract":"contracts/resolvers/profiles/InterfaceResolver.sol:InterfaceResolver","label":"versionable_addresses","offset":0,"slot":"1","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))"},{"astId":5076,"contract":"contracts/resolvers/profiles/InterfaceResolver.sol:InterfaceResolver","label":"versionable_interfaces","offset":0,"slot":"2","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes4,t_address)))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes4 => address))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_address)"},"t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint256 => bytes))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bytes_storage)"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_bytes4,t_address)":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_bytes_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes4,t_address)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"addr(bytes32)":{"notice":"Returns the address associated with an ENS node."},"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"interfaceImplementer(bytes32,bytes4)":{"notice":"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."},"setAddr(bytes32,address)":{"notice":"Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"setInterface(bytes32,bytes4,address)":{"notice":"Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support."}},"version":1}}},"contracts/resolvers/profiles/NameResolver.sol":{"NameResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"string","name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"newName","type":"string"}],"name":"setName","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"clearRecords(bytes32)":{"params":{"node":"The node to update."}},"name(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated name."}},"setName(bytes32,string)":{"params":{"node":"The node to update."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"clearRecords(bytes32)":"3603d758","name(bytes32)":"691f3431","recordVersions(bytes32)":"d700ff33","setName(bytes32,string)":"77372213","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"setName(bytes32,string)\":{\"params\":{\"node\":\"The node to update.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"},\"setName(bytes32,string)\":{\"notice\":\"Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/NameResolver.sol\":\"NameResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/NameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./INameResolver.sol\\\";\\n\\nabstract contract NameResolver is INameResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => string)) versionable_names;\\n\\n    /**\\n     * Sets the name associated with an ENS node, for reverse records.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function setName(\\n        bytes32 node,\\n        string calldata newName\\n    ) external virtual authorised(node) {\\n        versionable_names[recordVersions[node]][node] = newName;\\n        emit NameChanged(node, newName);\\n    }\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(\\n        bytes32 node\\n    ) external view virtual override returns (string memory) {\\n        return versionable_names[recordVersions[node]][node];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(INameResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x52d0bbb8f9dd33fae471ef2f5f6b3118b221954e5bb7ba724885d4562e75b8e2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3864,"contract":"contracts/resolvers/profiles/NameResolver.sol:NameResolver","label":"recordVersions","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint64)"},{"astId":5268,"contract":"contracts/resolvers/profiles/NameResolver.sol:NameResolver","label":"versionable_names","offset":0,"slot":"1","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_string_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => string))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_string_storage)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"name(bytes32)":{"notice":"Returns the name associated with an ENS node, for reverse records. Defined in EIP181."},"setName(bytes32,string)":{"notice":"Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry."}},"version":1}}},"contracts/resolvers/profiles/PubkeyResolver.sol":{"PubkeyResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"x","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"setPubkey","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"clearRecords(bytes32)":{"params":{"node":"The node to update."}},"pubkey(bytes32)":{"params":{"node":"The ENS node to query"},"returns":{"x":"The X coordinate of the curve point for the public key.","y":"The Y coordinate of the curve point for the public key."}},"setPubkey(bytes32,bytes32,bytes32)":{"params":{"node":"The ENS node to query","x":"the X coordinate of the curve point for the public key.","y":"the Y coordinate of the curve point for the public key."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"clearRecords(bytes32)":"3603d758","pubkey(bytes32)":"c8690233","recordVersions(bytes32)":"d700ff33","setPubkey(bytes32,bytes32,bytes32)":"29cd62ea","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}},\"setPubkey(bytes32,bytes32,bytes32)\":{\"params\":{\"node\":\"The ENS node to query\",\"x\":\"the X coordinate of the curve point for the public key.\",\"y\":\"the Y coordinate of the curve point for the public key.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"},\"setPubkey(bytes32,bytes32,bytes32)\":{\"notice\":\"Sets the SECP256k1 public key associated with an ENS node.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/PubkeyResolver.sol\":\"PubkeyResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/PubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IPubkeyResolver.sol\\\";\\n\\nabstract contract PubkeyResolver is IPubkeyResolver, ResolverBase {\\n    struct PublicKey {\\n        bytes32 x;\\n        bytes32 y;\\n    }\\n\\n    mapping(uint64 => mapping(bytes32 => PublicKey)) versionable_pubkeys;\\n\\n    /**\\n     * Sets the SECP256k1 public key associated with an ENS node.\\n     * @param node The ENS node to query\\n     * @param x the X coordinate of the curve point for the public key.\\n     * @param y the Y coordinate of the curve point for the public key.\\n     */\\n    function setPubkey(\\n        bytes32 node,\\n        bytes32 x,\\n        bytes32 y\\n    ) external virtual authorised(node) {\\n        versionable_pubkeys[recordVersions[node]][node] = PublicKey(x, y);\\n        emit PubkeyChanged(node, x, y);\\n    }\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(\\n        bytes32 node\\n    ) external view virtual override returns (bytes32 x, bytes32 y) {\\n        uint64 currentRecordVersion = recordVersions[node];\\n        return (\\n            versionable_pubkeys[currentRecordVersion][node].x,\\n            versionable_pubkeys[currentRecordVersion][node].y\\n        );\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IPubkeyResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x1a1f10a0e40520c998a9296fc81c092c81521e05a784e9bd9ee44cc4c62c8c78\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3864,"contract":"contracts/resolvers/profiles/PubkeyResolver.sol:PubkeyResolver","label":"recordVersions","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint64)"},{"astId":5355,"contract":"contracts/resolvers/profiles/PubkeyResolver.sol:PubkeyResolver","label":"versionable_pubkeys","offset":0,"slot":"1","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_struct(PublicKey)5348_storage))"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_struct(PublicKey)5348_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PubkeyResolver.PublicKey)","numberOfBytes":"32","value":"t_struct(PublicKey)5348_storage"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_struct(PublicKey)5348_storage))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => struct PubkeyResolver.PublicKey))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(PublicKey)5348_storage)"},"t_struct(PublicKey)5348_storage":{"encoding":"inplace","label":"struct PubkeyResolver.PublicKey","members":[{"astId":5345,"contract":"contracts/resolvers/profiles/PubkeyResolver.sol:PubkeyResolver","label":"x","offset":0,"slot":"0","type":"t_bytes32"},{"astId":5347,"contract":"contracts/resolvers/profiles/PubkeyResolver.sol:PubkeyResolver","label":"y","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"pubkey(bytes32)":{"notice":"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."},"setPubkey(bytes32,bytes32,bytes32)":{"notice":"Sets the SECP256k1 public key associated with an ENS node."}},"version":1}}},"contracts/resolvers/profiles/TextResolver.sol":{"TextResolver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"TextChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"},{"internalType":"string","name":"value","type":"string"}],"name":"setText","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"}],"name":"text","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"clearRecords(bytes32)":{"params":{"node":"The node to update."}},"setText(bytes32,string,string)":{"params":{"key":"The key to set.","node":"The node to update.","value":"The text data value to set."}},"text(bytes32,string)":{"params":{"key":"The text data key to query.","node":"The ENS node to query."},"returns":{"_0":"The associated text data."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"clearRecords(bytes32)":"3603d758","recordVersions(bytes32)":"d700ff33","setText(bytes32,string,string)":"10f13a8c","supportsInterface(bytes4)":"01ffc9a7","text(bytes32,string)":"59d1d43c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"setText(bytes32,string,string)\":{\"params\":{\"key\":\"The key to set.\",\"node\":\"The node to update.\",\"value\":\"The text data value to set.\"}},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setText(bytes32,string,string)\":{\"notice\":\"Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/TextResolver.sol\":\"TextResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x893049fffd6feee06d7acef1680f6e26505bedff62a9f7a17e921c0ba2f66307\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/TextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./ITextResolver.sol\\\";\\n\\nabstract contract TextResolver is ITextResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => mapping(string => string))) versionable_texts;\\n\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external virtual authorised(node) {\\n        versionable_texts[recordVersions[node]][node][key] = value;\\n        emit TextChanged(node, key, key, value);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view virtual override returns (string memory) {\\n        return versionable_texts[recordVersions[node]][node][key];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(ITextResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xf9bedd807add38136779d84083ac2fa4f8c92d017c9e1a72fbc9003fa5074379\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3864,"contract":"contracts/resolvers/profiles/TextResolver.sol:TextResolver","label":"recordVersions","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint64)"},{"astId":5458,"contract":"contracts/resolvers/profiles/TextResolver.sol:TextResolver","label":"versionable_texts","offset":0,"slot":"1","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(string => string))","numberOfBytes":"32","value":"t_mapping(t_string_memory_ptr,t_string_storage)"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(string => string)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"setText(bytes32,string,string)":{"notice":"Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry."},"text(bytes32,string)":{"notice":"Returns the text data associated with an ENS node and key."}},"version":1}}},"contracts/reverseRegistrar/IReverseRegistrar.sol":{"IReverseRegistrar":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"claim","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"}],"name":"claimForAddr","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"}],"name":"claimWithResolver","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"node","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"resolver","type":"address"}],"name":"setDefaultResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"setName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"string","name":"name","type":"string"}],"name":"setNameForAddr","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"claim(address)":"1e83409a","claimForAddr(address,address,address)":"65669631","claimWithResolver(address,address)":"0f5a5466","node(address)":"bffbe61c","setDefaultResolver(address)":"c66485b2","setName(string)":"c47f0027","setNameForAddr(address,address,address,string)":"7a806d6b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimWithResolver\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setDefaultResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setNameForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reverseRegistrar/IReverseRegistrar.sol\":\"IReverseRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/BytesUtils.sol":{"BytesUtils":{"abi":[{"inputs":[{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"OffsetOutOfBoundsError","type":"error"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9606dd991eafac13fe7426cd8553ee2283ac243fa0d27de1d8800261af1b08064736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 PUSH1 0x6D 0xD9 SWAP2 0xEA STATICCALL 0xC1 EXTCODEHASH 0xE7 TIMESTAMP PUSH13 0xD8553EE2283AC243FA0D27DE1D DUP9 STOP 0x26 BYTE CALL 0xB0 DUP1 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"56:14399:42:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;56:14399:42;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9606dd991eafac13fe7426cd8553ee2283ac243fa0d27de1d8800261af1b08064736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 PUSH1 0x6D 0xD9 SWAP2 0xEA STATICCALL 0xC1 EXTCODEHASH 0xE7 TIMESTAMP PUSH13 0xD8553EE2283AC243FA0D27DE1D DUP9 STOP 0x26 BYTE CALL 0xB0 DUP1 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"56:14399:42:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"base32HexDecodeWord(bytes memory,uint256,uint256)":"infinite","compare(bytes memory,bytes memory)":"infinite","compare(bytes memory,uint256,uint256,bytes memory,uint256,uint256)":"infinite","equals(bytes memory,bytes memory)":"infinite","equals(bytes memory,uint256,bytes memory)":"infinite","equals(bytes memory,uint256,bytes memory,uint256)":"infinite","equals(bytes memory,uint256,bytes memory,uint256,uint256)":"infinite","find(bytes memory,uint256,uint256,bytes1)":"infinite","keccak(bytes memory,uint256,uint256)":"infinite","memcpy(uint256,uint256,uint256)":"infinite","namehash(bytes memory,uint256)":"infinite","readBytes20(bytes memory,uint256)":"infinite","readBytes32(bytes memory,uint256)":"infinite","readBytesN(bytes memory,uint256,uint256)":"infinite","readLabel(bytes memory,uint256)":"infinite","readUint16(bytes memory,uint256)":"infinite","readUint32(bytes memory,uint256)":"infinite","readUint8(bytes memory,uint256)":"infinite","substring(bytes memory,uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"OffsetOutOfBoundsError\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/BytesUtils.sol\":\"BytesUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/utils/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal.\\n     * @param self The first bytes to compare.\\n     * @param other The second bytes to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first bytes to compare.\\n     * @param offset The offset of self.\\n     * @param len    The length of self.\\n     * @param other The second bytes to compare.\\n     * @param otheroffset The offset of the other string.\\n     * @param otherlen    The length of the other string.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if (offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if (otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n\\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask;\\n                if (shortest - idx >= 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\n                }\\n                int256 diff = int256(a & mask) - int256(b & mask);\\n                if (diff != 0) return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @param len The number of bytes to compare\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n     *      they are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n     * @dev Returns the 8-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\n     */\\n    function readUint8(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n     * @dev Returns the 16-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\n     */\\n    function readUint16(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\n     */\\n    function readUint32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes20(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the n byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes.\\n     * @param len The number of bytes.\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Copies a substring into a new byte string.\\n     * @param self The byte string to copy from.\\n     * @param offset The offset to start copying at.\\n     * @param len The number of bytes to copy.\\n     */\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /**\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\n     * @param self The string to search\\n     * @param off The offset to start searching at\\n     * @param len The number of bytes to search\\n     * @param needle The byte to search for\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n     */\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0xc566a3569af880a096a9bfb2fbb77060ef7aecde1a205dc26446a58877412060\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/wrapper/IMetadataService.sol":{"IMetadataService":{"abi":[{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrapper/IMetadataService.sol\":\"IMetadataService\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/wrapper/INameWrapper.sol":{"INameWrapper":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"ExpiryExtended","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint32","name":"fuses","type":"uint32"}],"name":"FusesSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"NameUnwrapped","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint32","name":"fuses","type":"uint32"},{"indexed":false,"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"NameWrapped","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint32","name":"fuseMask","type":"uint32"}],"name":"allFusesBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"canModifyName","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ens","outputs":[{"internalType":"contract ENS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"labelhash","type":"bytes32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"extendExpiry","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getData","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"isWrapped","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"isWrapped","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"metadataService","outputs":[{"internalType":"contract IMetadataService","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"names","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"}],"name":"registerAndWrapETH2LD","outputs":[{"internalType":"uint256","name":"registrarExpiry","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"registrar","outputs":[{"internalType":"contract IBaseRegistrar","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"labelHash","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"renew","outputs":[{"internalType":"uint256","name":"expires","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"bytes32","name":"labelhash","type":"bytes32"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"setChildFuses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"}],"name":"setFuses","outputs":[{"internalType":"uint32","name":"newFuses","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IMetadataService","name":"_metadataService","type":"address"}],"name":"setMetadataService","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setRecord","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"setSubnodeOwner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"setSubnodeRecord","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setTTL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract INameWrapperUpgrade","name":"_upgradeAddress","type":"address"}],"name":"setUpgradeContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"unwrap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"newRegistrant","type":"address"},{"internalType":"address","name":"newController","type":"address"}],"name":"unwrapETH2LD","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"upgrade","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"upgradeContract","outputs":[{"internalType":"contract INameWrapperUpgrade","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"address","name":"resolver","type":"address"}],"name":"wrap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"},{"internalType":"address","name":"resolver","type":"address"}],"name":"wrapETH2LD","outputs":[{"internalType":"uint64","name":"expires","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allFusesBurned(bytes32,uint32)":"adf4960a","approve(address,uint256)":"095ea7b3","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","canModifyName(bytes32,address)":"41415eab","ens()":"3f15457f","extendExpiry(bytes32,bytes32,uint64)":"6e5d6ad2","getApproved(uint256)":"081812fc","getData(uint256)":"0178fe3f","isApprovedForAll(address,address)":"e985e9c5","isWrapped(bytes32)":"fd0cd0d9","isWrapped(bytes32,bytes32)":"d9a50c12","metadataService()":"53095467","name()":"06fdde03","names(bytes32)":"20c38e2b","ownerOf(uint256)":"6352211e","registerAndWrapETH2LD(string,address,uint256,address,uint16)":"a4014982","registrar()":"2b20e397","renew(uint256,uint256)":"c475abff","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setChildFuses(bytes32,bytes32,uint32,uint64)":"33c69ea9","setFuses(bytes32,uint16)":"402906fc","setMetadataService(address)":"1534e177","setRecord(bytes32,address,address,uint64)":"cf408823","setResolver(bytes32,address)":"1896f70a","setSubnodeOwner(bytes32,string,address,uint32,uint64)":"c658e086","setSubnodeRecord(bytes32,string,address,address,uint64,uint32,uint64)":"24c1af44","setTTL(bytes32,uint64)":"14ab9038","setUpgradeContract(address)":"b6bcad26","supportsInterface(bytes4)":"01ffc9a7","unwrap(bytes32,bytes32,address)":"d8c9921a","unwrapETH2LD(bytes32,address,address)":"8b4dfa75","upgrade(bytes,bytes)":"c93ab3fd","upgradeContract()":"1f4e1504","uri(uint256)":"0e89341c","wrap(bytes,address,address)":"eb8ae530","wrapETH2LD(string,address,uint16,address)":"8cf8b41e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"ExpiryExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"}],\"name\":\"FusesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NameUnwrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"NameWrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"fuseMask\",\"type\":\"uint32\"}],\"name\":\"allFusesBurned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"canModifyName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"labelhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"extendExpiry\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isWrapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isWrapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataService\",\"outputs\":[{\"internalType\":\"contract IMetadataService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"ownerControlledFuses\",\"type\":\"uint16\"}],\"name\":\"registerAndWrapETH2LD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"registrarExpiry\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"contract IBaseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"labelHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"labelhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setChildFuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"ownerControlledFuses\",\"type\":\"uint16\"}],\"name\":\"setFuses\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"newFuses\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMetadataService\",\"name\":\"_metadataService\",\"type\":\"address\"}],\"name\":\"setMetadataService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setSubnodeRecord\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INameWrapperUpgrade\",\"name\":\"_upgradeAddress\",\"type\":\"address\"}],\"name\":\"setUpgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newRegistrant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"unwrapETH2LD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeContract\",\"outputs\":[{\"internalType\":\"contract INameWrapperUpgrade\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"ownerControlledFuses\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"wrapETH2LD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrapper/INameWrapper.sol\":\"INameWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/registry/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8e208b44d5dbf22552fe72d79b45c640855b84fbc9ee21f4c3bb4bfe81cbe8db\",\"license\":\"MIT\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/wrapper/INameWrapperUpgrade.sol":{"INameWrapperUpgrade":{"abi":[{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"address","name":"approved","type":"address"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"wrapFromUpgrade","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"wrapFromUpgrade(bytes,address,uint32,uint64,address,bytes)":"9198c276"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"wrapFromUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrapper/INameWrapperUpgrade.sol\":\"INameWrapperUpgrade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}